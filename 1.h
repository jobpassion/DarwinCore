//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AUTHORITY_KEYID_st;

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct CLSMachOSlice {
    void *_field1;
    int _field2;
    int _field3;
};

struct NAME_CONSTRAINTS_st;

struct SEContext {
    _Bool _field1;
    int _field2;
    int _field3;
    unsigned char _field4[16];
    unsigned long long _field5;
    int _field6;
    unsigned char _field7[64];
    struct evp_cipher_ctx_st *_field8;
    struct evp_cipher_st *_field9;
    unsigned long long _field10;
    unsigned long long _field11;
};

struct X509_POLICY_CACHE_st;

struct X509_algor_st;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct asn1_string_st;

struct buffer {
    unsigned long long _field1;
    unsigned long long _field2;
    char *_field3;
};

struct crypto_ex_data_st {
    struct stack_st_void *_field1;
    int _field2;
};

struct dh_st;

struct dsa_st;

struct ec_key_st;

struct engine_st;

struct evp_cipher_ctx_st;

struct evp_cipher_st;

struct evp_pkey_asn1_method_st;

struct evp_pkey_st {
    int _field1;
    int _field2;
    int _field3;
    struct evp_pkey_asn1_method_st *_field4;
    struct engine_st *_field5;
    union {
        char *_field1;
        struct rsa_st *_field2;
        struct dsa_st *_field3;
        struct dh_st *_field4;
        struct ec_key_st *_field5;
    } _field6;
    int _field7;
    struct stack_st_X509_ATTRIBUTE *_field8;
};

struct gzFile_s {
    unsigned int _field1;
    char *_field2;
    long long _field3;
};

struct in6_addr {
    union {
        unsigned char __u6_addr8[16];
        unsigned short __u6_addr16[8];
        unsigned int __u6_addr32[4];
    } __u6_addr;
};

struct in_addr {
    unsigned int s_addr;
};

struct ip_addr {
    unsigned int addr;
};

struct mbedtls_cipher_base_t;

struct netif {
    struct netif *next;
    struct ip_addr ip_addr;
    struct ip_addr netmask;
    struct ip_addr gw;
    CDUnknownFunctionPointerType input;
    CDUnknownFunctionPointerType output;
    CDUnknownFunctionPointerType linkoutput;
    void *state;
    unsigned char rs_count;
    unsigned short mtu;
    unsigned char hwaddr_len;
    unsigned char hwaddr[6];
    unsigned short flags;
    char name[2];
    unsigned char num;
};

struct pbuf;

struct rsa_st;

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct sockaddr_in6 {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned int _field4;
    struct in6_addr _field5;
    unsigned int _field6;
};

struct sockaddr_storage {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[6];
    long long _field4;
    char _field5[112];
};

struct stack_st_DIST_POINT;

struct stack_st_GENERAL_NAME;

struct stack_st_X509_ATTRIBUTE;

struct stack_st_void;

struct tcp_pcb {
    struct ip_addr _field1;
    struct ip_addr _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct tcp_pcb *_field6;
    void *_field7;
    CDUnknownFunctionPointerType _field8;
    int _field9;
    unsigned char _field10;
    int _field11;
    unsigned short _field12;
    char _field13[3];
    unsigned short _field14;
    unsigned char _field15;
    unsigned char _field16;
    unsigned char _field17;
    unsigned char _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned short _field21;
    unsigned short _field22;
    unsigned int _field23;
    short _field24;
    unsigned short _field25;
    unsigned int _field26;
    unsigned int _field27;
    short _field28;
    short _field29;
    short _field30;
    unsigned char _field31;
    unsigned char _field32;
    unsigned int _field33;
    unsigned short _field34;
    unsigned short _field35;
    unsigned int _field36;
    unsigned int _field37;
    unsigned int _field38;
    unsigned int _field39;
    unsigned short _field40;
    unsigned short _field41;
    unsigned short _field42;
    unsigned short _field43;
    unsigned short _field44;
    unsigned short _field45;
    struct tcp_seg *_field46;
    struct tcp_seg *_field47;
    struct tcp_seg *_field48;
    struct pbuf *_field49;
    CDUnknownFunctionPointerType _field50;
    CDUnknownFunctionPointerType _field51;
    CDUnknownFunctionPointerType _field52;
    CDUnknownFunctionPointerType _field53;
    CDUnknownFunctionPointerType _field54;
    unsigned int _field55;
    unsigned char _field56;
    unsigned char _field57;
    unsigned char _field58;
};

struct tcp_seg;

struct x509_cert_aux_st;

struct x509_cinf_st;

struct x509_st {
    struct x509_cinf_st *_field1;
    struct X509_algor_st *_field2;
    struct asn1_string_st *_field3;
    int _field4;
    int _field5;
    char *_field6;
    struct crypto_ex_data_st _field7;
    long long _field8;
    long long _field9;
    unsigned long long _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    struct asn1_string_st *_field14;
    struct AUTHORITY_KEYID_st *_field15;
    struct X509_POLICY_CACHE_st *_field16;
    struct stack_st_DIST_POINT *_field17;
    struct stack_st_GENERAL_NAME *_field18;
    struct NAME_CONSTRAINTS_st *_field19;
    unsigned char _field20[20];
    struct x509_cert_aux_st *_field21;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int major;
    unsigned int minor;
    unsigned int bugfix;
} CDStruct_e24ffa00;

typedef struct {
    char *_field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_4355734a;

typedef struct {
    char *_field1;
    void *_field2;
    _Bool _field3;
    void *_field4;
    char *_field5;
    char *_field6;
    char *_field7;
    char *_field8;
    char *_field9;
    unsigned int _field10;
    _Bool _field11;
    _Bool _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
} CDStruct_1e2a2a70;

typedef struct {
    char _field1[33];
    _Bool _field2;
    CDStruct_e24ffa00 _field3;
    CDStruct_e24ffa00 _field4;
    struct {
        void *_field1;
        unsigned long long _field2;
        void *_field3;
        void *_field4;
        void *_field5;
    } _field5;
    struct CLSMachOSlice _field6;
    long long _field7;
} CDStruct_762b38bc;

#pragma mark -

//
// File: /var/folders/r6/1ft191y56_j21lmdyqgnq7c80000gn/T/AppTranslocation/866576C9-A17F-4C14-BBAA-D66E91E57566/d/Surge-2.app/Contents/MacOS/Surge
// UUID: 6751808F-66F2-359B-BA4A-8365E9B39445
//
//                           Arch: x86_64
//                 Source version: 0.0.0.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/../Frameworks
//                               = /var/folders/r6/1ft191y56_j21lmdyqgnq7c80000gn/T/AppTranslocation/866576C9-A17F-4C14-BBAA-D66E91E57566/d/Surge-2.app/Contents/Frameworks
//

@protocol ANSMetadataSerializable <NSObject>
- (NSDictionary *)dictionaryRepresentationWithStartTime:(unsigned long long)arg1;
- (NSString *)eventName;
@end

@protocol ANSUploaderDelegate <NSObject>
- (void)uploader:(ANSUploader *)arg1 completedRequest:(NSURLRequest *)arg2 withResponse:(NSURLResponse *)arg3 uniqueName:(NSString *)arg4 error:(NSError *)arg5 completionHandler:(void (^)(BOOL, NSError *))arg6;
- (void)uploader:(ANSUploader *)arg1 didFinishUploadWithUniqueName:(NSString *)arg2 error:(NSError *)arg3;
- (NSString *)uploader:(ANSUploader *)arg1 filePathForUniqueName:(NSString *)arg2;

@optional
- (void)uploader:(ANSUploader *)arg1 session:(NSURLSession *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
@end

@protocol CLSBetaControllerDelegate <NSObject>
- (CLSSettings *)settingsForBetaController:(CLSBetaController *)arg1;
- (NSString *)APIKeyForBetaController:(CLSBetaController *)arg1;
@end

@protocol CLSCrashReport <NSObject>
@property(readonly, copy, nonatomic) NSString *OSBuildVersion;
@property(readonly, copy, nonatomic) NSString *OSVersion;
@property(readonly, nonatomic) NSDate *crashedOnDate;
@property(readonly, copy, nonatomic) NSString *bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString *bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary *customKeys;
@property(readonly, copy, nonatomic) NSString *identifier;
@end

@protocol CLSCrashReportingControllerDelegate <NSObject>
- (CLSSettings *)settingsForCrashReportingController:(CLSCrashReportingController *)arg1;
- (BOOL)isFirstInstallForCrashReportingController:(CLSCrashReportingController *)arg1;
- (NSString *)installIDForCrashReportingController:(CLSCrashReportingController *)arg1;
- (NSString *)APIKeyForCrashReportingController:(CLSCrashReportingController *)arg1;
- (BOOL)reportingController:(CLSCrashReportingController *)arg1 ensureDeliveryOfUnixSignal:(int)arg2;
- (void)reportingController:(CLSCrashReportingController *)arg1 internalDidDetectReportForLastExecution:(CLSInternalReport *)arg2;
- (void)reportingController:(CLSCrashReportingController *)arg1 didDetectReportForLastExecution:(CLSInternalReport *)arg2 completionHandler:(void (^)(BOOL))arg3;
- (BOOL)reportingControllerMustInformDelegateOfReports:(CLSCrashReportingController *)arg1;
- (BOOL)reportingControllerCanUseBackgroundSessions:(CLSCrashReportingController *)arg1;
- (void)detectedCrash;
- (BOOL)shouldInstallCrashCallback;
@end

@protocol CLSNetworkClientDelegate <NSObject>
- (BOOL)networkClientCanUseBackgroundSessions:(CLSNetworkClient *)arg1;

@optional
- (void)networkClient:(CLSNetworkClient *)arg1 didFinishUploadWithPath:(NSString *)arg2 error:(NSError *)arg3;
@end

@protocol CLSReportsControllerDelegate <NSObject>
- (NSString *)bundleIdentifierForReportsController:(CLSReportsController *)arg1;
- (NSString *)APIKeyForReportsController:(CLSReportsController *)arg1;
- (CLSSettings *)settingsForReportsController:(CLSReportsController *)arg1;
- (void)reportsControllerDidCompleteAllSubmissions:(CLSReportsController *)arg1;
- (void)reportsController:(CLSReportsController *)arg1 didCompletePackageSubmission:(NSString *)arg2 error:(NSError *)arg3;
@end

@protocol CLSURLSessionDataDelegate <CLSURLSessionTaskDelegate>
- (void)task:(CLSURLSessionDataTask *)arg1 didReceiveData:(NSData *)arg2;
- (void)task:(CLSURLSessionDataTask *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
@end

@protocol CLSURLSessionDownloadDelegate <CLSURLSessionDataDelegate>
- (void)downloadTask:(CLSURLSessionDownloadTask *)arg1 didFinishDownloadingToURL:(NSURL *)arg2;
@end

@protocol CLSURLSessionTaskDelegate <NSObject>
- (void)task:(CLSURLSessionTask *)arg1 didCompleteWithError:(NSError *)arg2;
- (NSURLRequest *)task:(CLSURLSessionTask *)arg1 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg2 newRequest:(NSURLRequest *)arg3;
@end

@protocol FABDownloadAndSaveSettingsOperationDelegate <NSObject>
- (void)operation:(FABDownloadAndSaveSettingsOperation *)arg1 didDownloadAndSaveSettingsWithError:(NSError *)arg2;
@end

@protocol FABKit <NSObject>
+ (NSString *)kitDisplayVersion;
+ (NSString *)bundleIdentifier;

@optional
+ (void)initializeIfNeeded;
+ (NSString *)kitBuildVersion;
@end

@protocol FABOnboardingOperationDelegate <NSObject>
- (void)onboardingOperation:(FABOnboardingOperation *)arg1 didCompleteAppCreationWithError:(NSError *)arg2;
- (void)onboardingOperation:(FABOnboardingOperation *)arg1 didCompleteAppUpdateWithError:(NSError *)arg2;
@end

@protocol KDATableViewDelegate <NSTableViewDelegate>
- (void)tableView:(KDATableView *)arg1 didRightClickWithEvent:(NSEvent *)arg2 row:(long long)arg3;
@end

@protocol NSApplicationDelegate <NSObject>

@optional
- (void)applicationDidChangeOcclusionState:(NSNotification *)arg1;
- (void)applicationDidChangeScreenParameters:(NSNotification *)arg1;
- (void)applicationWillTerminate:(NSNotification *)arg1;
- (void)applicationDidUpdate:(NSNotification *)arg1;
- (void)applicationWillUpdate:(NSNotification *)arg1;
- (void)applicationDidResignActive:(NSNotification *)arg1;
- (void)applicationWillResignActive:(NSNotification *)arg1;
- (void)applicationDidBecomeActive:(NSNotification *)arg1;
- (void)applicationWillBecomeActive:(NSNotification *)arg1;
- (void)applicationDidUnhide:(NSNotification *)arg1;
- (void)applicationWillUnhide:(NSNotification *)arg1;
- (void)applicationDidHide:(NSNotification *)arg1;
- (void)applicationWillHide:(NSNotification *)arg1;
- (void)applicationDidFinishLaunching:(NSNotification *)arg1;
- (void)applicationWillFinishLaunching:(NSNotification *)arg1;
- (void)application:(NSApplication *)arg1 userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)arg2;
- (void)application:(NSApplication *)arg1 didUpdateUserActivity:(NSUserActivity *)arg2;
- (void)application:(NSApplication *)arg1 didFailToContinueUserActivityWithType:(NSString *)arg2 error:(NSError *)arg3;
- (BOOL)application:(NSApplication *)arg1 continueUserActivity:(NSUserActivity *)arg2 restorationHandler:(void (^)(NSArray *))arg3;
- (BOOL)application:(NSApplication *)arg1 willContinueUserActivityWithType:(NSString *)arg2;
- (void)application:(NSApplication *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 didReceiveRemoteNotification:(NSDictionary *)arg2;
- (void)application:(NSApplication *)arg1 didFailToRegisterForRemoteNotificationsWithError:(NSError *)arg2;
- (void)application:(NSApplication *)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)arg2;
- (NSError *)application:(NSApplication *)arg1 willPresentError:(NSError *)arg2;
- (NSMenu *)applicationDockMenu:(NSApplication *)arg1;
- (BOOL)applicationShouldHandleReopen:(NSApplication *)arg1 hasVisibleWindows:(BOOL)arg2;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)arg1;
- (unsigned long long)application:(NSApplication *)arg1 printFiles:(NSArray *)arg2 withSettings:(NSDictionary *)arg3 showPrintPanels:(BOOL)arg4;
- (BOOL)application:(NSApplication *)arg1 printFile:(NSString *)arg2;
- (BOOL)application:(id)arg1 openFileWithoutUI:(NSString *)arg2;
- (BOOL)applicationOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)application:(NSApplication *)arg1 openTempFile:(NSString *)arg2;
- (void)application:(NSApplication *)arg1 openFiles:(NSArray *)arg2;
- (BOOL)application:(NSApplication *)arg1 openFile:(NSString *)arg2;
- (unsigned long long)applicationShouldTerminate:(NSApplication *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (struct CGRect)confinementRectForMenu:(NSMenu *)arg1 onScreen:(NSScreen *)arg2;
- (void)menu:(NSMenu *)arg1 willHighlightItem:(NSMenuItem *)arg2;
- (void)menuDidClose:(NSMenu *)arg1;
- (void)menuWillOpen:(NSMenu *)arg1;
- (BOOL)menuHasKeyEquivalent:(NSMenu *)arg1 forEvent:(NSEvent *)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(NSMenu *)arg1 updateItem:(NSMenuItem *)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(NSMenu *)arg1;
- (void)menuNeedsUpdate:(NSMenu *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(NSNotification *)arg1;
- (void)outlineViewItemWillCollapse:(NSNotification *)arg1;
- (void)outlineViewItemDidExpand:(NSNotification *)arg1;
- (void)outlineViewItemWillExpand:(NSNotification *)arg1;
- (void)outlineViewSelectionIsChanging:(NSNotification *)arg1;
- (void)outlineViewColumnDidResize:(NSNotification *)arg1;
- (void)outlineViewColumnDidMove:(NSNotification *)arg1;
- (void)outlineViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(NSOutlineView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 isGroupItem:(id)arg2;
- (NSCell *)outlineView:(NSOutlineView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (id)outlineView:(NSOutlineView *)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(NSString *)arg4;
- (NSString *)outlineView:(NSOutlineView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (double)outlineView:(NSOutlineView *)arg1 heightOfRowByItem:(id)arg2;
- (NSString *)outlineView:(NSOutlineView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(NSOutlineView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)outlineView:(NSOutlineView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(NSOutlineView *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (void)outlineView:(NSOutlineView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)outlineView:(NSOutlineView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)outlineView:(NSOutlineView *)arg1 rowViewForItem:(id)arg2;
- (NSView *)outlineView:(NSOutlineView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
@end

@protocol NSSearchFieldDelegate <NSTextFieldDelegate>

@optional
- (void)searchFieldDidEndSearching:(NSSearchField *)arg1;
- (void)searchFieldDidStartSearching:(NSSearchField *)arg1;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (NSArray *)tableView:(NSTableView *)arg1 rowActionsForRow:(long long)arg2 edge:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>

@optional
- (BOOL)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 shouldSelectCandidateAtIndex:(unsigned long long)arg3;
- (NSArray *)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 candidates:(NSArray *)arg3 forSelectedRange:(struct _NSRange)arg4;
- (NSArray *)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 candidatesForSelectedRange:(struct _NSRange)arg3;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(NSURLConnection *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connection:(NSURLConnection *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (void)connection:(NSURLConnection *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(NSURLConnection *)arg1;
- (void)connection:(NSURLConnection *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didCompleteWithError:(NSError *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didFinishCollectingMetrics:(NSURLSessionTaskMetrics *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 needNewBodyStream:(void (^)(NSInputStream *))arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg3 newRequest:(NSURLRequest *)arg4 completionHandler:(void (^)(NSURLRequest *))arg5;
@end

@protocol NSUserNotificationCenterDelegate <NSObject>

@optional
- (BOOL)userNotificationCenter:(NSUserNotificationCenter *)arg1 shouldPresentNotification:(NSUserNotification *)arg2;
- (void)userNotificationCenter:(NSUserNotificationCenter *)arg1 didActivateNotification:(NSUserNotification *)arg2;
- (void)userNotificationCenter:(NSUserNotificationCenter *)arg1 didDeliverNotification:(NSUserNotification *)arg2;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidChangeOcclusionState:(NSNotification *)arg1;
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenOnScreen:(NSScreen *)arg2 withDuration:(double)arg3;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1 onScreen:(NSScreen *)arg2;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

@protocol OutgoingConnectionDelegate <NSObject>
- (void)outgoingConnectionWillRetrySetup:(SGOutgoingConnection *)arg1 error:(NSError *)arg2 time:(int)arg3 DNSRecord:(SGDNSRecord *)arg4;
- (NSFileHandle *)outgoingConnectionShouldReplica:(SGOutgoingConnection *)arg1;
- (void)outgoingConnectionResponseDidComplete:(SGOutgoingConnection *)arg1 keepAlive:(BOOL)arg2;
- (void)outgoingConnectionSocketDidDisconnect:(SGOutgoingConnection *)arg1 error:(NSError *)arg2;
- (void)outgoingConnectionDidWriteBodyData:(SGOutgoingConnection *)arg1 length:(unsigned long long)arg2;
- (void)outgoingConnectionDidWriteHeaderData:(SGOutgoingConnection *)arg1 length:(unsigned long long)arg2;
- (void)outgoingConnection:(SGOutgoingConnection *)arg1 didReadResponseHeader:(SGHTTPResponseHeader *)arg2;
- (void)outgoingConnection:(SGOutgoingConnection *)arg1 didReadData:(NSData *)arg2;
- (void)outgoingConnectionSetupFailed:(SGOutgoingConnection *)arg1 error:(NSError *)arg2;
@end

@protocol SGConnectionManagerDelegate <NSObject>
- (void)connectionManager:(SGConnectionManager *)arg1 didAcceptConnectionFromNewClient:(NSString *)arg2;
@end

@protocol SGConnectorDelegate <NSObject>
- (void)connector:(SGConnector *)arg1 didReadData:(NSData *)arg2 withTag:(long long)arg3;
- (void)connectorDidDisconnect:(SGConnector *)arg1 withError:(NSError *)arg2;
- (void)connector:(SGConnector *)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidSetupFailed:(SGConnector *)arg1 error:(NSError *)arg2;
- (void)connectorDidBecomeAvailable:(SGConnector *)arg1;

@optional
- (void)connectorDidSetupTCPConnection:(SGConnector *)arg1;
- (void)connectorWillRetrySetup:(SGConnector *)arg1 error:(NSError *)arg2 time:(int)arg3 DNSRecord:(SGDNSRecord *)arg4;
- (void)connectorDidCloseReadStream:(SGConnector *)arg1;
@end

@protocol SGConnectorManagerProtocol
- (NSObject<OS_dispatch_queue> *)delegateQueue;
@end

@protocol SGControllerActionProvider
- (BOOL)controllerReceivedCommandSwitchProfile:(SGController *)arg1 profileName:(NSString *)arg2;
- (NSDate *)uptimeDate;
- (void)controllerDidChangeSettingModelRulesAndPolicyMap:(SGController *)arg1;
- (void)controllerDidChangeSettingModelHosts:(SGController *)arg1;
- (void)controllerReceivedCommandSetEnvironment:(SGController *)arg1 value:(NSDictionary *)arg2;
- (NSDictionary *)controllerReceivedCommandCurrentEnvironment:(SGController *)arg1;
- (BOOL)controllerReceivedCommandKill:(SGController *)arg1 requestRecordID:(unsigned long long)arg2;
- (void)controllerReceivedCommandReload:(SGController *)arg1;
- (void)controllerReceivedCommandStop:(SGController *)arg1;
@end

@protocol SGDNSClientDelegate <NSObject>
- (void)client:(SGDNSClient *)arg1 didCompleteDNSLookup:(NSString *)arg2 result:(SGDNSClientResult *)arg3;
@end

@protocol SGDNSUDPSocketDelegate <NSObject>
- (void)UDPSocket:(SGDNSUDPSocket *)arg1 didReceiveData:(NSData *)arg2 fromAddress:(NSString *)arg3 port:(unsigned short)arg4;
@end

@protocol SGGCDAsyncSocketDelegate <NSObject>

@optional
- (void)socketDidDisconnect:(SGGCDAsyncSocket *)arg1 withError:(NSError *)arg2;
- (void)socketDidCloseReadStream:(SGGCDAsyncSocket *)arg1;
- (double)socket:(SGGCDAsyncSocket *)arg1 shouldTimeoutWriteWithTag:(long long)arg2 elapsed:(double)arg3 bytesDone:(unsigned long long)arg4;
- (double)socket:(SGGCDAsyncSocket *)arg1 shouldTimeoutReadWithTag:(long long)arg2 elapsed:(double)arg3 bytesDone:(unsigned long long)arg4;
- (void)socket:(SGGCDAsyncSocket *)arg1 didWritePartialDataOfLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)socket:(SGGCDAsyncSocket *)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(SGGCDAsyncSocket *)arg1 didReadPartialDataOfLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)socket:(SGGCDAsyncSocket *)arg1 didReadData:(NSData *)arg2 withTag:(long long)arg3;
- (void)socket:(SGGCDAsyncSocket *)arg1 didConnectToHost:(NSString *)arg2 port:(unsigned short)arg3;
- (NSObject<OS_dispatch_queue> *)newSocketQueueForConnectionFromAddress:(NSData *)arg1 onSocket:(SGGCDAsyncSocket *)arg2;
@end

@protocol SGListenerDelegate <SGGCDAsyncSocketDelegate>
- (void)listener:(SGListener *)arg1 didAcceptNewSocket:(SGGCDAsyncSocket *)arg2 fromAddress:(NSData *)arg3;
@end

@protocol SGLogRecordContainerTrafficDelegate <NSObject>
- (void)logRecordContainerDidUpdateInterfaceSpeedInfo:(SGLogRecordContainer *)arg1;
@end

@protocol SGNetworkDiagnosticsDelegate <NSObject>
- (void)networkDiagnosticsDidComplete:(SGNetworkDiagnostics *)arg1;
- (void)networkDiagnostics:(SGNetworkDiagnostics *)arg1 newOutput:(NSString *)arg2 icon:(NSString *)arg3;
- (void)networkDiagnostics:(SGNetworkDiagnostics *)arg1 willStartSection:(NSString *)arg2;
@end

@protocol SGSocketBasicProtocol <NSObject>
@property(readonly) SGFileDescriptor *fileDescriptor;
@property(readonly) int PID;
@property(readonly) NSString *processPath;
@property(readonly) SGDNSClientResult *dnsResult;
@property(readonly) SGDNSRecord *usingDNSRecord;
@property(readonly) NSString *interfaceName;
@property(readonly) unsigned short localPort;
@property(readonly) NSString *localHost;
@property(readonly) unsigned short connectedPort;
@property(readonly) NSString *connectedHost;
@property(readonly) BOOL isConnected;
@property(readonly) BOOL isDisconnected;
@property __weak id delegate;
- (void)disconnectAfterWritingHoldRef;
- (void)disconnect;
- (void)writeData:(NSData *)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 maxLength:(unsigned long long)arg2 tag:(long long)arg3;
@end

@protocol SGSocketBasicProtocolDelegate <NSObject>
@end

@protocol SGSocketProtocol <SGSocketBasicProtocol>
+ (long long)purgeWritingHoldRefSockets;
@property __weak id <SGSocketProtocolDelegate> delegate;
- (BOOL)connectToHost:(NSString *)arg1 onPort:(unsigned short)arg2 viaInterface:(NSString *)arg3 withTimeout:(double)arg4 error:(id *)arg5;
- (BOOL)connectToHost:(NSString *)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (id)initWithDelegate:(id)arg1 delegateQueue:(NSObject<OS_dispatch_queue> *)arg2;
@end

@protocol SGSocketProtocolDelegate <SGSocketBasicProtocolDelegate>

@optional
- (void)socketDidDisconnect:(id <SGSocketBasicProtocol>)arg1 withError:(NSError *)arg2;
- (void)socket:(id <SGSocketBasicProtocol>)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id <SGSocketBasicProtocol>)arg1 didReadData:(NSData *)arg2 withTag:(long long)arg3;
- (void)socket:(id <SGSocketProtocol>)arg1 didConnectToHost:(NSString *)arg2 port:(unsigned short)arg3;
@end

@protocol SGTLSWrapperConnectorDelegate <SGConnectorDelegate>
- (void)connectorDidCompleteTLSHandshake:(SGTLSWrapper *)arg1;
@end

@protocol SGTLSWrapperDelegate <SGSocketProtocolDelegate>
- (void)socketDidCompleteTLSHandshake:(SGTLSWrapper *)arg1;
@end

@protocol SSEncryptContextProtocol <NSObject>
- (long long)decryptWithData:(NSData *)arg1 outData:(id *)arg2;
- (long long)encryptWithData:(NSData *)arg1 outData:(id *)arg2;
@end

@protocol SUUpdaterDelegate <NSObject>

@optional
- (void)updater:(SUUpdater *)arg1 didAbortWithError:(NSError *)arg2;
- (void)updater:(SUUpdater *)arg1 didCancelInstallUpdateOnQuit:(SUAppcastItem *)arg2;
- (void)updater:(SUUpdater *)arg1 willInstallUpdateOnQuit:(SUAppcastItem *)arg2 immediateInstallationInvocation:(NSInvocation *)arg3;
- (void)updaterDidShowModalAlert:(SUUpdater *)arg1;
- (void)updaterWillShowModalAlert:(SUUpdater *)arg1;
- (NSString *)pathToRelaunchForUpdater:(SUUpdater *)arg1;
- (id <SUVersionDisplay>)versionDisplayerForUpdater:(SUUpdater *)arg1;
- (id <SUVersionComparison>)versionComparatorForUpdater:(SUUpdater *)arg1;
- (void)updaterWillRelaunchApplication:(SUUpdater *)arg1;
- (BOOL)updaterShouldRelaunchApplication:(SUUpdater *)arg1;
- (BOOL)updater:(SUUpdater *)arg1 shouldPostponeRelaunchForUpdate:(SUAppcastItem *)arg2 untilInvoking:(NSInvocation *)arg3;
- (void)updater:(SUUpdater *)arg1 willInstallUpdate:(SUAppcastItem *)arg2;
- (void)userDidCancelDownload:(SUUpdater *)arg1;
- (void)updater:(SUUpdater *)arg1 failedToDownloadUpdate:(SUAppcastItem *)arg2 error:(NSError *)arg3;
- (void)updater:(SUUpdater *)arg1 willDownloadUpdate:(SUAppcastItem *)arg2 withRequest:(NSMutableURLRequest *)arg3;
- (void)updaterDidNotFindUpdate:(SUUpdater *)arg1;
- (void)updater:(SUUpdater *)arg1 didFindValidUpdate:(SUAppcastItem *)arg2;
- (SUAppcastItem *)bestValidUpdateInAppcast:(SUAppcast *)arg1 forUpdater:(SUUpdater *)arg2;
- (void)updater:(SUUpdater *)arg1 didFinishLoadingAppcast:(SUAppcast *)arg2;
- (BOOL)updaterShouldPromptForPermissionToCheckForUpdates:(SUUpdater *)arg1;
- (NSString *)feedURLStringForUpdater:(SUUpdater *)arg1;
- (NSArray *)feedParametersForUpdater:(SUUpdater *)arg1 sendingSystemProfile:(BOOL)arg2;
- (BOOL)updaterMayCheckForUpdates:(SUUpdater *)arg1;
@end

@protocol SpeedViewDelegate <NSObject>
- (void)menuWillOpen:(NSMenu *)arg1;
@end

@protocol WKScriptMessageHandler <NSObject>
- (void)userContentController:(WKUserContentController *)arg1 didReceiveScriptMessage:(WKScriptMessage *)arg2;
@end

@protocol __ARCLiteIndexedSubscripting__
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
@end

@protocol __ARCLiteKeyedSubscripting__
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
@end

@interface ConfigWindowController : NSWindowController <NSWindowDelegate, NSOutlineViewDelegate, NSOutlineViewDataSource>
{
    NSOutlineView *_outlineView;
    NSView *_contentView;
    NSButton *_saveButton;
    ConfigContext *_context;
    NSMutableDictionary *_viewControllerMap;
    ProfileViewController *_profileViewController;
    NSArray *_panels;
}

+ (void)purgeSharedInstance;
+ (BOOL)sharedControllerExists;
+ (id)sharedController;
- (void).cxx_destruct;
- (void)addProxyRuleWithProcess:(id)arg1;
- (void)addProxyRuleWithHost:(id)arg1;
- (void)confirmUnsavedChanges:(CDUnknownBlockType)arg1;
- (void)textFieldDidChange:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (BOOL)windowShouldClose:(id)arg1;
- (void)switchToViewControlerWithClass:(Class)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (id)outlineView:(id)arg1 rowViewForItem:(id)arg2;
- (void)switchToViewController:(id)arg1;
- (id)outlineView:(id)arg1 viewForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)saveAndApply;
- (void)apply:(id)arg1;
- (void)dismiss:(id)arg1;
- (void)configSaveButton;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (void)recreateContext;
- (void)reload;
- (void)windowDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ConfigBaseViewController : NSViewController
{
    ConfigContext *_context;
}

@property(retain, nonatomic) ConfigContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)reload;
- (void)save;
- (BOOL)validate;
- (void)otherSettingChanged:(id)arg1;
- (void)settingModelValueChanged:(id)arg1;
- (id)initWithContext:(id)arg1;

@end

@interface ConfigListTableRowView : NSTableRowView
{
}

- (BOOL)isEmphasized;
- (void)drawSelectionInRect:(struct CGRect)arg1;

@end

@interface ConfigWindow : NSWindow
{
}

- (BOOL)canBecomeKeyWindow;

@end

@interface ConfigContext : NSObject
{
    BOOL _modelChanged;
    BOOL _otherSettingChanged;
    SGSettingsModel *_settingModel;
    NSString *_configPath;
}

@property(retain, nonatomic) NSString *configPath; // @synthesize configPath=_configPath;
@property(nonatomic) BOOL otherSettingChanged; // @synthesize otherSettingChanged=_otherSettingChanged;
@property(nonatomic) BOOL modelChanged; // @synthesize modelChanged=_modelChanged;
@property(retain, nonatomic) SGSettingsModel *settingModel; // @synthesize settingModel=_settingModel;
- (void).cxx_destruct;

@end

@interface ConfigWindowListTableCellView : NSTableCellView
{
    NSString *_text;
}

@property(copy, nonatomic) NSString *text; // @synthesize text=_text;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (void)setBackgroundStyle:(long long)arg1;

@end

@interface SGTCPConnectionManager : SGBaseObjectWithDispatchQueue <SGConnectorManagerProtocol>
{
    NSMutableArray *_connections;
    NSObject<OS_dispatch_source> *_tcpTimer;
    struct netif _netif;
    struct tcp_pcb *_listener;
}

- (void).cxx_destruct;
- (void)resumeTimer;
- (void)pauseTimer;
- (BOOL)killConnectionWithRecordID:(unsigned long long)arg1;
- (void)closeAllConnection;
- (void)incomingData:(id)arg1;
- (id)delegateQueue;
- (void)removeConnectionRef:(id)arg1;
- (void)incomingTCP:(struct tcp_pcb *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ProfileViewController : NSViewController <KDATableViewDelegate, NSTableViewDataSource>
{
    NSPathControl *_pathControl;
    NSTableView *_tableView;
    NSButton *_deleteButton;
    NSButton *_renameButton;
    NSButton *_exportButton;
    NSView *_changePathView;
    NSTextField *_pathLabel;
    NSButton *_documentsButton;
    NSButton *_icloudButton;
    NSButton *_customButton;
    NSMutableArray *_profiles;
    NSObject<OS_dispatch_source> *_source;
}

- (void).cxx_destruct;
- (void)checkEnterpriseConfigUpdates;
- (void)checkManagedConfigUpdates:(id)arg1;
- (void)tableView:(id)arg1 didRightClickWithEvent:(id)arg2 row:(long long)arg3;
- (void)selectCustomPath:(id)arg1;
- (void)changePath:(id)arg1;
- (void)revealInFinder:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)importProfile:(id)arg1;
- (void)exportProfile:(id)arg1;
- (void)renameProfile:(id)arg1;
- (void)doubleClick:(id)arg1;
- (void)overwriteConfirmWithName:(id)arg1 success:(CDUnknownBlockType)arg2;
- (void)duplicateProfile;
- (void)newEmptyProfile;
- (void)deleteProfile:(id)arg1;
- (void)newProfile:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)reloadProfiles;
- (void)reloadData;
- (void)recreateEventSource;
- (void)dealloc;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ProfileContext : NSObject
{
    BOOL _enterprise;
    NSString *_name;
    NSString *_desc;
    NSString *_path;
    NSError *_error;
    SGSettingsModel *_model;
}

@property(nonatomic) BOOL enterprise; // @synthesize enterprise=_enterprise;
@property(retain, nonatomic) SGSettingsModel *model; // @synthesize model=_model;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSString *path; // @synthesize path=_path;
@property(retain, nonatomic) NSString *desc; // @synthesize desc=_desc;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (BOOL)isActive;

@end

@interface ProfileTextFieldCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;

@end

@interface SGLogRecordContainer : SGBaseObjectWithDispatchQueue
{
    NSMutableDictionary *_connectorSessionRecordMap;
    KDFIFOQueue *_requestLogQueue;
    SGLogInterfaceSessionRecord *_interfaceSessionRecord;
    double _previousTestSpeedTime;
    NSObject<OS_dispatch_source> *_speedTimer;
    NSMutableArray *_activeConversationRecords;
    NSMutableArray *_downloadSpeedHistory;
    NSMutableArray *_uploadSpeedHistory;
    unsigned long long _preivousTimerRequestCount;
    BOOL _replica;
    NSString *_persistentStoreBasePath;
    unsigned long long _currentUploadSpeed;
    unsigned long long _currentDownloadSpeed;
    NSNotificationCenter *_notificationCenter;
    NSPointerArray *_trafficDelegates;
    NSPointerArray *_conversationRecordDelegates;
    long long _processedRequestCount;
}

+ (void)setActiveLogContainer:(id)arg1;
+ (id)activeLogContainer;
@property(readonly) long long processedRequestCount; // @synthesize processedRequestCount=_processedRequestCount;
@property(readonly) NSPointerArray *conversationRecordDelegates; // @synthesize conversationRecordDelegates=_conversationRecordDelegates;
@property(readonly) NSPointerArray *trafficDelegates; // @synthesize trafficDelegates=_trafficDelegates;
@property(readonly) NSNotificationCenter *notificationCenter; // @synthesize notificationCenter=_notificationCenter;
@property(readonly) NSArray *uploadSpeedHistory; // @synthesize uploadSpeedHistory=_uploadSpeedHistory;
@property(readonly) NSArray *downloadSpeedHistory; // @synthesize downloadSpeedHistory=_downloadSpeedHistory;
@property(readonly) unsigned long long currentDownloadSpeed; // @synthesize currentDownloadSpeed=_currentDownloadSpeed;
@property(readonly) unsigned long long currentUploadSpeed; // @synthesize currentUploadSpeed=_currentUploadSpeed;
@property(retain) NSString *persistentStoreBasePath; // @synthesize persistentStoreBasePath=_persistentStoreBasePath;
@property BOOL replica; // @synthesize replica=_replica;
- (void).cxx_destruct;
- (id)responseDumpFilePathWithRecordID:(unsigned long long)arg1;
- (id)requestDumpFilePathWithRecordID:(unsigned long long)arg1;
- (id)dumpFilePathWithRecordID:(unsigned long long)arg1 filename:(id)arg2;
- (void)markConversationRecordInactive:(id)arg1;
- (id)allConnectorSessionRecord;
- (id)allInterfaceSessionRecord;
- (id)activeRequest;
- (id)recentRequest;
- (id)newConversationRecordWithSourceAddress:(id)arg1 sourcePort:(int)arg2 URL:(id)arg3 method:(id)arg4 processPath:(id)arg5 PID:(int)arg6;
- (id)connectorSessionRecordWithPolicyName:(id)arg1;
- (void)prepareConnectorSessionRecordWithPolicyNames:(id)arg1;
- (id)interfaceSessionRecord;
- (id)interfaceSessionRecordWithInterfaceName:(id)arg1;
- (void)dealloc;
- (void)speedTimer;
- (void)resumeTimer;
- (void)pauseTimer;
- (id)init;

@end

@interface SGLogRecord : SGBaseObject
{
    unsigned long long _inBytes;
    unsigned long long _outBytes;
    SGLogRecordContainer *_container;
    NSLock *_lock;
    NSDate *_startDate;
    unsigned long long _inMaxSpeed;
    unsigned long long _inCurrentSpeed;
    unsigned long long _outMaxSpeed;
    unsigned long long _outCurrentSpeed;
    unsigned long long _inPreviousBytes;
    unsigned long long _outPreviousBytes;
}

@property(nonatomic) unsigned long long outPreviousBytes; // @synthesize outPreviousBytes=_outPreviousBytes;
@property(nonatomic) unsigned long long inPreviousBytes; // @synthesize inPreviousBytes=_inPreviousBytes;
@property(nonatomic) unsigned long long outCurrentSpeed; // @synthesize outCurrentSpeed=_outCurrentSpeed;
@property(nonatomic) unsigned long long outMaxSpeed; // @synthesize outMaxSpeed=_outMaxSpeed;
@property(nonatomic) unsigned long long inCurrentSpeed; // @synthesize inCurrentSpeed=_inCurrentSpeed;
@property(nonatomic) unsigned long long inMaxSpeed; // @synthesize inMaxSpeed=_inMaxSpeed;
@property(nonatomic) unsigned long long outBytes; // @synthesize outBytes=_outBytes;
@property(nonatomic) unsigned long long inBytes; // @synthesize inBytes=_inBytes;
@property(readonly, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
- (void).cxx_destruct;
- (void)addOutBytes:(unsigned long long)arg1;
- (void)addInBytes:(unsigned long long)arg1;
- (id)initWithContainer:(id)arg1;

@end

@interface SGLogRequestRecord : SGLogRecord
{
    NSFileHandle *_requestFileHandle;
    NSFileHandle *_responseFileHandle;
    SGLogRequestModel *_dataModel;
    NSString *_path;
}

+ (id)interestInDataModelProperty;
@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly, nonatomic) SGLogRequestModel *dataModel; // @synthesize dataModel=_dataModel;
- (void).cxx_destruct;
- (void)dealloc;
- (void)markRecordInactive;
- (void)notifyDelegateDidUpdate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)speedUpdated;
- (void)addNote:(id)arg1;
- (void)addOutBytes:(unsigned long long)arg1;
- (void)addInBytes:(unsigned long long)arg1;
- (void)basicDataFilled;
- (id)responseBodyDataFileHandle;
- (id)requestBodyDataFileHandle;
- (id)initWithContainer:(id)arg1;

@end

@interface SGLogInterfaceSessionRecord : SGLogRecord
{
}

@end

@interface SGLogConnectorSessionRecord : SGLogRecord
{
}

@end

@interface SGMTUNInterface : SGTUNInterface
{
    SGFileDescriptor *_surgeEndFd;
    NSObject<OS_dispatch_source> *_receiveSource;
    struct sockaddr_in _clientAddr;
    unsigned short _listeningPort;
}

@property(readonly) unsigned short listeningPort; // @synthesize listeningPort=_listeningPort;
- (void).cxx_destruct;
- (void)dealloc;
- (void)writeDatagram:(id)arg1;
- (void)doReceive;
- (BOOL)startWithError:(id *)arg1;
- (id)init;

@end

@interface SGSettingsModel : NSObject <NSCopying>
{
    BOOL _requireProtected;
    KDMutableOrderedDictionary *_generalSection;
    NSArray *_proxies;
    NSArray *_proxyGroups;
    NSDictionary *_policyMap;
    NSArray *_rules;
    NSArray *_hostItems;
    NSArray *_URLRewriteRules;
    NSArray *_headerRewriteRules;
    NSArray *_SSIDSettings;
    NSArray *_mapLocalRules;
    SGSettingsModelMITMContext *_MITMContext;
    SGManagedConfigParameters *_managedConfigParameters;
}

+ (BOOL)verifyDNSServerPropertyValue:(id)arg1;
+ (id)parseProxyGroupLine:(id)arg1 proxyGroupArray:(id)arg2;
+ (id)parseSSIDLine:(id)arg1 SSIDSettingArray:(id)arg2;
+ (id)parseRuleLine:(id)arg1 ruleArray:(id)arg2;
+ (id)parseProxyLine:(id)arg1 proxyArray:(id)arg2;
+ (id)parseStringIntoSectionLineArray:(id)arg1 sectionLineDictionary:(id)arg2;
+ (id)settingsModelWithString:(id)arg1 error:(id *)arg2;
+ (id)settingsModelFromPath:(id)arg1 error:(id *)arg2;
+ (void)load;
+ (id)parseHostLine:(id)arg1 hostArray:(id)arg2;
+ (id)parseMITMLine:(id)arg1 MITMContext:(id)arg2;
+ (id)invalidLineErrorWithLineContent:(id)arg1;
+ (id)parseURLRewriteLine:(id)arg1 URLRewriteRuleArray:(id)arg2;
+ (id)parseHeaderRewriteLine:(id)arg1 headerRewriteRuleArray:(id)arg2;
+ (id)parseMapLocalLine:(id)arg1 mapLocalArray:(id)arg2;
+ (id)validateGeneralLine:(id)arg1;
@property(retain, nonatomic) SGManagedConfigParameters *managedConfigParameters; // @synthesize managedConfigParameters=_managedConfigParameters;
@property(nonatomic) BOOL requireProtected; // @synthesize requireProtected=_requireProtected;
@property(retain, nonatomic) SGSettingsModelMITMContext *MITMContext; // @synthesize MITMContext=_MITMContext;
@property(retain, nonatomic) NSArray *mapLocalRules; // @synthesize mapLocalRules=_mapLocalRules;
@property(retain, nonatomic) NSArray *SSIDSettings; // @synthesize SSIDSettings=_SSIDSettings;
@property(retain, nonatomic) NSArray *headerRewriteRules; // @synthesize headerRewriteRules=_headerRewriteRules;
@property(retain, nonatomic) NSArray *URLRewriteRules; // @synthesize URLRewriteRules=_URLRewriteRules;
@property(retain, nonatomic) NSArray *hostItems; // @synthesize hostItems=_hostItems;
@property(retain, nonatomic) NSArray *rules; // @synthesize rules=_rules;
@property(readonly, nonatomic) NSDictionary *policyMap; // @synthesize policyMap=_policyMap;
@property(retain, nonatomic) NSArray *proxyGroups; // @synthesize proxyGroups=_proxyGroups;
@property(retain, nonatomic) NSArray *proxies; // @synthesize proxies=_proxies;
@property(retain, nonatomic) KDMutableOrderedDictionary *generalSection; // @synthesize generalSection=_generalSection;
- (void).cxx_destruct;
- (BOOL)mergePatchFromPath:(id)arg1;
- (BOOL)checkPoliciesAndRulesWithError:(id *)arg1;
- (id)availablePolicyNames;
- (void)buildPolicyMap;
- (id)proxyGroupEnvironmentBaseInfo;
- (id)DNSServerAddresses;
- (id)stringRepresentation;
- (BOOL)saveModelToPath:(id)arg1 error:(id *)arg2;
- (id)warnings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
@property(nonatomic) BOOL useDefaultPolicyIfWiFiNotPrimary;
@property(nonatomic) BOOL enhancedModeByRule;
- (void)appendHostString:(id)arg1;
- (void)appendMITMString:(id)arg1;
- (void)setGeneralStringValue:(id)arg1 forKey:(id)arg2;
- (void)appendURLRewriteString:(id)arg1;
- (void)appendHeaderRewriteString:(id)arg1;
- (void)appendMapLocalSectionString:(id)arg1;
@property(retain, nonatomic) NSString *socksInterface;
@property(retain, nonatomic) NSString *interface;
@property(nonatomic) BOOL showErrorPageForReject;
@property(retain, nonatomic) NSString *externalControllerAccess;
@property(retain, nonatomic) NSString *DNSServer;
@property(retain, nonatomic) NSString *tunIncludedRoutes;
@property(retain, nonatomic) NSString *tunExcludedRoutes;
@property(retain, nonatomic) NSString *skipProxy;
@property(nonatomic) BOOL excludeSimpleHostnames;
@property(nonatomic) BOOL allowWiFiAccess;
@property(nonatomic) BOOL bypassSystem;
@property(nonatomic) BOOL hideCrashlyticsRequest;
@property(nonatomic) BOOL IPv6;
@property(nonatomic) int compatibilityMode;
@property(retain, nonatomic) NSString *loglevel;
@property(nonatomic) int socksPort;
@property(nonatomic) int port;
- (void)appendGeneralSection:(id)arg1;
- (BOOL)parseGeneralLine:(id)arg1;

@end

@interface SGSSIDSetting : NSObject
{
    BOOL _suspend;
    NSString *_SSID;
}

@property(nonatomic) BOOL suspend; // @synthesize suspend=_suspend;
@property(retain, nonatomic) NSString *SSID; // @synthesize SSID=_SSID;
- (void).cxx_destruct;

@end

@interface SGManagedConfigParameters : NSObject <NSCopying>
{
    BOOL _strict;
    NSString *_url;
    double _interval;
}

@property(nonatomic) BOOL strict; // @synthesize strict=_strict;
@property(nonatomic) double interval; // @synthesize interval=_interval;
@property(retain, nonatomic) NSString *url; // @synthesize url=_url;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface KDKeychain : NSObject
{
}

+ (BOOL)deleteKeychainItemWithIdentifier:(id)arg1;
+ (id)keychainItemDataWithIdentifier:(id)arg1;
+ (id)keychainItemPersistentRefWithIdentifier:(id)arg1;
+ (BOOL)writeKeychainWithIdentifier:(id)arg1 data:(id)arg2;
+ (id)baseQueryWithIdentifier:(id)arg1;
+ (void)setKeychainAdditionalQuery:(id)arg1;
+ (void)setKeychainAccessGroup:(id)arg1;
+ (void)setKeychainIdentifier:(id)arg1;
+ (void)initialize;

@end

@interface SGTunnelConnection : SGBaseObject <SGConnectorDelegate, SGSocketProtocolDelegate>
{
    SGConnectionManager *_manager;
    SGLogRequestRecord *_record;
    BOOL _inReading;
    BOOL _outReading;
    NSMutableArray *_dataWaitingSent;
    SGConnector *_connector;
    SGHTTPRequestCONNECTHeader *_requestHeader;
    NSString *_host;
    NSString *_hostname;
    unsigned short _port;
    SGRule *_matchedRule;
    id <SGSocketProtocol> _socket;
    double _lastActivityTimestamp;
}

@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly) SGLogRequestRecord *record; // @synthesize record=_record;
@property(readonly) id <SGSocketProtocol> socket; // @synthesize socket=_socket;
@property(readonly) NSString *host; // @synthesize host=_host;
- (void).cxx_destruct;
- (void)connectorDidCloseReadStream:(id)arg1;
- (void)connectorWillRetrySetup:(id)arg1 error:(id)arg2 time:(int)arg3 DNSRecord:(id)arg4;
- (void)dealloc;
- (id)remoteIPAddress;
- (id)localIPAddress;
@property(readonly, copy) NSString *description;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)continueReadConnectorData;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)writeServiceUnavailableResponseWithTitle:(id)arg1 error:(id)arg2;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)disconnectWithReason:(id)arg1;
- (void)readFromSocket;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectToHost;
- (id)initWithSocket:(id)arg1 CONNECTHeader:(id)arg2 manager:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface KDDefaults : NSObject
{
    NSString *_path;
    NSMutableDictionary *_data;
    NSLock *_lock;
}

- (void).cxx_destruct;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithDefaultPath;

@end

@interface SGLocalDNSMappingItem : NSObject
{
    NSString *_domain;
    NSString *_data;
    NSString *_server;
    NSString *_source;
    NSString *_comment;
}

@property(retain, nonatomic) NSString *comment; // @synthesize comment=_comment;
@property(retain, nonatomic) NSString *source; // @synthesize source=_source;
@property(retain, nonatomic) NSString *server; // @synthesize server=_server;
@property(retain, nonatomic) NSString *data; // @synthesize data=_data;
@property(retain, nonatomic) NSString *domain; // @synthesize domain=_domain;
- (void).cxx_destruct;

@end

@interface SGUDPForwarderContext : SGBaseObjectWithDispatchQueue
{
    SGFileDescriptor *_fd;
    NSObject<OS_dispatch_source> *_receiveSource;
    NSMutableArray *_dataQueue;
    unsigned short _sourcePort;
    unsigned short _destPort;
    unsigned int _sourceAddress;
    unsigned int _destAddress;
    unsigned int _realDestAddress;
    double _lastActivityTimestamp;
}

@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly, nonatomic) unsigned int realDestAddress; // @synthesize realDestAddress=_realDestAddress;
@property(readonly, nonatomic) unsigned short destPort; // @synthesize destPort=_destPort;
@property(readonly, nonatomic) unsigned short sourcePort; // @synthesize sourcePort=_sourcePort;
@property(readonly, nonatomic) unsigned int destAddress; // @synthesize destAddress=_destAddress;
@property(readonly, nonatomic) unsigned int sourceAddress; // @synthesize sourceAddress=_sourceAddress;
- (void).cxx_destruct;
- (void)doReceive;
- (void)close;
- (void)closeFD;
- (void)dealloc;
- (void)writeDatagram:(id)arg1;
- (void)processDataQueue;
- (void)closeAfterFiveSeconds;
- (BOOL)setupFD;
- (id)initWithSourceAddress:(unsigned int)arg1 destAddress:(unsigned int)arg2 sourcePort:(unsigned short)arg3 destPort:(unsigned short)arg4 dispatchQueue:(id)arg5;

@end

@interface SGUDPForwarder : SGBaseObjectWithDispatchQueue
{
    NSMutableDictionary *_contextMap;
    NSObject<OS_dispatch_source> *_timeoutTimer;
}

- (void).cxx_destruct;
- (void)removeAllContext;
- (void)resumeTimer;
- (void)pauseTimer;
- (void)timeoutTimer;
- (void)removeContext:(id)arg1;
- (void)incomingData:(id)arg1;
- (id)init;

@end

@interface SGLogRequestModel : NSObject
{
    BOOL _completed;
    BOOL _failed;
    BOOL _replica;
    int _sourcePort;
    int _pid;
    unsigned long long _id;
    NSDate *_startDate;
    unsigned long long _inBytes;
    unsigned long long _outBytes;
    NSString *_URL;
    NSString *_method;
    NSString *_requestHeader;
    NSString *_responseHeader;
    NSString *_policyName;
    NSString *_rule;
    NSString *_status;
    NSArray *_statusHistory;
    NSString *_localAddress;
    NSString *_remoteAddress;
    NSArray *_notes;
    NSString *_sourceAddress;
    NSString *_processPath;
    unsigned long long _inMaxSpeed;
    unsigned long long _inCurrentSpeed;
    unsigned long long _outMaxSpeed;
    unsigned long long _outCurrentSpeed;
}

+ (id)contentTypeInHeader:(id)arg1;
+ (BOOL)isGzippedInHeader:(id)arg1;
@property unsigned long long outCurrentSpeed; // @synthesize outCurrentSpeed=_outCurrentSpeed;
@property unsigned long long outMaxSpeed; // @synthesize outMaxSpeed=_outMaxSpeed;
@property unsigned long long inCurrentSpeed; // @synthesize inCurrentSpeed=_inCurrentSpeed;
@property unsigned long long inMaxSpeed; // @synthesize inMaxSpeed=_inMaxSpeed;
@property(retain) NSString *processPath; // @synthesize processPath=_processPath;
@property int pid; // @synthesize pid=_pid;
@property int sourcePort; // @synthesize sourcePort=_sourcePort;
@property(retain) NSString *sourceAddress; // @synthesize sourceAddress=_sourceAddress;
@property(retain) NSArray *notes; // @synthesize notes=_notes;
@property(retain) NSString *remoteAddress; // @synthesize remoteAddress=_remoteAddress;
@property(retain) NSString *localAddress; // @synthesize localAddress=_localAddress;
@property(retain) NSArray *statusHistory; // @synthesize statusHistory=_statusHistory;
@property(retain) NSString *status; // @synthesize status=_status;
@property BOOL replica; // @synthesize replica=_replica;
@property BOOL failed; // @synthesize failed=_failed;
@property BOOL completed; // @synthesize completed=_completed;
@property(retain) NSString *rule; // @synthesize rule=_rule;
@property(retain) NSString *policyName; // @synthesize policyName=_policyName;
@property(retain) NSString *responseHeader; // @synthesize responseHeader=_responseHeader;
@property(retain) NSString *requestHeader; // @synthesize requestHeader=_requestHeader;
@property(retain) NSString *method; // @synthesize method=_method;
@property(retain) NSString *URL; // @synthesize URL=_URL;
@property unsigned long long outBytes; // @synthesize outBytes=_outBytes;
@property unsigned long long inBytes; // @synthesize inBytes=_inBytes;
@property(retain) NSDate *startDate; // @synthesize startDate=_startDate;
@property unsigned long long id; // @synthesize id=_id;
- (void).cxx_destruct;
- (BOOL)modelCustomTransformToDictionary:(id)arg1;
- (BOOL)modelCustomTransformFromDictionary:(id)arg1;
- (int)httpStatusCode;
- (BOOL)isPlainHTTPRequest;
- (id)copyAsCURLWithBodyData:(id)arg1;
- (BOOL)hasResponseBody;
- (BOOL)hasRequestBody;
- (BOOL)isResponseBodyGzipped;
- (BOOL)isRequestBodyGzipped;
- (id)responseBodyPath;
- (id)requestBodyPath;
- (id)persistentStorePath;
- (void)setPersistentStorePath:(id)arg1;
- (BOOL)responseBodyAvailable;
- (BOOL)requestBodyAvailable;
- (id)client;
- (id)host;
- (id)userAgent;

@end

@interface SGTUNTCPConnection : SGBaseObjectWithDispatchQueue <SGConnectorDelegate, SGSocketProtocolDelegate>
{
    SGLwipSocket *_socket;
    SGTCPConnectionManager *_manager;
    double _lastActivityTimestamp;
    SGConnector *_connector;
    BOOL _connectorReading;
    BOOL _socketReading;
    unsigned short _port;
    NSString *_realHostname;
    SGLogRequestRecord *_record;
}

@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly, nonatomic) SGLogRequestRecord *record; // @synthesize record=_record;
@property(readonly, nonatomic) unsigned short port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *realHostname; // @synthesize realHostname=_realHostname;
- (void).cxx_destruct;
- (void)connectorDidCloseReadStream:(id)arg1;
- (void)continueReadSocket;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)connectorContinueReadData;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)closeWithReason:(id)arg1;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)ruleTestDidFinish:(id)arg1 rule:(id)arg2 error:(id)arg3;
- (id)initWithSocket:(id)arg1 realHostname:(id)arg2 port:(unsigned short)arg3 manager:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGDNSPacket : SGBaseObject
{
    unsigned short _identifier;
    unsigned short _recordType;
    NSData *_rawData;
    NSString *_queryDomain;
    id _answer;
}

+ (id)getDomainStringWithPtr:(const void *)arg1 datagram:(id)arg2 endPtr:(const void **)arg3;
+ (id)answerPacketWithData:(id)arg1;
+ (id)queryPacketWithDomain:(id)arg1 identifier:(unsigned short)arg2 queryType:(unsigned short)arg3;
@property(readonly, nonatomic) id answer; // @synthesize answer=_answer;
@property(nonatomic) unsigned short recordType; // @synthesize recordType=_recordType;
@property(retain, nonatomic) NSString *queryDomain; // @synthesize queryDomain=_queryDomain;
@property(readonly, nonatomic) NSData *rawData; // @synthesize rawData=_rawData;
@property(nonatomic) unsigned short identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)initWithPacketData:(id)arg1;

@end

@interface SGSOCKSConnection : SGBaseObject <SGSocketProtocolDelegate, SGConnectorDelegate>
{
    SGConnectionManager *_manager;
    SGLogRequestRecord *_record;
    BOOL _inReading;
    BOOL _outReading;
    NSMutableArray *_dataWaitingSent;
    SGConnector *_connector;
    long long _receivedResponseDataLength;
    SGHTTPRequestHeader *_requestHeader;
    NSString *_hostname;
    unsigned short _port;
    SGRule *_matchedRule;
    NSData *_targetData;
    id <SGSocketProtocol> _socket;
    double _lastActivityTimestamp;
}

@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly) SGLogRequestRecord *record; // @synthesize record=_record;
@property(readonly) id <SGSocketProtocol> socket; // @synthesize socket=_socket;
- (void).cxx_destruct;
- (void)connectorDidCloseReadStream:(id)arg1;
- (void)dealloc;
@property(readonly, copy) NSString *description;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)continueReadConnectorData;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)disconnectWithReason:(id)arg1;
- (void)readFromSocket;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectToHost;
- (id)initWithSocket:(id)arg1 manager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ConfigEditProxyViewController : ConfigBaseViewController
{
    NSTableView *_proxyTabelView;
    NSButton *_proxyEditSkipVerifyButton;
    NSButton *_proxyDeleteButton;
    NSPopUpButton *_proxyEditTypeButton;
    NSTextField *_proxyEditNameField;
    NSTextField *_proxyEditHostnameField;
    NSTextField *_proxyEditPasswordField;
    NSTextField *_proxyEditPortField;
    NSTextField *_proxyEditUsernameField;
    NSView *_borderView;
    NSView *_proxyEditView;
    NSMutableArray *_proxies;
    NSString *_moduleURL;
}

- (void).cxx_destruct;
- (void)deleteProxyButtonPressed:(id)arg1;
- (void)editProxyTypeChanged:(id)arg1;
- (void)createNewProxyWithPrevious:(id)arg1;
- (void)proxyDoubleClicked;
- (void)addProxyButtonPressed:(id)arg1;
- (BOOL)validateNewProxy;
- (void)configureActionButtonState;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)viewDidLoad;

@end

@interface SGSettingsModelMITMContext : NSObject
{
    struct x509_st *_cacertX509;
    struct evp_pkey_st *_cakey;
    NSMutableDictionary *_certCache;
    struct OpaqueSecKeychainRef *_sharedKeychain;
    BOOL _enabled;
    BOOL _skipCertVerify;
    NSString *_CACert;
    NSString *_passphrase;
    NSArray *_enabledHosts;
}

@property(retain, nonatomic) NSArray *enabledHosts; // @synthesize enabledHosts=_enabledHosts;
@property(nonatomic) BOOL skipCertVerify; // @synthesize skipCertVerify=_skipCertVerify;
@property(nonatomic) BOOL enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) NSString *passphrase; // @synthesize passphrase=_passphrase;
@property(retain, nonatomic) NSString *CACert; // @synthesize CACert=_CACert;
- (void).cxx_destruct;
- (BOOL)shouldPerformMITMForHost:(id)arg1;
- (void)dealloc;
- (void)_disposalCACert;
- (BOOL)prepareWithError:(id *)arg1;
- (id)copy;
- (id)generateCertForHostname:(id)arg1 originalCerts:(id)arg2;
- (void)createSharedKeychain;
- (id)resignCerts:(id)arg1;

@end

@interface SGMEnterprise : NSObject <NSURLSessionDelegate>
{
    NSURLSession *_URLSession;
    NSTimer *_checkTimer;
    SGMEnterpriseSettings *_settings;
}

+ (id)sharedInstance;
+ (void)prepareSharedInstance;
@property(readonly) SGMEnterpriseSettings *settings; // @synthesize settings=_settings;
- (void).cxx_destruct;
- (void)writeLicense:(id)arg1;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)registerWithCompanyID:(id)arg1 userID:(id)arg2 passcode:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)unregisterWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)refreshLicenseInfoWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)requestBasePayload;
- (id)buildSettingFromInfo:(id)arg1;
- (void)updateEnterpriseProfileWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)urlSessionForProfile;
- (void)checkIfProfileNeedUpdate;
- (void)checkUpdates;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGMEnterpriseSettings : NSObject
{
    NSString *_profileURL;
    double _profileUpdateInterval;
    NSString *_companyID;
    NSString *_companyName;
    NSString *_userID;
}

@property(retain, nonatomic) NSString *userID; // @synthesize userID=_userID;
@property(retain, nonatomic) NSString *companyName; // @synthesize companyName=_companyName;
@property(retain, nonatomic) NSString *companyID; // @synthesize companyID=_companyID;
@property(nonatomic) double profileUpdateInterval; // @synthesize profileUpdateInterval=_profileUpdateInterval;
@property(retain, nonatomic) NSString *profileURL; // @synthesize profileURL=_profileURL;
- (void).cxx_destruct;

@end

@interface SGMain : SGBaseObjectWithDispatchQueue
{
    SGConnectionManager *_connectionManager;
    SGTCPConnectionManager *_tcpConnectionManager;
    SGIPLayerDNSForwarder *_ipLayerDNSForwarder;
    SGTUNFakeDNSContext *_fakeDNSContext;
    SGUDPForwarder *_udpForwarder;
    SGTUNInterface *_tunInterface;
}

+ (id)sharedInstance;
@property(retain) SGTUNInterface *tunInterface; // @synthesize tunInterface=_tunInterface;
@property(readonly) SGUDPForwarder *udpForwarder; // @synthesize udpForwarder=_udpForwarder;
@property(readonly) SGTUNFakeDNSContext *fakeDNSContext; // @synthesize fakeDNSContext=_fakeDNSContext;
@property(readonly) SGIPLayerDNSForwarder *ipLayerDNSForwarder; // @synthesize ipLayerDNSForwarder=_ipLayerDNSForwarder;
@property(readonly) SGTCPConnectionManager *tcpConnectionManager; // @synthesize tcpConnectionManager=_tcpConnectionManager;
@property(readonly) SGConnectionManager *connectionManager; // @synthesize connectionManager=_connectionManager;
- (void).cxx_destruct;
@property(readonly) SGSettingsModel *settingsModel;
- (void)shutdown;
- (id)init;

@end

@interface SGRule : NSObject
{
    NSString *_value;
    NSString *_policyName;
    NSString *_comment;
    long long _useCounter;
}

+ (id)ruleWithString:(id)arg1;
+ (id)typeString;
@property long long useCounter; // @synthesize useCounter=_useCounter;
@property(retain, nonatomic) NSString *comment; // @synthesize comment=_comment;
@property(retain, nonatomic) NSString *policyName; // @synthesize policyName=_policyName;
@property(retain, nonatomic) NSString *value; // @synthesize value=_value;
- (void).cxx_destruct;
- (id)conditionDescription;
- (id)description;
- (id)parameters;
- (id)typeString;
- (id)initWithValue:(id)arg1 policyName:(id)arg2;

@end

@interface SGRuleIPBase : SGRule
{
    BOOL _noResolve;
}

@property(nonatomic) BOOL noResolve; // @synthesize noResolve=_noResolve;
- (id)parameters;

@end

@interface SGRuleDomainBase : SGRule
{
    BOOL _forceRemoteDNS;
    BOOL _enhancedMode;
}

@property(nonatomic) BOOL enhancedMode; // @synthesize enhancedMode=_enhancedMode;
@property(nonatomic) BOOL forceRemoteDNS; // @synthesize forceRemoteDNS=_forceRemoteDNS;
- (id)parameters;

@end

@interface SGRuleDomain : SGRuleDomainBase
{
}

+ (id)typeString;

@end

@interface SGRuleDomainSuffix : SGRuleDomainBase
{
}

+ (id)typeString;

@end

@interface SGRuleDomainKeyword : SGRuleDomainBase
{
}

+ (id)typeString;

@end

@interface SGRuleGeoIP : SGRuleIPBase
{
}

+ (id)typeString;

@end

@interface SGRuleFinal : SGRule
{
    BOOL _forceRemoteDNS;
    BOOL _enhancedMode;
}

+ (id)typeString;
@property(nonatomic) BOOL enhancedMode; // @synthesize enhancedMode=_enhancedMode;
@property(nonatomic) BOOL forceRemoteDNS; // @synthesize forceRemoteDNS=_forceRemoteDNS;
- (id)parameters;
- (id)conditionDescription;
- (id)description;

@end

@interface SGRuleIP : SGRuleIPBase
{
    unsigned int _IPAddressUsingHostByteOrder;
    unsigned int _maskAddressUsingHostByteOrder;
}

+ (id)typeString;
@property(readonly) unsigned int maskAddressUsingHostByteOrder; // @synthesize maskAddressUsingHostByteOrder=_maskAddressUsingHostByteOrder;
@property(readonly) unsigned int IPAddressUsingHostByteOrder; // @synthesize IPAddressUsingHostByteOrder=_IPAddressUsingHostByteOrder;
- (BOOL)isIPAddressUsingHostByteOrderInRange:(unsigned int)arg1;
- (BOOL)isIPAddressInRange:(id)arg1;
- (void)setValue:(id)arg1;
- (id)initWithValue:(id)arg1 policyName:(id)arg2;

@end

@interface SGRuleIPCIDRv6 : SGRuleIPBase
{
}

+ (id)typeString;

@end

@interface SGRuleProcessName : SGRule
{
}

+ (id)typeString;

@end

@interface SGRuleUserAgent : SGRule
{
}

+ (id)typeString;

@end

@interface SGRuleURLRegex : SGRule
{
}

+ (id)typeString;

@end

@interface SGComment : NSObject
{
    NSString *_text;
}

+ (BOOL)isTextHasCommentPrefix:(id)arg1;
@property(retain, nonatomic) NSString *text; // @synthesize text=_text;
- (void).cxx_destruct;
- (void)addCommentPrefixIfNecessary;
- (id)description;

@end

@interface SGIPLayerDNSForwarder : SGDNSClientBase
{
    unsigned short _queryIDCounter;
    NSMutableDictionary *_sentQueriesMap;
    SGOutgoingSelector *_outgoingSelector;
    NSObject<OS_dispatch_source> *_timer;
    NSArray *_exceptionList;
}

@property(retain, nonatomic) NSArray *exceptionList; // @synthesize exceptionList=_exceptionList;
- (void).cxx_destruct;
- (void)resumeTimer;
- (void)pauseTimer;
- (id)DNSResponseDataWithDomain:(id)arg1 addresses:(id)arg2 identifier:(unsigned short)arg3;
- (id)DNSResponseDataWithResult:(unsigned int)arg1 context:(id)arg2;
- (void)responseDNSAnswer:(id)arg1 context:(id)arg2;
- (id)emptyAnswer:(id)arg1;
- (void)UDPSocket:(id)arg1 didReceiveData:(id)arg2 fromAddress:(id)arg3 port:(unsigned short)arg4;
- (void)sendQueryToUpstreamServer:(id)arg1;
- (void)incomingDNSContext:(id)arg1;
- (void)incomingDNSQuery:(id)arg1;
- (void)timer;
- (void)setRules:(id)arg1;
- (id)init;

@end

@interface SGIPLayerDNSForwarderContext : SGDNSClientBaseContext
{
    unsigned short _clientPort;
    unsigned short _outgoingQueryIdentifier;
    unsigned int _clientAddress;
    SGDNSPacket *_dnsPacket;
}

@property(nonatomic) unsigned short outgoingQueryIdentifier; // @synthesize outgoingQueryIdentifier=_outgoingQueryIdentifier;
@property(nonatomic) unsigned short clientPort; // @synthesize clientPort=_clientPort;
@property(nonatomic) unsigned int clientAddress; // @synthesize clientAddress=_clientAddress;
@property(retain, nonatomic) SGDNSPacket *dnsPacket; // @synthesize dnsPacket=_dnsPacket;
- (void).cxx_destruct;

@end

@interface EnhancedModeWindowController : NSWindowController
{
}

- (void)enable:(id)arg1;
- (void)windowDidLoad;

@end

@interface SGMAppDelegate : SGBaseObjectWithDispatchQueue <SGControllerActionProvider, SpeedViewDelegate, SUUpdaterDelegate, SGConnectionManagerDelegate, NSUserNotificationCenterDelegate, NSApplicationDelegate>
{
    NSMenuItem *_setAsSystemProxyMenuItem;
    NSMenuItem *_switchConfigMenuItem;
    NSMenuItem *_enableBodyDumpMenuItem;
    NSMenuItem *_networkStatusMenuItem;
    NSMenuItem *_enhancedModeMenuItem;
    NSMutableDictionary *_previousProxySettingsMap;
    ConfigWindowController *_configWindowController;
    NSStatusItem *_statusItem;
    StatusItemView *_speedView;
    NSMutableDictionary *_environment;
    NSMutableDictionary *_proxyGroupMenuItemMap;
    SGController *_controller;
    NSDate *_startDate;
    NSMenu *_statusBarMenu;
    NSMenu *_debugMenu;
    EnhancedModeWindowController *_enhancedModeWindowController;
    SGMBenchmarkWindowController *_benchmarkWindowController;
    NSArray *_prototypeMainMenuItems;
    unsigned short _internalControllerPort;
    NSTimer *_checkUpdateTimer;
    NSObject<OS_dispatch_source> *_etcHostsFileSource;
    NSObject<OS_dispatch_source> *_etcHostsFileReloadTimer;
    BOOL _setupCompleted;
    BOOL _systemSleep;
    BOOL _shouldAlertEnterpriseProfileReload;
    SGMProfile *_activeProfile;
    NSString *_logDirectory;
}

+ (id)sharedDelegate;
@property(nonatomic) BOOL shouldAlertEnterpriseProfileReload; // @synthesize shouldAlertEnterpriseProfileReload=_shouldAlertEnterpriseProfileReload;
@property(nonatomic) BOOL systemSleep; // @synthesize systemSleep=_systemSleep;
@property(readonly, nonatomic) BOOL setupCompleted; // @synthesize setupCompleted=_setupCompleted;
@property(retain, nonatomic) NSString *logDirectory; // @synthesize logDirectory=_logDirectory;
@property(readonly) SGMProfile *activeProfile; // @synthesize activeProfile=_activeProfile;
- (void).cxx_destruct;
- (void)dashboardNotification:(id)arg1;
- (void)userNotificationCenter:(id)arg1 didActivateNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
- (BOOL)userNotificationCenter:(id)arg1 shouldPresentNotification:(id)arg2;
- (void)syncDispatch:(CDUnknownBlockType)arg1;
- (BOOL)application:(id)arg1 openFile:(id)arg2;
- (void)reloadConfig;
- (void)receiveWakeNote:(id)arg1;
- (void)receiveSleepNote:(id)arg1;
@property(readonly) SGConnectionManager *connectionManager;
- (void)connectionManager:(id)arg1 didAcceptConnectionFromNewClient:(id)arg2;
- (void)deleteObsoleteLog;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (void)updater:(id)arg1 willInstallUpdate:(id)arg2;
- (id)etcHostsItems;
- (void)updateSSID;
- (id)feedURLStringForUpdater:(id)arg1;
- (void)configIPv6State;
- (void)primaryIPv6ServiceChanged;
- (void)applyLocalDNSMappingFromSettingsModel;
- (void)applyRuleFromSettingsModel;
- (void)updateStatusItemEnableState;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)showNotificationMessageWithTitle:(id)arg1 subtitle:(id)arg2 informativeText:(id)arg3;
- (void)applicationWillTerminate:(id)arg1;
- (id)DNSServerAddressesWithModel:(id)arg1;
- (void)systemDNSUpdate;
- (void)saveAndApplyEnvironment;
- (BOOL)loadConfig;
- (void)stopSurgeCore;
- (BOOL)startSurgeCore;
- (void)setupEtcHostsChangeDetection;
- (void)setup;
- (void)reloadMenubarItem;
- (void)applicationDidFinishLaunching:(id)arg1;
- (BOOL)setEnhancedModeToEnableStateWithWindow:(id)arg1;
- (BOOL)canStartEnhancedMode;
- (void)enhancedMode:(id)arg1;
- (void)stopEnhancedMode;
- (void)enableEnhancedModeIfNecessary;
- (void)setAsSystemProxy:(id)arg1;
- (void)primaryServiceChanged;
- (id)proxyConfig;
- (void)cleanSystemProxySettingsIfNecessary:(CDUnknownBlockType)arg1;
- (unsigned long long)applicationShouldTerminate:(id)arg1;
- (BOOL)isProxyConfigGeneratedBySurge:(id)arg1;
- (void)setAsSystemDefaultProxyIfNecessary;
- (id)uptimeDate;
- (void)controllerDidChangeSettingModelRulesAndPolicyMap:(id)arg1;
- (void)controllerDidChangeSettingModelHosts:(id)arg1;
- (BOOL)controllerReceivedCommandKill:(id)arg1 requestRecordID:(unsigned long long)arg2;
- (void)controllerReceivedCommandStop:(id)arg1;
- (void)controllerReceivedCommandReload:(id)arg1;
- (void)controllerReceivedCommandSetEnvironment:(id)arg1 value:(id)arg2;
- (id)controllerReceivedCommandCurrentEnvironment:(id)arg1;
- (BOOL)controllerReceivedCommandSwitchProfile:(id)arg1 profileName:(id)arg2;
- (void)proxyGroupItemClicked:(id)arg1;
- (void)updateAutoTestGroupMenuItem;
- (void)benchmarkGroup:(id)arg1;
- (void)retestGroup:(id)arg1;
- (void)setupMenuPolicyGroup;
- (void)checkEnterpriseUpdatesManually;
- (void)checkConfigUpdatesManually;
- (void)changeLogLevel:(id)arg1;
- (void)toggleReplica:(id)arg1;
- (void)revealInFolder;
- (void)switchConfig:(id)arg1;
- (void)menuWillOpen:(id)arg1;
- (void)rebulidMainMenuItems;
- (void)showBenchmarkViewWithPolicies:(id)arg1;
- (void)showProxyBenchmark:(id)arg1;
- (void)showDashboard:(id)arg1;
- (void)copyShellExportCommand:(id)arg1;
- (void)showPreferences:(id)arg1;
- (void)reloadConfig:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface KDAView : NSView
{
    NSColor *_backgroundColor;
}

@property(retain, nonatomic) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
- (void).cxx_destruct;
- (BOOL)wantsDefaultClipping;
- (BOOL)isOpaque;
- (void)updateLayer;

@end

@interface SGLwipSocket : SGBaseObjectWithDispatchQueue <SGSocketProtocol>
{
    struct tcp_pcb *_tcp;
    NSMutableArray *_pendingData;
    NSMutableArray *_writingDataQueue;
    BOOL _reading;
    long long _readingTag;
    STProxyConnectionWritePacket *_writingPacket;
    unsigned long long _writingDataOffset;
    BOOL _disconnectAfterWriting;
    BOOL _shutdownAfterWriting;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    NSString *_connectedHost;
    unsigned short _connectedPort;
    BOOL _closed;
    BOOL _isDeallocating;
    int _PID;
    id <SGSocketProtocolDelegate> _delegate;
    NSString *_processPath;
}

+ (long long)purgeWritingHoldRefSockets;
+ (void)load;
@property int PID; // @synthesize PID=_PID;
@property(retain) NSString *processPath; // @synthesize processPath=_processPath;
@property __weak id <SGSocketProtocolDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) unsigned short connectedPort; // @synthesize connectedPort=_connectedPort;
@property(readonly) NSString *connectedHost; // @synthesize connectedHost=_connectedHost;
- (void).cxx_destruct;
@property(readonly) SGFileDescriptor *fileDescriptor;
@property(readonly) SGDNSClientResult *dnsResult;
@property(readonly) SGDNSRecord *usingDNSRecord;
@property(readonly) unsigned short localPort;
@property(readonly) NSString *localHost;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id *)arg5;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)setTLSParameters:(id)arg1;
- (id)TLSParameters;
@property(readonly) NSString *interfaceName;
@property(readonly) BOOL isConnected;
@property(readonly) BOOL isDisconnected;
- (void)disconnectAfterWritingHoldRef;
- (void)disconnect;
- (void)processWritingQueue;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)notifyDelegate:(CDUnknownBlockType)arg1;
- (void)processReadData;
- (void)readDataWithTimeout:(double)arg1 maxLength:(unsigned long long)arg2 tag:(long long)arg3;
- (BOOL)TCPDidSentDataWithLength:(unsigned short)arg1;
- (void)processUnsentData;
- (BOOL)sendDataToClient:(const void *)arg1 len:(unsigned short)arg2;
- (void)shutdownSendSide;
- (void)abandon;
- (void)closeWithReason:(id)arg1;
- (void)TCPError:(BOOL)arg1;
- (void)TCPDidReceiveData:(id)arg1;
- (void)TCPClientClose;
- (void)dealloc;
- (id)initWithTCP:(struct tcp_pcb *)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface STProxyConnectionWritePacket : SGBaseObject
{
    NSData *_data;
    long long _tag;
}

@property(nonatomic) long long tag; // @synthesize tag=_tag;
- (void).cxx_destruct;
@property(readonly) const void *bytes;
@property(readonly) unsigned long long length;
- (id)initWithData:(id)arg1;

@end

@interface _YYModelPropertyMeta : NSObject
{
    NSString *_name;
    unsigned long long _type;
    unsigned long long _nsType;
    BOOL _isCNumber;
    Class _cls;
    Class _genericCls;
    SEL _getter;
    SEL _setter;
    BOOL _isKVCCompatible;
    BOOL _isStructAvailableForKeyedArchiver;
    BOOL _hasCustomClassFromDictionary;
    NSString *_mappedToKey;
    NSArray *_mappedToKeyPath;
    NSArray *_mappedToKeyArray;
    YYClassPropertyInfo *_info;
    _YYModelPropertyMeta *_next;
}

+ (id)metaWithClassInfo:(id)arg1 propertyInfo:(id)arg2 generic:(Class)arg3;
- (void).cxx_destruct;

@end

@interface _YYModelMeta : NSObject
{
    YYClassInfo *_classInfo;
    NSDictionary *_mapper;
    NSArray *_allPropertyMetas;
    NSArray *_keyPathPropertyMetas;
    NSArray *_multiKeysPropertyMetas;
    unsigned long long _keyMappedCount;
    unsigned long long _nsType;
    BOOL _hasCustomWillTransformFromDictionary;
    BOOL _hasCustomTransformFromDictionary;
    BOOL _hasCustomTransformToDictionary;
    BOOL _hasCustomClassFromDictionary;
}

+ (id)metaWithClass:(Class)arg1;
- (void).cxx_destruct;
- (id)initWithClass:(Class)arg1;

@end

@interface ConfigDNSViewController : ConfigBaseViewController
{
    NSTextField *_generalDNSOverrideField;
    NSTableView *_tableView;
    NSView *_addNewView;
    NSTextField *_addNewDomainTextField;
    NSTextField *_addNewDataTextField;
    NSTextField *_addNewServerField;
    NSTextField *_addNewCommentField;
    NSButton *_specificDNSServerButton;
    NSButton *_deleteButton;
    NSView *_borderView;
    NSMutableArray *_data;
}

- (void).cxx_destruct;
- (void)deleteButtonPressed:(id)arg1;
- (void)configureActionButtonState;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (void)sortData;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (void)specificDNSServerButtonChanged:(id)arg1;
- (void)addButtonPressed:(id)arg1;
- (void)save;
- (BOOL)validate;
- (void)reload;
- (void)viewDidLoad;

@end

@interface KDAAlertView : NSWindow
{
    NSTextField *_titleLabel;
    NSView *_accessoryView;
    NSButton *_okButton;
    NSButton *_cancelButton;
    CDUnknownBlockType _validateBlock;
}

+ (void)requestInputTextInWindow:(id)arg1 title:(id)arg2 placeholder:(id)arg3 initText:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
@property(copy, nonatomic) CDUnknownBlockType validateBlock; // @synthesize validateBlock=_validateBlock;
@property(readonly, nonatomic) NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(readonly, nonatomic) NSButton *okButton; // @synthesize okButton=_okButton;
@property(retain, nonatomic) NSView *accessoryView; // @synthesize accessoryView=_accessoryView;
- (void).cxx_destruct;
- (void)cancelButtonPressed;
- (void)okButtonPressed;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2 animate:(BOOL)arg3;
- (void)layout;
- (id)initWithTitle:(id)arg1 accessoryView:(id)arg2;

@end

@interface SSEncryptAEADConfig : NSObject
{
    int _method;
    struct {
        int _field1;
        int _field2;
        unsigned int _field3;
        char *_field4;
        unsigned int _field5;
        int _field6;
        unsigned int _field7;
        struct mbedtls_cipher_base_t *_field8;
    } *_info;
    unsigned long long _nonce_len;
    unsigned long long _key_len;
    unsigned long long _tag_len;
    unsigned char _key[64];
}

+ (id)availableMethods;
- (id)initWithMethod:(id)arg1 password:(id)arg2;

@end

@interface SSEncryptAEADContext : NSObject <SSEncryptContextProtocol>
{
    unsigned int _init;
    unsigned long long _counter;
    struct {
        struct *_field1;
        int _field2;
        int _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        unsigned char _field6[16];
        unsigned long long _field7;
        unsigned char _field8[16];
        unsigned long long _field9;
        void *_field10;
    } *_evp;
    struct buffer *_chunk;
    unsigned char _salt[64];
    unsigned char _skey[64];
    unsigned char _nonce[32];
    BOOL _enc;
    SSEncryptAEADConfig *_config;
}

- (void).cxx_destruct;
- (long long)decryptWithData:(id)arg1 outData:(id *)arg2;
- (long long)encryptWithData:(id)arg1 outData:(id *)arg2;
- (int)decrypt:(struct buffer *)arg1 capacity:(unsigned long long)arg2;
- (int)chunkDecrypt:(char *)arg1 c:(char *)arg2 plen:(unsigned long long *)arg3 clen:(unsigned long long *)arg4;
- (int)encrypt:(struct buffer *)arg1 capacity:(unsigned long long)arg2;
- (int)chunkEncrypt:(char *)arg1 c:(char *)arg2 plen:(unsigned short)arg3;
- (void)dealloc;
- (void)prepareKey:(int)arg1;
- (id)initWithConfig:(id)arg1 forEncrypt:(BOOL)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGMHelperBridge : NSObject
{
    NSObject<OS_xpc_object> *_connection;
    id <SGMHelperBridgeDelegate> _delegate;
}

+ (id)sharedInstance;
@property __weak id <SGMHelperBridgeDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)sendMessage:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)installHelperAndRetrySetupHelperWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setupHelperWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)isHelperVersionMatchedWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)isHelperInstall;
- (BOOL)isBridgeValid;
- (void)setupXPCConnection;
- (void)execCommand:(id)arg1 withPrivileges:(struct AuthorizationOpaqueRef *)arg2;
- (void)execRemoveCommandWithPrivileges:(struct AuthorizationOpaqueRef *)arg1;
- (void)removeHelperWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)installHelperWithCompletionHandler:(CDUnknownBlockType)arg1;

@end

@interface SGURLRewriteRule : NSObject
{
    NSString *_replacement;
    NSString *_pattern;
    long long _type;
}

+ (id)ruleWithString:(id)arg1;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(retain, nonatomic) NSString *pattern; // @synthesize pattern=_pattern;
@property(retain, nonatomic) NSString *replacement; // @synthesize replacement=_replacement;
- (void).cxx_destruct;
- (id)stringRepresentation;
- (id)initWithPattern:(id)arg1 replacement:(id)arg2;

@end

@interface SGHeaderRewriteRule : NSObject
{
    NSString *_pattern;
    long long _type;
    NSString *_headerField;
    NSString *_value;
}

+ (id)ruleWithString:(id)arg1;
@property(retain, nonatomic) NSString *value; // @synthesize value=_value;
@property(retain, nonatomic) NSString *headerField; // @synthesize headerField=_headerField;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(retain, nonatomic) NSString *pattern; // @synthesize pattern=_pattern;
- (void).cxx_destruct;
- (id)stringRepresentation;

@end

@interface SSConnectorWithOTA : SGProxyConnector
{
    struct SEContext *_recv_decryption_ctx;
    struct SEContext *_send_encryption_ctx;
    unsigned int _sendChunkCounter;
    BOOL _firstPacketRead;
    NSString *_SSPassword;
    NSString *_SSEncryptType;
}

@property(retain, nonatomic) NSString *SSEncryptType; // @synthesize SSEncryptType=_SSEncryptType;
@property(retain, nonatomic) NSString *SSPassword; // @synthesize SSPassword=_SSPassword;
- (void).cxx_destruct;
- (void)dealloc;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (id)targetHandshakeData;
- (void)start;

@end

@interface SGMProfileManager : NSObject
{
    NSTimer *_updateChecksTimer;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (id)enterpriseProfileUpdatedDate;
- (void)removeEnterpriseProfile;
- (void)installEnterpriseProfileWithString:(id)arg1;
- (id)enterpriseProfileContent;
- (BOOL)enterpriseProfileInstalled;
- (void)installConfigFromPath:(id)arg1;
- (void)openConfigFile:(id)arg1;
- (void)checkManagedConfigUpdatesForce:(BOOL)arg1;
- (void)checkManagedConfigUpdatesForce:(BOOL)arg1 configPath:(id)arg2;
- (void)checkManagedConfigUpdates;
- (void)selectConfigurationWithName:(id)arg1;
- (id)selectedConfigurationName;
- (id)currentProfile;
- (id)availableConfigNames;
- (void)makeDefaultProfileAndSelect;
- (void)makeDirectory;
- (id)configurationDirectoryPath;
- (id)init;

@end

@interface SGMProfile : NSObject
{
    BOOL _enterprise;
    SGSettingsModel *_model;
    NSError *_modelParseError;
    NSString *_path;
    NSString *_name;
}

@property(nonatomic) BOOL enterprise; // @synthesize enterprise=_enterprise;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSString *path; // @synthesize path=_path;
@property(retain, nonatomic) NSError *modelParseError; // @synthesize modelParseError=_modelParseError;
@property(retain, nonatomic) SGSettingsModel *model; // @synthesize model=_model;
- (void).cxx_destruct;

@end

@interface MappingViewController : ConfigBaseViewController <NSTableViewDataSource, NSTableViewDelegate>
{
    NSTableView *_remoteTableView;
    NSTableView *_localTableView;
    NSView *_borderView1;
    NSView *_borderView2;
    NSMutableArray *_remoteRules;
    NSMutableArray *_localRules;
    SGSettingsModel *_model;
}

- (void).cxx_destruct;
- (void)localDoubleClicked;
- (void)deleteLocal:(id)arg1;
- (void)addLocal:(id)arg1;
- (void)deleteSelectedRemoteRule:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)addRemoteButtonPressed:(id)arg1;
- (void)remoteDoubleClicked;
- (void)reload;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGConnector : SGBaseObjectWithDispatchQueue <SGSocketProtocolDelegate, SGSocketBasicProtocol>
{
    NSString *_targetHost;
    int _targetPort;
    id <SGSocketProtocol> _socket;
    SGPolicy *_selectorPolicy;
    BOOL _initialized;
    double _lastReadDataTimeout;
    unsigned long long _lastReadDataMaxSize;
    SGLogConnectorSessionRecord *_connectorSessionRecord;
    SGLogInterfaceSessionRecord *_interfaceSessionRecord;
    int _retry;
    BOOL _allowRetry;
    BOOL _doNotRecordError;
    id <SGConnectorDelegate> _delegate;
    NSString *_interface;
    NSData *_handshakeData;
}

+ (id)connectorWithSelectorPolicy:(id)arg1 targetHostname:(id)arg2 targetPort:(int)arg3 manager:(id)arg4;
@property(readonly) id <SGSocketProtocol> socket; // @synthesize socket=_socket;
@property(retain) NSData *handshakeData; // @synthesize handshakeData=_handshakeData;
@property(nonatomic) BOOL doNotRecordError; // @synthesize doNotRecordError=_doNotRecordError;
@property(nonatomic) BOOL allowRetry; // @synthesize allowRetry=_allowRetry;
@property(copy, nonatomic) NSString *interface; // @synthesize interface=_interface;
@property(nonatomic) int targetPort; // @synthesize targetPort=_targetPort;
@property(copy, nonatomic) NSString *targetHost; // @synthesize targetHost=_targetHost;
@property __weak id <SGConnectorDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
@property(readonly) int PID;
@property(readonly) NSString *processPath;
- (BOOL)shouldUseTCPFastOpen;
@property(readonly) SGFileDescriptor *fileDescriptor;
@property(readonly) SGDNSClientResult *dnsResult;
@property(readonly) SGDNSRecord *usingDNSRecord;
@property(readonly) BOOL isConnected;
@property(readonly) NSString *interfaceName;
@property(readonly) BOOL isDisconnected;
@property(readonly) unsigned short connectedPort;
@property(readonly) unsigned short localPort;
@property(readonly) NSString *connectedHost;
@property(readonly) NSString *localHost;
- (void)closeHalfClosedConnection;
- (void)socketDidCloseReadStream:(id)arg1;
- (void)setAutoDisconnectOnClosedReadStream:(BOOL)arg1;
- (void)createSocket;
- (void)disconnectWithError:(id)arg1;
- (void)disconnectAfterWritingHoldRef;
- (void)disconnect;
- (void)reportProxyPolicyError:(id)arg1 error:(id)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 maxLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)start;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
@property(readonly, nonatomic) SGPolicy *selectorPolicy;
- (id)initWithPolicy:(id)arg1 dispatchQueue:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGProxyConnector : SGConnector
{
    int _proxyPort;
    NSString *_proxyHost;
}

@property(nonatomic) int proxyPort; // @synthesize proxyPort=_proxyPort;
@property(copy, nonatomic) NSString *proxyHost; // @synthesize proxyHost=_proxyHost;
- (void).cxx_destruct;

@end

@interface SGDNSUDPSocket : SGBaseObjectWithDispatchQueue
{
    SGFileDescriptor *_fd;
    NSObject<OS_dispatch_source> *_receiveSource;
    BOOL _IPv6;
    id <SGDNSUDPSocketDelegate> _delegate;
    NSError *_lastError;
    id _userInfo;
}

@property __weak id userInfo; // @synthesize userInfo=_userInfo;
@property(readonly, nonatomic) NSError *lastError; // @synthesize lastError=_lastError;
@property(nonatomic) __weak id <SGDNSUDPSocketDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (BOOL)sendData:(id)arg1 toIPAddress:(id)arg2 port:(unsigned short)arg3;
- (void)doReceive;
- (void)dealloc;
- (void)closeSocket;
- (BOOL)setupFDWithError:(id *)arg1;
- (id)initWithDispatchQueue:(id)arg1 error:(id *)arg2 IPv6:(BOOL)arg3;

@end

@interface ConfigMiscViewController : ConfigBaseViewController
{
    NSTextField *_versionLabel;
    NSButton *_betaButton;
    NSButton *_autoUpdateButton;
    NSPopUpButton *_interfacePopUpButton;
    NSButton *_showAutoProxyChangedNotificationButton;
    NSButton *_showNewProxyClientNotificationButton;
    NSButton *_greyIconIfNotSetAsSystemProxyButton;
    NSButton *_menuBarShowRealTimeSpeedButton;
    NSButton *_collapsePolicyGroupItemsButton;
    NSButton *_showPrimaryInterfaceChangedNotificationButton;
    NSButton *_testConnectivityButton;
    NSButton *_showProxyErrorNotificationButton;
    NSButton *_startupButton;
    SGSettingsModel *_model;
    BOOL _previousLaunchState;
}

+ (struct OpaqueLSSharedFileListItemRef *)itemRefInLoginItems;
+ (void)setLaunchAtStartup:(BOOL)arg1;
+ (BOOL)isLaunchAtStartup;
- (void).cxx_destruct;
- (void)removeHelper:(id)arg1;
- (void)interfaceClick:(id)arg1;
- (void)save;
- (void)reload;
- (void)viewDidLoad;

@end

@interface _LRUCacheNode : SGBaseObject
{
    id _obj;
    NSString *_key;
    _LRUCacheNode *_next;
    _LRUCacheNode *_prev;
}

@property(nonatomic) _LRUCacheNode *prev; // @synthesize prev=_prev;
@property(nonatomic) _LRUCacheNode *next; // @synthesize next=_next;
@property(copy, nonatomic) NSString *key; // @synthesize key=_key;
@property(retain, nonatomic) id obj; // @synthesize obj=_obj;
- (void).cxx_destruct;

@end

@interface LRUCache : SGBaseObject
{
    _LRUCacheNode *_head;
    _LRUCacheNode *_tail;
    NSMutableDictionary *_map;
    NSLock *_lock;
    long long _maxSize;
}

@property long long maxSize; // @synthesize maxSize=_maxSize;
- (void).cxx_destruct;
- (id)allKeysInOrder;
- (id)allObjectsInOrder;
- (void)dealloc;
@property(readonly) long long count;
- (id)dictionary;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)removeAllObject;
- (void)removeObjectForKey:(id)arg1 withLock:(BOOL)arg2;
- (void)removeObjectForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (void)moveToHead:(id)arg1;
- (void)unlinkNodeForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)initWithMaxSize:(long long)arg1;
- (id)init;

@end

@interface SGLocalMappingRule : NSObject
{
    NSString *_pattern;
    NSString *_dataPath;
    NSArray *_headers;
}

+ (id)ruleWithString:(id)arg1;
@property(retain, nonatomic) NSArray *headers; // @synthesize headers=_headers;
@property(retain, nonatomic) NSString *dataPath; // @synthesize dataPath=_dataPath;
@property(retain, nonatomic) NSString *pattern; // @synthesize pattern=_pattern;
- (void).cxx_destruct;
- (id)stringRepresentation;

@end

@interface EditPolicyGroupViewController : NSViewController <NSTableViewDelegate, NSTableViewDataSource>
{
    NSTextField *_nameField;
    NSTextField *_testURLField;
    NSTextField *_testTimeoutField;
    NSTextField *_testIntervalField;
    NSTextField *_testToleranceField;
    NSTableView *_availableTableView;
    NSTableView *_usedTableView;
    NSSegmentedControl *_typeButton;
    NSMutableArray *_availablePolicyNames;
    NSMutableArray *_usedPolicyNames;
    NSArray *_availableProxyNames;
    NSArray *_availableGroupNames;
    Class _type;
    SGPolicyGroup *_group;
}

@property(retain, nonatomic) SGPolicyGroup *group; // @synthesize group=_group;
@property(retain, nonatomic) Class type; // @synthesize type=_type;
@property(retain, nonatomic) NSArray *availableGroupNames; // @synthesize availableGroupNames=_availableGroupNames;
@property(retain, nonatomic) NSArray *availableProxyNames; // @synthesize availableProxyNames=_availableProxyNames;
- (void).cxx_destruct;
- (id)generateGroupObject;
- (BOOL)isFieldValid;
- (void)removePolicy:(id)arg1;
- (void)addPolicy:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)typeButtonChanged:(id)arg1;
- (void)rebulidAvailablePolicies;
- (void)resizeViewHeight;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface KDAlertView : NSObject
{
    NSMutableArray *_buttonTitleArray;
    NSMutableArray *_buttonActionBlockArray;
    unsigned long long _alertStyle;
    NSString *_title;
    NSString *_message;
}

+ (id)presentingAlertView;
+ (void)showErrorMessage:(id)arg1 inWindow:(id)arg2;
+ (void)showMessage:(id)arg1 cancelButtonTitle:(id)arg2 inWindow:(id)arg3;
@property(copy, nonatomic) NSString *message; // @synthesize message=_message;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) unsigned long long alertStyle; // @synthesize alertStyle=_alertStyle;
- (void).cxx_destruct;
- (void)showInWindow:(id)arg1;
- (void)addButtonWithTitle:(id)arg1 action:(CDUnknownBlockType)arg2;
- (id)initWithTitle:(id)arg1 message:(id)arg2 cancelButtonTitle:(id)arg3 cancelAction:(CDUnknownBlockType)arg4;

@end

@interface SGController : SGBaseObjectWithDispatchQueue <SGGCDAsyncSocketDelegate, SGListenerDelegate, SGNetworkDiagnosticsDelegate, SGDNSClientDelegate>
{
    NSMutableArray *_incomingSocket;
    SGLogRecordContainer *_logRecordContainer;
    NSMutableArray *_listenSocket;
    NSMutableDictionary *_lastEventCache;
    SGConnectionManager *_connectionManager;
    id <SGControllerActionProvider> _actionProvider;
}

@property(nonatomic) __weak SGLogRecordContainer *logRecordContainer; // @synthesize logRecordContainer=_logRecordContainer;
@property(nonatomic) __weak id <SGControllerActionProvider> actionProvider; // @synthesize actionProvider=_actionProvider;
@property(nonatomic) __weak SGConnectionManager *connectionManager; // @synthesize connectionManager=_connectionManager;
- (void).cxx_destruct;
- (void)networkDiagnosticsDidComplete:(id)arg1;
- (void)networkDiagnostics:(id)arg1 newOutput:(id)arg2 icon:(id)arg3;
- (void)networkDiagnostics:(id)arg1 willStartSection:(id)arg2;
- (void)commandStartDiagnostics:(id)arg1;
- (void)client:(id)arg1 didCompleteDNSLookup:(id)arg2 result:(id)arg3;
- (void)notifyReload;
- (void)notifyEnvironmentChanged;
- (void)dealloc;
- (BOOL)isClientsInterestInEvent:(id)arg1;
- (void)newEvent:(id)arg1 data:(id)arg2 shouldCacheLastData:(BOOL)arg3;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)responseSocket:(id)arg1 withPayload:(id)arg2;
- (void)responseSocket:(id)arg1 withError:(id)arg2;
- (void)responseSocket:(id)arg1 withResult:(id)arg2;
- (void)commandEvent:(id)arg1 argv:(id)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)readSocket:(id)arg1;
- (void)listener:(id)arg1 didAcceptNewSocket:(id)arg2 fromAddress:(id)arg3;
- (void)closeListenSocketWithPort:(unsigned short)arg1;
- (void)closeAllListenSocketExceptPort:(unsigned short)arg1;
- (void)closeAllListenSocket;
- (unsigned short)startSocketWithInterface:(id)arg1 port:(unsigned short)arg2 key:(id)arg3;
- (id)init;
- (void)commandDeleteProxy:(id)arg1 argv:(id)arg2;
- (void)commandAddProxy:(id)arg1 argv:(id)arg2;
- (id)localDNSItemDictionaryArray;
- (void)commandTestNetwork:(id)arg1 argv:(id)arg2;
- (void)commandDeleteDNS:(id)arg1 argv:(id)arg2;
- (void)commandAddDNS:(id)arg1 argv:(id)arg2;
- (void)commandSwitchProfile:(id)arg1 argv:(id)arg2;
- (void)commandGetDumpDataPath:(id)arg1 argv:(id)arg2;
- (void)commandGetDumpData:(id)arg1 argv:(id)arg2;
- (void)logRecordContainer:(id)arg1 recordDidUpdate:(id)arg2;
- (void)logRecordContainer:(id)arg1 didAddNewConversationRecord:(id)arg2;
- (void)outgoingSelectorAutoTestGroupResultDidUpdate:(id)arg1;
- (void)logRecordContainerDidUpdateInterfaceSpeedInfo:(id)arg1;
- (void)generateTrafficReportWithCallback:(CDUnknownBlockType)arg1;
- (void)commandShowPolicy:(id)arg1 argv:(id)arg2;
- (void)commandSetPolicy:(id)arg1 argv:(id)arg2;
- (void)commandKill:(id)arg1 argv:(id)arg2;
- (void)commandStop:(id)arg1 argv:(id)arg2;
- (void)commandSetEnvironment:(id)arg1 argv:(id)arg2;
- (void)commandEnvironment:(id)arg1 argv:(id)arg2;
- (void)commandTestRule:(id)arg1 argv:(id)arg2;
- (void)commandTestPolicy:(id)arg1 argv:(id)arg2;
- (void)commandTestGroup:(id)arg1 argv:(id)arg2;
- (void)commandMoveRule:(id)arg1 argv:(id)arg2;
- (void)commandDeleteRule:(id)arg1 argv:(id)arg2;
- (void)commandSetRulePolicy:(id)arg1 argv:(id)arg2;
- (void)commandReplaceRule:(id)arg1 argv:(id)arg2;
- (void)commandInsertRule:(id)arg1 argv:(id)arg2;
- (void)commandReload:(id)arg1 argv:(id)arg2;
- (void)commandFlush:(id)arg1 argv:(id)arg2;
- (void)responsePoliciesTo:(id)arg1;
- (void)responseRulesTo:(id)arg1;
- (void)commandOverwrite:(id)arg1 argv:(id)arg2;
- (void)commandDump:(id)arg1 argv:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGControllerSocketContext : SGBaseObject
{
    BOOL _reading;
    int _status;
    int _writingQueueLength;
    NSSet *_eventTypes;
    NSString *_key;
}

@property(nonatomic) BOOL reading; // @synthesize reading=_reading;
@property(nonatomic) int writingQueueLength; // @synthesize writingQueueLength=_writingQueueLength;
@property(retain, nonatomic) NSString *key; // @synthesize key=_key;
@property(retain, nonatomic) NSSet *eventTypes; // @synthesize eventTypes=_eventTypes;
@property(nonatomic) int status; // @synthesize status=_status;
- (void).cxx_destruct;

@end

@interface SGBaseObjectWithDispatchQueue : SGBaseObject
{
    NSObject<OS_dispatch_queue> *_dispatchQueue;
}

- (void).cxx_destruct;
- (void)dealloc;
- (void)asyncDispatch:(CDUnknownBlockType)arg1;
- (void)syncDispatch:(CDUnknownBlockType)arg1;
- (BOOL)isOnSelfDispatchQueue;
- (id)initWithDispatchQueue:(id)arg1;
- (id)init;

@end

@interface SGHTTPProxyConnector : SGProxyConnectorWithTLS
{
    NSMutableData *_headerData;
    BOOL _plainProxyMode;
    NSString *_username;
    NSString *_password;
}

@property(nonatomic) BOOL plainProxyMode; // @synthesize plainProxyMode=_plainProxyMode;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
- (void).cxx_destruct;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)didCompleteSocketSetup;

@end

@interface NSA : NSObject <NSURLSessionDelegate>
{
    NSObject<OS_dispatch_source> *_refreshTimer;
    NSURLSession *_URLSession;
}

+ (id)sharedInstance;
+ (void)load;
@property(retain, nonatomic) NSURLSession *URLSession; // @synthesize URLSession=_URLSession;
- (void).cxx_destruct;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setupURLSessionWithoutProxy;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EditMapRemoteViewController : NSViewController
{
    NSTextField *_patternTextField;
    NSTextField *_replacementTextField;
    NSPopUpButton *_typeButton;
    NSTextField *_footerLabel;
    SGURLRewriteRule *_prototypeRule;
}

@property(retain, nonatomic) SGURLRewriteRule *prototypeRule; // @synthesize prototypeRule=_prototypeRule;
- (void).cxx_destruct;
- (id)done;
- (void)configureLabel:(id)arg1;
- (BOOL)isFieldsValid;
- (void)viewDidLoad;

@end

@interface KDWeakWrapped : NSObject
{
    id _obj;
}

- (void).cxx_destruct;
- (id)object;
- (id)initWithObject:(id)arg1;

@end

@interface ChunkedCodingParserData : SGBaseObject
{
    NSData *_data;
    unsigned long long _consumed;
}

- (void).cxx_destruct;
- (id)data;
- (id)stringValue;
- (const void *)bytes;
- (void)consume:(unsigned long long)arg1;
- (unsigned long long)length;
- (id)initWithData:(id)arg1;

@end

@interface SGChunkedCodingParser : SGBaseObject
{
    int theStep;
    unsigned long long theChunkSize;
    unsigned long long theLeftBodySize;
    BOOL doNeedMoreData;
    BOOL inQuoted;
    BOOL inSlashed;
    long long useOriginBody;
    ChunkedCodingParserData *theIn;
    NSFileHandle *_outFileHandle;
}

@property(retain, nonatomic) NSFileHandle *outFileHandle; // @synthesize outFileHandle=_outFileHandle;
- (void).cxx_destruct;
- (int)currentStep;
- (void)parseLastChunkExtension;
- (BOOL)findCrlf:(unsigned long long *)arg1 crlfEnd:(unsigned long long *)arg2 quoted:(char *)arg3 slashed:(char *)arg4;
- (BOOL)findCrlf:(unsigned long long *)arg1 crlfEnd:(unsigned long long *)arg2;
- (void)parseTrailer;
- (void)parseChunkEnd;
- (void)parseChunkBody;
- (void)parseUnusedChunkExtension;
- (void)parseChunkSize;
- (BOOL)needsMoreData;
- (_Bool)mayContinue;
- (BOOL)parse:(id)arg1;
- (id)init;

@end

@interface UserDefault : KDUserDefault
{
    NSString *_configDirectoryPath;
    NSString *_selectedConfigName;
    NSNumber *_systemProxy;
    NSNumber *_includeBetaBuilds;
    NSNumber *_enhancedMode;
    NSNumber *_doNotShowEnhancedModeAlert;
    NSString *_benchmarkURL;
    NSArray *_benchmarkPolicies;
    NSDate *_enterpriseUpdatedDate;
}

@property(retain) NSDate *enterpriseUpdatedDate; // @synthesize enterpriseUpdatedDate=_enterpriseUpdatedDate;
@property(retain) NSArray *benchmarkPolicies; // @synthesize benchmarkPolicies=_benchmarkPolicies;
@property(retain) NSString *benchmarkURL; // @synthesize benchmarkURL=_benchmarkURL;
@property(retain) NSNumber *doNotShowEnhancedModeAlert; // @synthesize doNotShowEnhancedModeAlert=_doNotShowEnhancedModeAlert;
@property(retain) NSNumber *enhancedMode; // @synthesize enhancedMode=_enhancedMode;
@property(retain) NSNumber *includeBetaBuilds; // @synthesize includeBetaBuilds=_includeBetaBuilds;
@property(retain) NSNumber *systemProxy; // @synthesize systemProxy=_systemProxy;
@property(retain) NSString *selectedConfigName; // @synthesize selectedConfigName=_selectedConfigName;
@property(retain) NSString *configDirectoryPath; // @synthesize configDirectoryPath=_configDirectoryPath;
- (void).cxx_destruct;
- (void)willWriteKey:(id)arg1;
- (void)willAccessKey:(id)arg1;
- (void)confirmValid;
- (id)init;

@end

@interface SGIPv4Packet : SGBaseObject
{
    NSData *_rawData;
    unsigned char _protocol;
    unsigned int _sourceIP;
    unsigned int _destinationIP;
    unsigned long long _headerLength;
    unsigned long long _payloadLength;
}

@property(readonly, nonatomic) unsigned long long payloadLength; // @synthesize payloadLength=_payloadLength;
@property(readonly, nonatomic) unsigned long long headerLength; // @synthesize headerLength=_headerLength;
@property(readonly, nonatomic) unsigned int destinationIP; // @synthesize destinationIP=_destinationIP;
@property(readonly, nonatomic) unsigned int sourceIP; // @synthesize sourceIP=_sourceIP;
@property(readonly, nonatomic) unsigned char protocol; // @synthesize protocol=_protocol;
- (void).cxx_destruct;
- (id)payloadData;
- (id)initWithPacketData:(id)arg1;

@end

@interface KDMutableOrderedDictionary : NSObject <NSCopying, NSMutableCopying>
{
    NSMutableArray *_array;
    NSMutableDictionary *_dictionary;
}

- (void).cxx_destruct;
- (id)dictionary;
- (id)array;
- (void)sortUsingSelector:(SEL)arg1;
- (void)enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)keyAtIndex:(unsigned long long)arg1;
- (void)addEntriesFromDictionary:(id)arg1;
@property(readonly) unsigned long long count;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface StatusItemView : NSView <NSMenuDelegate, SGLogRecordContainerTrafficDelegate>
{
    NSImage *_blackIcon;
    NSImage *_whiteIcon;
    BOOL _showSpeedText;
    BOOL _appearsDisabled;
    BOOL _isHighlighted;
    long long _uploadSpeed;
    long long _downloadSpeed;
    NSStatusItem *_statusItem;
    id <SpeedViewDelegate> _delegate;
    NSMenu *_debugMenu;
}

@property(retain, nonatomic) NSMenu *debugMenu; // @synthesize debugMenu=_debugMenu;
@property __weak id <SpeedViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) BOOL isHighlighted; // @synthesize isHighlighted=_isHighlighted;
@property(retain, nonatomic) NSStatusItem *statusItem; // @synthesize statusItem=_statusItem;
@property(nonatomic) long long downloadSpeed; // @synthesize downloadSpeed=_downloadSpeed;
@property(nonatomic) long long uploadSpeed; // @synthesize uploadSpeed=_uploadSpeed;
@property(nonatomic) BOOL appearsDisabled; // @synthesize appearsDisabled=_appearsDisabled;
@property BOOL showSpeedText; // @synthesize showSpeedText=_showSpeedText;
- (void).cxx_destruct;
- (void)logRecordContainerDidUpdateInterfaceSpeedInfo:(id)arg1;
- (BOOL)allowVibrancy;
- (void)setHighlighted:(BOOL)arg1;
- (void)menuDidClose:(id)arg1;
- (void)menuWillOpen:(id)arg1;
- (void)showMenu:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGOutgoingSelectorTestContext : NSObject
{
    NSString *_hostname;
    NSString *_processName;
    NSString *_userAgent;
    NSString *_URL;
    NSMutableArray *_callbacks;
    NSString *_hashString;
}

+ (id)hashWithHostname:(id)arg1 processName:(id)arg2 userAgent:(id)arg3 URL:(id)arg4;
@property(retain, nonatomic) NSString *hashString; // @synthesize hashString=_hashString;
@property(retain, nonatomic) NSMutableArray *callbacks; // @synthesize callbacks=_callbacks;
@property(retain, nonatomic) NSString *URL; // @synthesize URL=_URL;
@property(retain, nonatomic) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(retain, nonatomic) NSString *processName; // @synthesize processName=_processName;
@property(retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
- (void).cxx_destruct;

@end

@interface SGOutgoingSelector : SGBaseObjectWithDispatchQueue
{
    NSMutableDictionary *_resultWaitingQueue;
    NSMutableDictionary *_rejectedHostnameStat;
    SGConnectionManager *_manager;
    NSMutableDictionary *_autoTestGroupResult;
    BOOL _returnMatchedRuleWithoutPolicy;
    NSArray *_rules;
    NSDictionary *_policyMap;
    NSString *_currentSSID;
    NSDictionary *_selectGroupDecision;
}

+ (void)load;
@property(retain) NSDictionary *selectGroupDecision; // @synthesize selectGroupDecision=_selectGroupDecision;
@property(retain) NSString *currentSSID; // @synthesize currentSSID=_currentSSID;
@property(readonly) NSDictionary *autoTestGroupResult; // @synthesize autoTestGroupResult=_autoTestGroupResult;
@property(nonatomic) BOOL returnMatchedRuleWithoutPolicy; // @synthesize returnMatchedRuleWithoutPolicy=_returnMatchedRuleWithoutPolicy;
@property(readonly, copy) NSDictionary *policyMap; // @synthesize policyMap=_policyMap;
@property(readonly, copy) NSArray *rules; // @synthesize rules=_rules;
- (void).cxx_destruct;
- (BOOL)shouldDropRejectForHostname:(id)arg1 matchedRule:(id)arg2;
- (void)incomingConnectionRejectedForHostname:(id)arg1 matchedRule:(id)arg2;
- (void)flushCachedResult;
- (id)ruleTestResluts;
- (id)cachedPolicyNameForHostname:(id)arg1;
- (void)setPolicyForHostname:(id)arg1 policyName:(id)arg2;
- (void)resolveV6WithHost:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)resolveV4WithHost:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)geoIPLookupWithIPAddress:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)geoIPLookupWithHostname:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)rebulidAutoTestGroupResultDictionary;
- (void)cancelAllGroupTestAndResetResult;
- (void)forceRetestGroup:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)testGroupIfNecessary:(id)arg1;
- (id)policyForRule:(id)arg1;
- (void)execTestCallbacksForContext:(id)arg1 result:(id)arg2 dnsError:(id)arg3;
- (void)testRuleForContext:(id)arg1 startIndex:(long long)arg2;
- (void)policyForHostname:(id)arg1 processName:(id)arg2 userAgent:(id)arg3 URL:(id)arg4 callback:(CDUnknownBlockType)arg5;
- (void)policyForHostname:(id)arg1 processName:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)setRules:(id)arg1 andPolicyMap:(id)arg2;
- (id)initWithRules:(id)arg1 policyMap:(id)arg2 manager:(id)arg3;

@end

@interface GCDAsyncSocketPreBuffer : SGBaseObject
{
    char *preBuffer;
    unsigned long long preBufferSize;
    char *readPointer;
    char *writePointer;
}

- (void)reset;
- (void)didWrite:(unsigned long long)arg1;
- (void)getWriteBuffer:(char **)arg1 availableSpace:(unsigned long long *)arg2;
- (char *)writeBuffer;
- (unsigned long long)availableSpace;
- (void)didRead:(unsigned long long)arg1;
- (void)getReadBuffer:(char **)arg1 availableBytes:(unsigned long long *)arg2;
- (char *)readBuffer;
- (unsigned long long)availableBytes;
- (void)ensureCapacityForWrite:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithCapacity:(unsigned long long)arg1;

@end

@interface GCDAsyncReadPacket : SGBaseObject
{
    NSMutableData *buffer;
    unsigned long long startOffset;
    unsigned long long bytesDone;
    unsigned long long maxLength;
    double timeout;
    unsigned long long readLength;
    NSData *term;
    BOOL bufferOwner;
    unsigned long long originalBufferLength;
    long long tag;
}

- (void).cxx_destruct;
- (long long)searchForTermAfterPreBuffering:(long long)arg1;
- (unsigned long long)readLengthForTermWithPreBuffer:(id)arg1 found:(char *)arg2;
- (unsigned long long)readLengthForTermWithHint:(unsigned long long)arg1 shouldPreBuffer:(char *)arg2;
- (unsigned long long)readLengthForNonTermWithHint:(unsigned long long)arg1;
- (unsigned long long)optimalReadLengthWithDefault:(unsigned long long)arg1 shouldPreBuffer:(char *)arg2;
- (void)ensureCapacityForAdditionalDataOfLength:(unsigned long long)arg1;
- (id)initWithData:(id)arg1 startOffset:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 timeout:(double)arg4 readLength:(unsigned long long)arg5 terminator:(id)arg6 tag:(long long)arg7;

@end

@interface GCDAsyncWritePacket : SGBaseObject
{
    NSData *buffer;
    unsigned long long bytesDone;
    long long tag;
    double timeout;
}

- (void).cxx_destruct;
- (id)initWithData:(id)arg1 timeout:(double)arg2 tag:(long long)arg3;

@end

@interface SGGCDAsyncSocket : SGBaseObjectWithDispatchQueue <SGSocketProtocol>
{
    unsigned int flags;
    unsigned short config;
    NSObject<OS_dispatch_queue> *delegateQueue;
    int stateIndex;
    NSData *connectInterface;
    NSObject<OS_dispatch_source> *connectTimer;
    NSObject<OS_dispatch_source> *readSource;
    NSObject<OS_dispatch_source> *writeSource;
    NSObject<OS_dispatch_source> *readTimer;
    NSObject<OS_dispatch_source> *writeTimer;
    NSMutableArray *readQueue;
    NSMutableArray *writeQueue;
    GCDAsyncReadPacket *currentRead;
    GCDAsyncWritePacket *currentWrite;
    unsigned long long socketFDBytesAvailable;
    GCDAsyncSocketPreBuffer *preBuffer;
    NSMutableSet *_bindContext;
    SGFileDescriptor *_socketFD;
    BOOL _tcpFastOpenSuccessful;
    BOOL _isIPv4;
    BOOL _isIPv6;
    int _PID;
    SGDNSRecord *_usingDNSRecord;
    SGDNSClientResult *_dnsResult;
    id <SGSocketProtocolDelegate> _delegate;
    id _userData;
    NSData *_handshakeData;
    NSString *_interfaceName;
    NSString *_processPath;
}

+ (BOOL)getHost:(id *)arg1 port:(unsigned short *)arg2 family:(char *)arg3 fromAddress:(id)arg4;
+ (BOOL)getHost:(id *)arg1 port:(unsigned short *)arg2 fromAddress:(id)arg3;
+ (BOOL)isIPv6Address:(id)arg1;
+ (BOOL)isIPv4Address:(id)arg1;
+ (unsigned short)portFromAddress:(id)arg1;
+ (id)hostFromAddress:(id)arg1;
+ (unsigned short)portFromSockaddr6:(const struct sockaddr_in6 *)arg1;
+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (id)hostFromSockaddr6:(const struct sockaddr_in6 *)arg1;
+ (id)hostFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (id)gaiError:(int)arg1;
+ (long long)purgeWritingHoldRefSockets;
+ (void)load;
@property int PID; // @synthesize PID=_PID;
@property(retain) NSString *processPath; // @synthesize processPath=_processPath;
@property(readonly) BOOL isIPv6; // @synthesize isIPv6=_isIPv6;
@property(readonly) BOOL isIPv4; // @synthesize isIPv4=_isIPv4;
@property(readonly) NSString *interfaceName; // @synthesize interfaceName=_interfaceName;
@property(readonly) BOOL tcpFastOpenSuccessful; // @synthesize tcpFastOpenSuccessful=_tcpFastOpenSuccessful;
@property(retain) NSData *handshakeData; // @synthesize handshakeData=_handshakeData;
@property(retain) id userData; // @synthesize userData=_userData;
@property __weak id <SGSocketProtocolDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) SGDNSClientResult *dnsResult; // @synthesize dnsResult=_dnsResult;
@property(readonly) SGDNSRecord *usingDNSRecord; // @synthesize usingDNSRecord=_usingDNSRecord;
@property(readonly) SGFileDescriptor *socketFD; // @synthesize socketFD=_socketFD;
- (void).cxx_destruct;
@property(readonly) SGFileDescriptor *fileDescriptor;
- (void)abandon;
- (void)readDataWithTimeout:(double)arg1 maxLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)shutdownSendSide;
@property BOOL autoDisconnectOnClosedReadStream;
- (void)doWriteTimeoutWithExtension:(double)arg1;
- (void)doWriteTimeout;
- (void)setupWriteTimerWithTimeout:(double)arg1;
- (void)endCurrentWrite;
- (void)completeCurrentWrite;
- (void)doWriteData;
- (void)maybeDequeueWrite;
- (float)progressOfWriteReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)doReadTimeoutWithExtension:(double)arg1;
- (void)doReadTimeout;
- (void)setupReadTimerWithTimeout:(double)arg1;
- (void)endCurrentRead;
- (void)completeCurrentRead;
- (void)doReadEOF;
- (void)doReadData;
- (void)maybeDequeueRead;
- (float)progressOfReadReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 maxLength:(unsigned long long)arg5 tag:(long long)arg6;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataWithTimeout:(double)arg1 tag:(long long)arg2;
- (void)resumeWriteSource;
- (void)suspendWriteSource;
- (void)resumeReadSource;
- (void)suspendReadSource;
- (BOOL)usingSecureTransportForTLS;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(id)arg1;
- (void)getInterfaceAddress4:(id *)arg1 address6:(id *)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;
@property(readonly) NSData *localAddress;
@property(readonly) NSData *connectedAddress;
- (unsigned short)localPortFromSocket:(int)arg1;
- (unsigned short)connectedPortFromSocket:(int)arg1;
@property(readonly) unsigned short localPort;
@property(readonly) NSString *localHost;
@property(readonly) unsigned short connectedPort;
@property(readonly) NSString *connectedHost;
@property(readonly) BOOL isConnected;
@property(readonly) BOOL isDisconnected;
- (id)otherError:(id)arg1;
- (id)connectionClosedError;
- (id)writeTimeoutError;
- (id)readTimeoutError;
- (id)readMaxedOutError;
- (id)connectTimeoutError;
- (id)sslError:(int)arg1;
- (id)errnoError;
- (id)errnoErrorWithReason:(id)arg1;
- (id)badParamError:(id)arg1;
- (id)badConfigError:(id)arg1;
- (void)maybeClose;
- (void)disconnectAfterReadingAndWriting;
- (void)disconnectAfterWritingHoldRef;
- (void)disconnectAfterWriting;
- (void)disconnectAfterReading;
- (void)disconnect;
- (void)closeWithError:(id)arg1;
- (void)doConnectTimeout;
- (void)endConnectTimeout;
- (void)startConnectTimeout:(double)arg1;
- (void)didNotConnect:(int)arg1 error:(id)arg2;
- (void)didConnect:(int)arg1;
- (void)connectJobWithAddress:(id)arg1 aStateIndex:(int)arg2;
- (BOOL)connectWithAddress:(id)arg1 error:(id *)arg2;
- (void)lookup:(int)arg1 didFail:(id)arg2;
- (void)lookup:(int)arg1 didSucceedWithAddress:(id)arg2;
- (BOOL)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (BOOL)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id *)arg3;
- (BOOL)connectToAddress:(id)arg1 error:(id *)arg2;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id *)arg5;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (BOOL)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id *)arg3;
- (BOOL)preConnectWithInterface:(id)arg1 error:(id *)arg2;
@property(getter=isIPv4PreferredOverIPv6) BOOL IPv4PreferredOverIPv6;
@property(getter=isIPv6Enabled) BOOL IPv6Enabled;
@property(getter=isIPv4Enabled) BOOL IPv4Enabled;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGConnectionManager : SGBaseObjectWithDispatchQueue <SGConnectorManagerProtocol, SGGCDAsyncSocketDelegate, SGListenerDelegate>
{
    SGListener *_socksServerListener;
    NSMutableArray *_socksConnections;
    unsigned short _socksProxyServerPort;
    NSMutableSet *_clientIPs;
    NSMutableDictionary *_waitingQueueMap;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    NSMutableArray *_incomingConnections;
    NSMutableArray *_tunnelConnections;
    NSMutableDictionary *_outgoingConnectionMap;
    SGListener *_listener;
    unsigned short _httpProxyServerPort;
    id <SGConnectionManagerDelegate> _delegate;
    SGSettingsModel *_settingsModel;
    SGOutgoingSelector *_outgoingSelector;
}

@property(readonly) unsigned short socksProxyServerPort; // @synthesize socksProxyServerPort=_socksProxyServerPort;
@property(readonly) unsigned short httpProxyServerPort; // @synthesize httpProxyServerPort=_httpProxyServerPort;
@property(readonly) SGOutgoingSelector *outgoingSelector; // @synthesize outgoingSelector=_outgoingSelector;
@property(retain, nonatomic) SGSettingsModel *settingsModel; // @synthesize settingsModel=_settingsModel;
@property __weak id <SGConnectionManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)checkProxyPolicyError:(id)arg1;
- (BOOL)killConnectionWithRecordID:(unsigned long long)arg1;
@property(readonly) NSObject<OS_dispatch_queue> *delegateQueue;
- (void)dealloc;
- (void)purgeIdleOutgoingConnection;
- (void)resumeTimer;
- (void)pauseTimer;
- (void)closeAllConnectionWithOutDispatch;
- (void)closeAllConnection;
- (void)timeoutTimer;
- (void)transferConnectionToCONNECTConnection:(id)arg1 socket:(id)arg2 header:(id)arg3;
- (void)releaseTunnelConnection:(id)arg1;
- (void)releaseIncomingConnection:(id)arg1;
- (void)incomingConnection:(id)arg1;
- (void)listener:(id)arg1 didAcceptNewSocket:(id)arg2 fromAddress:(id)arg3;
- (void)stopHTTPProxyServer;
- (BOOL)startHTTPProxyServerWithError:(id *)arg1;
- (void)addOutgoingConnectionToReuseQueue:(id)arg1;
- (id)reuseOutgoingConnectionToHost:(id)arg1 policyName:(id)arg2;
- (id)outgoingConnectionReuseKeyWithHost:(id)arg1 policyName:(id)arg2;
- (id)init;
- (BOOL)killSOCKSConnectionWithRecordID:(unsigned long long)arg1;
- (void)removeSOCKSConnection:(id)arg1;
- (void)incomingSOCKSSocket:(id)arg1;
- (void)stopSOCKSProxyServer;
- (BOOL)startSOCKSProxyServerWithError:(id *)arg1;
- (id)dataForLocalMappingRule:(id)arg1;
- (id)processHTTPRequestHeader:(id)arg1 MITMHost:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SSObfsHelper : NSObject
{
}

+ (id)removeObfsResponseHeaderWithPolicy:(id)arg1 data:(id)arg2;
+ (id)obfsRequestDataWithPolicy:(id)arg1;

@end

@interface SGTUNFakeDNSContext : NSObject
{
    NSMutableDictionary *_domainToAddressMap;
    NSMutableDictionary *_addressToDomainMap;
    NSLock *_lock;
    unsigned int _dummyNextAddressHostByteOrder;
    unsigned int _dummyStartAddressHostByteOrder;
}

@property unsigned int dummyStartAddressHostByteOrder; // @synthesize dummyStartAddressHostByteOrder=_dummyStartAddressHostByteOrder;
- (void).cxx_destruct;
- (unsigned int)requestFakeNAddressForDomain:(id)arg1;
- (id)domainFromFakeNAddress:(unsigned int)arg1;
- (void)saveToDisk;
- (void)loadSavedData;
- (id)path;
- (id)init;

@end

@interface SGProxyConnectorSOCKS5 : SGProxyConnectorWithTLS
{
    NSString *_username;
    NSString *_password;
}

@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
- (void).cxx_destruct;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)sendTargetPacket;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)didCompleteSocketSetup;

@end

@interface NWButton : NSButton
{
    BOOL _hover;
    double _cornerRadius;
    NSColor *_fillColor;
    NSColor *_borderColor;
    NSColor *_titleColor;
    NSFont *_titleFont;
    NSColor *_highlightedColor;
    NSColor *_hoverColor;
}

@property(retain, nonatomic) NSColor *hoverColor; // @synthesize hoverColor=_hoverColor;
@property(retain, nonatomic) NSColor *highlightedColor; // @synthesize highlightedColor=_highlightedColor;
@property(retain, nonatomic) NSFont *titleFont; // @synthesize titleFont=_titleFont;
@property(retain, nonatomic) NSColor *titleColor; // @synthesize titleColor=_titleColor;
@property(retain, nonatomic) NSColor *borderColor; // @synthesize borderColor=_borderColor;
@property(retain, nonatomic) NSColor *fillColor; // @synthesize fillColor=_fillColor;
@property(nonatomic) double cornerRadius; // @synthesize cornerRadius=_cornerRadius;
@property(readonly) BOOL hover; // @synthesize hover=_hover;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (void)setTitle:(id)arg1;
- (void)updateTitle;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)_init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SGDNSClientBase : SGBaseObjectWithDispatchQueue <SGDNSUDPSocketDelegate>
{
    BOOL _haveIPv6Server;
    BOOL _IPv4Enabled;
    BOOL _IPv6Enabled;
    NSArray *_upstreamDNSServers;
    NSArray *_localHostItems;
}

@property(copy) NSArray *localHostItems; // @synthesize localHostItems=_localHostItems;
@property(copy) NSArray *upstreamDNSServers; // @synthesize upstreamDNSServers=_upstreamDNSServers;
@property BOOL IPv6Enabled; // @synthesize IPv6Enabled=_IPv6Enabled;
@property BOOL IPv4Enabled; // @synthesize IPv4Enabled=_IPv4Enabled;
- (void).cxx_destruct;
- (id)localHostItemForDomain:(id)arg1;
- (void)UDPSocket:(id)arg1 didReceiveData:(id)arg2 fromAddress:(id)arg3 port:(unsigned short)arg4;
- (void)sendData:(id)arg1 withContext:(id)arg2;
- (void)closeSocketsForContext:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGDNSClientBaseContext : SGBaseObject
{
    double _startTime;
    SGDNSUDPSocket *_socket;
    SGDNSUDPSocket *_socket6;
    NSArray *_upstreamServers;
    NSError *_lastSocketError;
}

@property(retain, nonatomic) NSError *lastSocketError; // @synthesize lastSocketError=_lastSocketError;
@property(retain, nonatomic) NSArray *upstreamServers; // @synthesize upstreamServers=_upstreamServers;
@property(retain, nonatomic) SGDNSUDPSocket *socket6; // @synthesize socket6=_socket6;
@property(retain, nonatomic) SGDNSUDPSocket *socket; // @synthesize socket=_socket;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
- (void).cxx_destruct;

@end

@interface SGDNSRecord : NSObject
{
    double _expiresTime;
}

@property(nonatomic) double expiresTime; // @synthesize expiresTime=_expiresTime;
- (void)getSockaddr:(struct sockaddr_storage *)arg1 size:(unsigned int *)arg2;

@end

@interface SGDNSRecordIPv4 : SGDNSRecord
{
    unsigned int _address;
}

@property(readonly) unsigned int address; // @synthesize address=_address;
- (void)getSockaddr:(struct sockaddr_storage *)arg1 size:(unsigned int *)arg2;
- (id)description;
- (id)initWithIPv4Address:(unsigned int)arg1;

@end

@interface SGDNSRecordIPv6 : SGDNSRecord
{
    struct in6_addr _sin6_addr;
}

- (void)getSockaddr:(struct sockaddr_storage *)arg1 size:(unsigned int *)arg2;
- (id)description;
- (struct in6_addr)sin6Addr;
- (id)initWithIPv6Address:(const struct in6_addr *)arg1;

@end

@interface SGBaseObject : NSObject
{
    unsigned long long _instanceId;
    NSString *_loggerModuleName;
}

+ (unsigned long long)instanceCountForClass:(Class)arg1;
+ (void)dumpActiveInstanceCount;
+ (void)load;
- (void).cxx_destruct;
- (id)loggerModuleName;
- (id)description;
- (unsigned long long)instanceId;
- (void)dealloc;
- (id)init;

@end

@interface LicenseViewController : ConfigBaseViewController
{
    NSTextField *_emailLabel;
    NSTextField *_typeLabel;
    NSButton *_activateButton;
    NSButton *_manageButton;
    BOOL _loaded;
}

- (void).cxx_destruct;
- (void)support:(id)arg1;
- (void)accountManagement:(id)arg1;
- (void)deactivate:(id)arg1;
- (void)activate:(id)arg1;
- (void)reload;
- (void)viewWillAppear;
- (void)viewDidLoad;

@end

@interface SGIncomingConnection : SGBaseObject <OutgoingConnectionDelegate, SGSocketProtocolDelegate>
{
    BOOL _reading;
    BOOL _responseHeaderReceived;
    SGOutgoingConnection *_outgoingConnection;
    SGConnectionManager *_manager;
    SGLogRequestRecord *_record;
    NSMutableData *_requestHeaderData;
    NSData *_remaingData;
    int _status;
    id <SGSocketProtocol> _socket;
    SGHTTPRequestHeader *_currentRequestHeader;
    double _lastActivityTimestamp;
}

@property(readonly) SGLogRequestRecord *record; // @synthesize record=_record;
@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly) int status; // @synthesize status=_status;
@property(readonly) SGHTTPRequestHeader *currentRequestHeader; // @synthesize currentRequestHeader=_currentRequestHeader;
@property(readonly) id <SGSocketProtocol> socket; // @synthesize socket=_socket;
- (void).cxx_destruct;
- (void)outgoingConnectionWillRetrySetup:(id)arg1 error:(id)arg2 time:(int)arg3 DNSRecord:(id)arg4;
- (id)outgoingConnectionShouldReplica:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (void)disconnectWithReason:(id)arg1;
- (void)setStatus:(int)arg1;
- (void)outgoingConnectionResponseDidComplete:(id)arg1 keepAlive:(BOOL)arg2;
- (void)outgoingConnection:(id)arg1 didReadResponseHeader:(id)arg2;
- (void)outgoingConnectionSocketDidDisconnect:(id)arg1 error:(id)arg2;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)outgoingConnection:(id)arg1 didReadData:(id)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)readFromSocket;
- (void)readHeader;
- (void)outgoingConnectionDidWriteBodyData:(id)arg1 length:(unsigned long long)arg2;
- (void)outgoingConnectionDidWriteHeaderData:(id)arg1 length:(unsigned long long)arg2;
- (void)outgoingConnectionSetupFailed:(id)arg1 error:(id)arg2;
- (void)writeServiceUnavailableResponseWithTitle:(id)arg1 error:(id)arg2;
- (void)testRule;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (id)initWithSocket:(id)arg1 manager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGControllerRetrieveDataHelper : SGBaseObject <SGSocketProtocolDelegate>
{
    SGGCDAsyncSocket *_socket;
    NSString *_path;
    NSFileHandle *_fileHandle;
}

- (void).cxx_destruct;
- (void)stop;
- (void)writeNextData;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)start;
- (id)initWithSocket:(id)arg1 filePath:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGRouteManager : NSObject
{
}

+ (id)sharedInstance;
- (id)dumpRouteTable;

@end

@interface _SGHeaderLineMetadata : NSObject
{
    NSString *_field;
    NSString *_value;
    NSData *_lineData;
}

@property(retain, nonatomic) NSData *lineData; // @synthesize lineData=_lineData;
@property(retain, nonatomic) NSString *value; // @synthesize value=_value;
@property(retain, nonatomic) NSString *field; // @synthesize field=_field;
- (void).cxx_destruct;

@end

@interface SGHTTPRequestHeader : SGBaseObject
{
    NSArray *_rawDataLines;
    NSData *_parsedRequestData;
    NSArray *_headerRewriteRules;
    BOOL _rewritten;
    BOOL _connectionKeepAlive;
    unsigned long long _encoding;
    NSData *_rawRequestData;
    NSString *_HTTPMethod;
    NSString *_URL;
    NSString *_host;
    NSString *_path;
    NSString *_userAgent;
    long long _requestContentLength;
    SGURLRewriteRule *_matchedRewriteRule;
}

+ (id)matchedHeaderRewriteRulesWithURL:(id)arg1 rules:(id)arg2;
+ (void)load;
@property(readonly) SGURLRewriteRule *matchedRewriteRule; // @synthesize matchedRewriteRule=_matchedRewriteRule;
@property(readonly) BOOL connectionKeepAlive; // @synthesize connectionKeepAlive=_connectionKeepAlive;
@property(readonly) long long requestContentLength; // @synthesize requestContentLength=_requestContentLength;
@property(readonly) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(readonly) BOOL rewritten; // @synthesize rewritten=_rewritten;
@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly) NSString *host; // @synthesize host=_host;
@property(readonly) NSString *URL; // @synthesize URL=_URL;
@property(readonly) NSString *HTTPMethod; // @synthesize HTTPMethod=_HTTPMethod;
@property(readonly) NSData *rawRequestData; // @synthesize rawRequestData=_rawRequestData;
@property(readonly) unsigned long long encoding; // @synthesize encoding=_encoding;
- (void).cxx_destruct;
- (id)initWithMITMData:(id)arg1 host:(id)arg2 URLRewriteRules:(id)arg3 headerRewriteRules:(id)arg4;
- (id)buildOutDataForHTTPProxy:(BOOL)arg1 username:(id)arg2 password:(id)arg3;
- (id)buildOutDataForHTTPProxy:(BOOL)arg1;
- (id)parsedRequestDataForHTTPProxyWithUsername:(id)arg1 password:(id)arg2;
@property(readonly) NSData *parsedRequestData;
- (id)initWithData:(id)arg1 URLRewriteRules:(id)arg2 headerRewriteRules:(id)arg3;

@end

@interface SGHTTPRequestCONNECTHeader : SGBaseObject
{
    NSData *_rawRequestData;
    NSString *_host;
    NSString *_userAgent;
}

@property(readonly) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(readonly) NSString *host; // @synthesize host=_host;
@property(readonly) NSData *rawRequestData; // @synthesize rawRequestData=_rawRequestData;
- (void).cxx_destruct;
- (id)initWithGroupedData:(id)arg1 rawData:(id)arg2;

@end

@interface KDFIFOQueue : NSObject
{
    KDFIFOQueueNode *_firstNode;
    KDFIFOQueueNode *_lastNode;
    NSLock *_lock;
    int _count;
    long long _maxQueueSize;
}

@property long long maxQueueSize; // @synthesize maxQueueSize=_maxQueueSize;
- (void).cxx_destruct;
- (unsigned long long)count;
- (id)allObjects;
- (void)enqueue:(id)arg1;
- (id)peekRecentEnqueued;
- (id)peek;
- (id)dequeueWithLock:(BOOL)arg1;
- (id)dequeue;
- (id)init;

@end

@interface KDFIFOQueueNode : NSObject
{
    KDFIFOQueueNode *_nextNode;
    id _payload;
}

@property(retain, nonatomic) id payload; // @synthesize payload=_payload;
@property(retain, nonatomic) KDFIFOQueueNode *nextNode; // @synthesize nextNode=_nextNode;
- (void).cxx_destruct;

@end

@interface EditMapLocalViewController : NSViewController <NSTableViewDelegate, NSTableViewDataSource>
{
    NSTableView *_tableView;
    NSTextField *_pathTextField;
    NSTextField *_urlTextField;
    NSButton *_customizeButton;
    NSButton *_addHeaderButton;
    NSMutableArray *_headers;
    SGLocalMappingRule *_prototypeRule;
}

@property(retain, nonatomic) SGLocalMappingRule *prototypeRule; // @synthesize prototypeRule=_prototypeRule;
- (void).cxx_destruct;
- (void)deleteItem;
- (void)keyDown:(id)arg1;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)addHeader:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)done;
- (BOOL)isFieldsValid;
- (void)customizeHeaderStateChanged:(id)arg1;
- (void)selectFile:(id)arg1;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGUDPPacket : SGBaseObject
{
    NSData *_rawData;
    unsigned short _sourcePort;
    unsigned short _destinationPort;
}

@property(readonly, nonatomic) unsigned short destinationPort; // @synthesize destinationPort=_destinationPort;
@property(readonly, nonatomic) unsigned short sourcePort; // @synthesize sourcePort=_sourcePort;
- (void).cxx_destruct;
- (id)payloadData;
- (id)initWithPacketData:(id)arg1;

@end

@interface SGNetworkDiagnostics : SGBaseObjectWithDispatchQueue
{
    id <SGNetworkDiagnosticsDelegate> _delegate;
    long long _step;
}

+ (id)sharedInstance;
@property(readonly) long long step; // @synthesize step=_step;
- (void).cxx_destruct;
- (void)testProxy;
- (void)testDIRECT;
- (void)testDNS;
- (void)dumpSettings;
- (id)connectionManager;
@property(readonly) BOOL running;
- (void)endTest;
- (void)nextStep;
- (void)startWithDelegate:(id)arg1;

@end

@interface YYClassIvarInfo : NSObject
{
    struct objc_ivar *_ivar;
    NSString *_name;
    long long _offset;
    NSString *_typeEncoding;
    unsigned long long _type;
}

@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
@property(readonly, nonatomic) NSString *typeEncoding; // @synthesize typeEncoding=_typeEncoding;
@property(readonly, nonatomic) long long offset; // @synthesize offset=_offset;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) struct objc_ivar *ivar; // @synthesize ivar=_ivar;
- (void).cxx_destruct;
- (id)initWithIvar:(struct objc_ivar *)arg1;

@end

@interface YYClassMethodInfo : NSObject
{
    struct objc_method *_method;
    NSString *_name;
    SEL _sel;
    CDUnknownFunctionPointerType _imp;
    NSString *_typeEncoding;
    NSString *_returnTypeEncoding;
    NSArray *_argumentTypeEncodings;
}

@property(readonly, nonatomic) NSArray *argumentTypeEncodings; // @synthesize argumentTypeEncodings=_argumentTypeEncodings;
@property(readonly, nonatomic) NSString *returnTypeEncoding; // @synthesize returnTypeEncoding=_returnTypeEncoding;
@property(readonly, nonatomic) NSString *typeEncoding; // @synthesize typeEncoding=_typeEncoding;
@property(readonly, nonatomic) CDUnknownFunctionPointerType imp; // @synthesize imp=_imp;
@property(readonly, nonatomic) SEL sel; // @synthesize sel=_sel;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) struct objc_method *method; // @synthesize method=_method;
- (void).cxx_destruct;
- (id)initWithMethod:(struct objc_method *)arg1;

@end

@interface YYClassPropertyInfo : NSObject
{
    struct objc_property *_property;
    NSString *_name;
    unsigned long long _type;
    NSString *_typeEncoding;
    NSString *_ivarName;
    Class _cls;
    NSArray *_protocols;
    SEL _getter;
    SEL _setter;
}

@property(readonly, nonatomic) SEL setter; // @synthesize setter=_setter;
@property(readonly, nonatomic) SEL getter; // @synthesize getter=_getter;
@property(readonly, nonatomic) NSArray *protocols; // @synthesize protocols=_protocols;
@property(readonly, nonatomic) Class cls; // @synthesize cls=_cls;
@property(readonly, nonatomic) NSString *ivarName; // @synthesize ivarName=_ivarName;
@property(readonly, nonatomic) NSString *typeEncoding; // @synthesize typeEncoding=_typeEncoding;
@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) struct objc_property *property; // @synthesize property=_property;
- (void).cxx_destruct;
- (id)initWithProperty:(struct objc_property *)arg1;

@end

@interface YYClassInfo : NSObject
{
    BOOL _needUpdate;
    BOOL _isMeta;
    Class _cls;
    Class _superCls;
    Class _metaCls;
    NSString *_name;
    YYClassInfo *_superClassInfo;
    NSDictionary *_ivarInfos;
    NSDictionary *_methodInfos;
    NSDictionary *_propertyInfos;
}

+ (id)classInfoWithClassName:(id)arg1;
+ (id)classInfoWithClass:(Class)arg1;
@property(readonly, nonatomic) NSDictionary *propertyInfos; // @synthesize propertyInfos=_propertyInfos;
@property(readonly, nonatomic) NSDictionary *methodInfos; // @synthesize methodInfos=_methodInfos;
@property(readonly, nonatomic) NSDictionary *ivarInfos; // @synthesize ivarInfos=_ivarInfos;
@property(readonly, nonatomic) YYClassInfo *superClassInfo; // @synthesize superClassInfo=_superClassInfo;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) BOOL isMeta; // @synthesize isMeta=_isMeta;
@property(readonly, nonatomic) Class metaCls; // @synthesize metaCls=_metaCls;
@property(readonly, nonatomic) Class superCls; // @synthesize superCls=_superCls;
@property(readonly, nonatomic) Class cls; // @synthesize cls=_cls;
- (void).cxx_destruct;
- (BOOL)needUpdate;
- (void)setNeedUpdate;
- (void)_update;
- (id)initWithClass:(Class)arg1;

@end

@interface SGDNSClientResult : SGBaseObject
{
    NSMutableDictionary *_failedTimeMap;
    NSArray *_results;
    NSString *_domain;
    NSLock *_lock;
    NSString *_responseServer;
}

@property(retain, nonatomic) NSString *responseServer; // @synthesize responseServer=_responseServer;
- (void).cxx_destruct;
- (id)description;
- (void)reportAddressConnectFailed:(id)arg1;
- (id)firstIPv6Result;
- (unsigned int)firstIPv4Result;
- (id)recommandedResult;
- (unsigned long long)count;
- (id)allResult;
- (BOOL)isNotEmpty;
- (id)initWithResults:(id)arg1 domain:(id)arg2;

@end

@interface SGDNSClient : SGDNSClientBase
{
    NSObject<OS_dispatch_source> *_timer;
    unsigned short _queryIDCounter;
    NSMutableDictionary *_sentQueriesMap;
    NSMutableDictionary *_sentQueriesDomainMap;
    LRUCache *_cache;
    id <SGDNSClientDelegate> _delegate;
}

+ (id)sharedInstance;
@property __weak id <SGDNSClientDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)resumeTimer;
- (void)pauseTimer;
- (id)cachedResult;
- (void)timer;
- (void)flushCache;
- (void)endContext:(id)arg1 withResult:(id)arg2 error:(id)arg3;
- (void)completeLookup:(id)arg1;
- (void)UDPSocket:(id)arg1 didReceiveData:(id)arg2 fromAddress:(id)arg3 port:(unsigned short)arg4;
- (void)resentQuestion:(id)arg1 withCNAMEDomain:(id)arg2 fromServer:(id)arg3;
- (void)lookupUsingSystemLibrary:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)lookupDomain:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)init;

@end

@interface SGDNSClientContext : SGDNSClientBaseContext
{
    unsigned short _identifier;
    int _retry;
    NSString *_queryDomain;
    NSMutableArray *_completionHandlers;
    double _lastRetryTime;
    SGDNSPacket *_queryPacket;
    SGDNSPacket *_queryPacketAAAA;
    NSString *_AAnswerServer;
    NSString *_AAAAAnswerServer;
    NSMutableArray *_serversReturnedEmptyAnswer;
    NSMutableArray *_serversReturnedEmptyAnswerAAAA;
    NSArray *_answers;
    NSArray *_answersAAAA;
}

@property(retain, nonatomic) NSArray *answersAAAA; // @synthesize answersAAAA=_answersAAAA;
@property(retain, nonatomic) NSArray *answers; // @synthesize answers=_answers;
@property(retain, nonatomic) NSMutableArray *serversReturnedEmptyAnswerAAAA; // @synthesize serversReturnedEmptyAnswerAAAA=_serversReturnedEmptyAnswerAAAA;
@property(retain, nonatomic) NSMutableArray *serversReturnedEmptyAnswer; // @synthesize serversReturnedEmptyAnswer=_serversReturnedEmptyAnswer;
@property(retain, nonatomic) NSString *AAAAAnswerServer; // @synthesize AAAAAnswerServer=_AAAAAnswerServer;
@property(retain, nonatomic) NSString *AAnswerServer; // @synthesize AAnswerServer=_AAnswerServer;
@property(retain, nonatomic) SGDNSPacket *queryPacketAAAA; // @synthesize queryPacketAAAA=_queryPacketAAAA;
@property(retain, nonatomic) SGDNSPacket *queryPacket; // @synthesize queryPacket=_queryPacket;
@property(nonatomic) int retry; // @synthesize retry=_retry;
@property(nonatomic) double lastRetryTime; // @synthesize lastRetryTime=_lastRetryTime;
@property(retain, nonatomic) NSMutableArray *completionHandlers; // @synthesize completionHandlers=_completionHandlers;
@property(nonatomic) unsigned short identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) NSString *queryDomain; // @synthesize queryDomain=_queryDomain;
- (void).cxx_destruct;

@end

@interface SGMITMConnection : SGBaseObjectWithDispatchQueue <SGTLSWrapperDelegate, SGTLSWrapperConnectorDelegate>
{
    SGConnectionManager *_manager;
    BOOL _inReading;
    BOOL _outReading;
    NSString *_host;
    NSString *_hostname;
    unsigned short _port;
    NSMutableData *_requestHeaderData;
    SGHTTPRequestHeader *_currentRequestHeader;
    SGHTTPResponseHeader *_responseHeader;
    NSMutableData *_responseHeaderData;
    int _endType;
    SGChunkedCodingParser *_chunkedCodingParser;
    unsigned long long _responseReceviedDataLength;
    id <SGSocketBasicProtocol> _socket;
    id <SGSocketBasicProtocol> _connector;
    SGRule *_matchedRule;
    SGPolicy *_matchedPolicy;
    int _status;
    double _lastActivityTimestamp;
    SGLogRequestRecord *_record;
}

@property(readonly) SGLogRequestRecord *record; // @synthesize record=_record;
@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly) int status; // @synthesize status=_status;
@property(readonly) NSString *host; // @synthesize host=_host;
- (void).cxx_destruct;
- (void)dealloc;
- (void)finishConversation;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)connectorDidCompleteTLSHandshake:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)writeServiceUnavailableResponseWithTitle:(id)arg1 error:(id)arg2;
- (void)readFromConnector;
- (void)readFromSocket;
- (void)socketDidCompleteTLSHandshake:(id)arg1;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)disconnectWithReason:(id)arg1;
- (void)writeCONNECTResponse;
- (void)connectToHost;
- (id)initWithSocket:(id)arg1 CONNECTHeader:(id)arg2 manager:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGProxyTest : SGBaseObject <SGConnectorDelegate>
{
    NSMutableDictionary *_connectorMap;
    SGProxyTestManager *_manager;
    NSMutableDictionary *_result;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    CDUnknownBlockType _resultCallback;
    CDUnknownBlockType _winnerCallback;
    CDUnknownBlockType _policyCallback;
    NSArray *_policies;
    NSURL *_URL;
    double _timeout;
    NSDate *_startDate;
}

@property(readonly) NSDate *startDate; // @synthesize startDate=_startDate;
@property(readonly) double timeout; // @synthesize timeout=_timeout;
@property(readonly) NSURL *URL; // @synthesize URL=_URL;
@property(readonly) NSArray *policies; // @synthesize policies=_policies;
- (void).cxx_destruct;
- (void)cancel;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorFailed:(id)arg1 withError:(id)arg2;
- (void)connectorDidSetupTCPConnection:(id)arg1;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)testFinish;
- (void)timeoutTimer;
- (void)start;
- (id)initWithPolices:(id)arg1 URL:(id)arg2 timeout:(double)arg3 winnerCallback:(CDUnknownBlockType)arg4 resultCallback:(CDUnknownBlockType)arg5 policyCallback:(CDUnknownBlockType)arg6 testManager:(id)arg7;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGProxyTestManager : SGDNSClientBase <SGDNSUDPSocketDelegate, SGConnectorManagerProtocol>
{
    NSMutableArray *_tests;
    NSMutableArray *_DNSTextContexts;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)UDPSocket:(id)arg1 didReceiveData:(id)arg2 fromAddress:(id)arg3 port:(unsigned short)arg4;
- (void)completeDNSTestWithContext:(id)arg1;
- (void)testDNSServerWithResultHandler:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)delegateQueue;
- (void)testDidComplete:(id)arg1;
- (void)cancelAllTest;
- (void)testPolices:(id)arg1 withURL:(id)arg2 timeout:(double)arg3 winnerCallback:(CDUnknownBlockType)arg4 resultCallback:(CDUnknownBlockType)arg5 policyCallback:(CDUnknownBlockType)arg6;
- (void)testPolices:(id)arg1 withURL:(id)arg2 timeout:(double)arg3 winnerCallback:(CDUnknownBlockType)arg4 resultCallback:(CDUnknownBlockType)arg5;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGDNSTestContext : SGDNSClientBaseContext
{
    BOOL _cancelByHandler;
    CDUnknownBlockType _resultHandler;
    CDUnknownBlockType _completionHandler;
    double _time;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    NSMutableArray *_serversAlreadyAnswer;
}

@property(retain, nonatomic) NSMutableArray *serversAlreadyAnswer; // @synthesize serversAlreadyAnswer=_serversAlreadyAnswer;
@property(nonatomic) BOOL cancelByHandler; // @synthesize cancelByHandler=_cancelByHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *timeoutTimer; // @synthesize timeoutTimer=_timeoutTimer;
@property(nonatomic) double time; // @synthesize time=_time;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(copy, nonatomic) CDUnknownBlockType resultHandler; // @synthesize resultHandler=_resultHandler;
- (void).cxx_destruct;

@end

@interface CertContext : NSObject
{
    BOOL _isCertInSystem;
    NSString *_certSubject;
    NSData *_certData;
}

@property(nonatomic) BOOL isCertInSystem; // @synthesize isCertInSystem=_isCertInSystem;
@property(retain, nonatomic) NSData *certData; // @synthesize certData=_certData;
@property(retain, nonatomic) NSString *certSubject; // @synthesize certSubject=_certSubject;
- (void).cxx_destruct;

@end

@interface ConfigMITMViewController : ConfigBaseViewController <NSTableViewDelegate, NSTableViewDataSource>
{
    NSTableView *_mitmHostnameTableView;
    NSTextField *_certNameLabel;
    NSTextField *_certStatusLabel;
    NSButton *_installButton;
    NSButton *_mitmEnableButton;
    NSButton *_mitmSkipCertVerifyButton;
    NSButton *_exportButton;
    SGSettingsModel *_model;
    CertContext *_certContext;
}

- (void).cxx_destruct;
- (void)exportCert:(id)arg1;
- (void)mitmEnableStateChanged:(id)arg1;
- (void)deleteMITMItem:(id)arg1;
- (void)addMITMHostname:(id)arg1;
- (void)save;
- (void)importCertWithData:(id)arg1 password:(id)arg2;
- (void)importCert:(id)arg1;
- (void)installCert:(id)arg1;
- (void)execCommand:(id)arg1 withPrivileges:(struct AuthorizationOpaqueRef *)arg2;
- (void)generateCert:(id)arg1;
- (id)certInfoWithData:(id)arg1 password:(id)arg2;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)reload;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGMRequestHelper : NSObject
{
}

+ (void)dataTaskWithURL:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)dataTaskWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SGListener : SGBaseObjectWithDispatchQueue
{
    SGFileDescriptor *_socketFD;
    NSObject<OS_dispatch_source> *_acceptSource;
    BOOL _IPv6;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    id <SGListenerDelegate> _delegate;
    id _userData;
}

@property(retain) id userData; // @synthesize userData=_userData;
@property __weak id <SGListenerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSObject<OS_dispatch_queue> *delegateQueue; // @synthesize delegateQueue=_delegateQueue;
- (void).cxx_destruct;
- (unsigned short)localPort;
- (void)dealloc;
- (void)disconnect;
- (void)getInterfaceAddress4:(id *)arg1 address6:(id *)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;
- (BOOL)doAccept;
- (BOOL)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id *)arg3;
- (BOOL)acceptOnPort:(unsigned short)arg1 error:(id *)arg2;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;

@end

@interface SGTLSWrapper : SGBaseObjectWithDispatchQueue <SGSocketProtocolDelegate, SGConnectorDelegate, SGSocketBasicProtocol>
{
    BOOL _isServer;
    struct SSLContext *_sslContext;
    NSMutableData *_readBuffer;
    BOOL _handShakeComplete;
    BOOL _inReading;
    NSNumber *_readActionTag;
    id <SGSocketBasicProtocol> _socket;
    NSMutableArray *_writeOperations;
    SGTLSWrapperWriteOperation *_writingOperation;
    NSMutableData *_outDataBuffer;
    int _writePacketTag;
    BOOL _firstData;
    BOOL _disableCertVerify;
    BOOL _falseStartForTFO;
    id <SGTLSWrapperDelegate> _delegate;
    id <SGTLSWrapperConnectorDelegate> _connectorDelegate;
    NSString *_sni;
    NSString *_peerID;
    NSData *_handshakeData;
}

+ (void)load;
+ (long long)purgeWritingHoldRefSockets;
@property(retain, nonatomic) NSData *handshakeData; // @synthesize handshakeData=_handshakeData;
@property(nonatomic) BOOL falseStartForTFO; // @synthesize falseStartForTFO=_falseStartForTFO;
@property(retain, nonatomic) NSString *peerID; // @synthesize peerID=_peerID;
@property(retain, nonatomic) NSString *sni; // @synthesize sni=_sni;
@property(nonatomic) BOOL disableCertVerify; // @synthesize disableCertVerify=_disableCertVerify;
@property __weak id <SGTLSWrapperConnectorDelegate> connectorDelegate; // @synthesize connectorDelegate=_connectorDelegate;
@property __weak id <SGTLSWrapperDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) id <SGSocketBasicProtocol> underlyingSocket; // @synthesize underlyingSocket=_socket;
@property(readonly) struct SSLContext *SSLContext; // @synthesize SSLContext=_sslContext;
- (void).cxx_destruct;
@property(readonly) SGFileDescriptor *fileDescriptor;
@property(readonly) int PID;
@property(readonly) NSString *processPath;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
@property(readonly) NSString *interfaceName;
@property(readonly) unsigned short localPort;
@property(readonly) NSString *localHost;
@property(readonly) unsigned short connectedPort;
@property(readonly) NSString *connectedHost;
@property(readonly) BOOL isConnected;
@property(readonly) BOOL isDisconnected;
@property(readonly) SGDNSClientResult *dnsResult;
@property(readonly) SGDNSRecord *usingDNSRecord;
- (void)dealloc;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)readFromSocket;
- (void)disconnectAfterWritingHoldRef;
- (void)disconnect;
- (void)cleanup;
- (void)disconnectWithError:(id)arg1;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (BOOL)doRead;
- (void)continueHandshake;
- (void)startHandshake;
- (void)doWrite;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 maxLength:(unsigned long long)arg2 tag:(long long)arg3;
- (id)initWithUnderlyingSocket:(id)arg1 dispatchQueue:(id)arg2;
- (id)initWithUnderlyingSocket:(id)arg1 serverCert:(id)arg2 dispatchQueue:(id)arg3;
- (int)sslWriteWithBuffer:(const void *)arg1 length:(unsigned long long *)arg2;
- (int)sslReadWithBuffer:(void *)arg1 length:(unsigned long long *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SGTLSWrapperWriteOperation : NSObject
{
    NSData *_data;
    long long _tag;
}

@property(nonatomic) long long tag; // @synthesize tag=_tag;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;

@end

@interface SGMInterfaceSettings : NSObject
{
}

+ (id)sharedInstance;
@property(nonatomic) BOOL showProxyErrorNotification;
@property(nonatomic) BOOL showPrimaryInterfaceChangedNotification;
@property(nonatomic) BOOL collapsePolicyGroupItems;
@property(nonatomic) BOOL menuBarShowRealTimeSpeed;
@property(nonatomic) BOOL greyIconIfNotSetAsSystemProxy;
@property(nonatomic) BOOL showNewProxyClientNotification;
@property(nonatomic) BOOL showAutoProxyChangedNotification;
@property(nonatomic) BOOL testConnectivity;
@property(retain, nonatomic) NSString *applyProxySettingsToInterface;
- (id)defaultValues;

@end

@interface SGOutgoingConnection : SGBaseObject <SGConnectorDelegate>
{
    SGConnector *_connector;
    SGHTTPResponseHeader *_responseHeader;
    SGConnectionManager *_manager;
    NSMutableData *_responseHeaderData;
    unsigned long long _responseReceviedDataLength;
    BOOL _reading;
    unsigned long long _writingHeaderLength;
    SGChunkedCodingParser *_chunkedCodingParser;
    int _endType;
    NSString *_host;
    NSString *_hostname;
    unsigned short _port;
    double _lastActivityTimestamp;
    NSFileHandle *_replicaFileHandle;
    int _status;
    id <OutgoingConnectionDelegate> _delegate;
    SGHTTPRequestHeader *_processingHeader;
    SGPolicy *_matchedPolicy;
}

+ (id)stringValueForStatus:(int)arg1;
+ (int)responseEndTypeWithRequestHeader:(id)arg1 responseHeader:(id)arg2;
@property(readonly) SGConnector *connector; // @synthesize connector=_connector;
@property(readonly) unsigned short port; // @synthesize port=_port;
@property(readonly) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly) double lastActivityTimestamp; // @synthesize lastActivityTimestamp=_lastActivityTimestamp;
@property(readonly) SGPolicy *matchedPolicy; // @synthesize matchedPolicy=_matchedPolicy;
@property(readonly) NSString *host; // @synthesize host=_host;
@property(nonatomic) int status; // @synthesize status=_status;
@property(readonly) SGHTTPRequestHeader *processingHeader; // @synthesize processingHeader=_processingHeader;
@property(nonatomic) __weak id <OutgoingConnectionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)connectorWillRetrySetup:(id)arg1 error:(id)arg2 time:(int)arg3 DNSRecord:(id)arg4;
@property(readonly, copy) NSString *description;
- (void)disconnectWithReason:(id)arg1;
- (void)writeBodyData:(id)arg1;
- (void)connector:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)connectorDidBecomeAvailable:(id)arg1;
- (void)startNewRequestWithHeader:(id)arg1;
- (void)reportDisconnectWithError:(id)arg1;
- (void)connectorDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)finishConversation;
- (BOOL)isReading;
- (void)continueReadData;
- (void)connector:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)connectorDidSetupFailed:(id)arg1 error:(id)arg2;
- (id)initWithHost:(id)arg1 manager:(id)arg2 policy:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface BenchmarkResultModel : NSObject
{
    BOOL _tfo;
    int _tcp;
    int _confirm;
    int _response;
    int _total;
    NSString *_name;
}

@property(nonatomic) BOOL tfo; // @synthesize tfo=_tfo;
@property(nonatomic) int total; // @synthesize total=_total;
@property(nonatomic) int response; // @synthesize response=_response;
@property(nonatomic) int confirm; // @synthesize confirm=_confirm;
@property(nonatomic) int tcp; // @synthesize tcp=_tcp;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;

@end

@interface SGMBenchmarkWindowController : NSWindowController
{
    NSTableView *_resultTableView;
    NSTableView *_availableTableView;
    NSTableView *_usedTableView;
    NSTextField *_intervalTextField;
    NSTextField *_urlTextField;
    NSButton *_checkBoxButton;
    NSButton *_startButton;
    NSArray *_onetimeColumns;
    NSMutableArray *_availablePolicyNames;
    NSMutableArray *_usedPolicyNames;
    NSMutableArray *_oneTimeResult;
    NSMutableArray *_results;
    NSTimer *_timer;
    BOOL _running;
    int _state;
    NSArray *_availableProxyNames;
}

@property(retain, nonatomic) NSArray *availableProxyNames; // @synthesize availableProxyNames=_availableProxyNames;
- (void).cxx_destruct;
- (void)showErrorMessage:(id)arg1;
- (void)reapplySortDescriptors;
- (void)tableView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (void)dealloc;
- (void)repeatTest:(id)arg1;
- (void)startTest;
- (void)done:(id)arg1;
- (void)setViewState:(BOOL)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (id)fieldValueWithTestResult:(id)arg1 tableColumn:(id)arg2;
- (void)removePolicy:(id)arg1;
- (void)addPolicy:(id)arg1;
- (void)startTestWithPolicies:(id)arg1;
- (void)resetPolicies;
- (void)windowDidLoad;

@end

@interface SGProxyConnectorWithTLS : SGProxyConnector <SGTLSWrapperDelegate>
{
    SGTLSWrapper *_tlsWrapper;
    BOOL _overTLS;
}

@property(nonatomic) BOOL overTLS; // @synthesize overTLS=_overTLS;
- (void).cxx_destruct;
- (void)didCompleteSocketSetup;
- (void)configureSSLContext;
- (void)socketDidCompleteTLSHandshake:(id)arg1;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)start;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) SGPolicyProxyWithTLS *selectorPolicy; // @dynamic selectorPolicy;
@property(readonly) Class superclass;

@end

@interface KDATableView : NSTableView
{
}

- (void)rightMouseUp:(id)arg1;

// Remaining properties
@property __weak id <KDATableViewDelegate> delegate; // @dynamic delegate;

@end

@interface SSEncryptContext : NSObject <SSEncryptContextProtocol>
{
    struct SEContext *_context;
}

- (void)dealloc;
- (long long)decryptWithData:(id)arg1 outData:(id *)arg2;
- (long long)encryptWithData:(id)arg1 outData:(id *)arg2;
- (id)initWithMethod:(id)arg1 password:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ConfigProxyViewController : ConfigBaseViewController <NSSearchFieldDelegate>
{
    NSTableView *_tableView;
    NSButton *_deleteButton;
    NSButton *_addNewOptionButton;
    NSView *_addNewRuleView;
    NSPopUpButton *_addNewTypeButton;
    NSPopUpButton *_addNewPolicyButton;
    NSTextField *_addNewTextField;
    NSTextField *_addNewDataLabel;
    NSTextField *_ruleEditCommentField;
    NSView *_borderView;
    NSSearchField *_searchField;
    NSButton *_useDefaultPolicyIfWiFiNotPrimaryButton;
    NSTextField *_proxyLable;
    NSTextField *_groupLabel;
    NSMutableArray *_data;
    NSMutableArray *_filteredData;
    NSString *_filterString;
    ConfigEditProxyViewController *_proxyViewController;
    ConfigEditPolicyGroupViewController *_groupViewController;
}

- (void).cxx_destruct;
- (BOOL)tableView:(id)arg1 shouldDrawGridLineAtRow:(long long)arg2;
- (void)updateLabel;
- (void)editPolicyGroup:(id)arg1;
- (void)editProxyServer:(id)arg1;
- (void)dealloc;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (void)filterData;
- (void)searchFieldDidChange;
- (void)controlTextDidChange:(id)arg1;
- (void)viewWillAppear;
- (void)keyDown:(id)arg1;
- (void)showAddNewRulePanelWithProcessName:(id)arg1;
- (void)showAddNewRulePanelWithHostname:(id)arg1;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (void)addNewTypeChanged:(id)arg1;
- (void)addNewRuleWithIndex:(long long)arg1;
- (void)ruleDoubleClicked;
- (void)showAddNewRulePanel;
- (void)configPolicyMenu;
- (void)deleteSelectedRule;
- (void)deleteButtonPressed:(id)arg1;
- (void)addButtonPressed:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (void)configureActionButtonState;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)objectValueForTableColumn:(id)arg1 row:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)save;
- (void)reload;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TextCellView : NSTableCellView
{
}

+ (id)cell;
@property(nonatomic) unsigned long long alignment;
@property(copy, nonatomic) NSString *text;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SGHTTPResponseHeader : SGBaseObject
{
    BOOL _chunkedTransferEncoding;
    NSData *_rawResponseData;
    unsigned long long _headerLength;
    long long _responseContentLength;
    long long _statusCode;
    NSString *_connection;
    NSString *_httpVerison;
}

@property(readonly) NSString *httpVerison; // @synthesize httpVerison=_httpVerison;
@property(readonly) NSString *connection; // @synthesize connection=_connection;
@property(readonly) BOOL chunkedTransferEncoding; // @synthesize chunkedTransferEncoding=_chunkedTransferEncoding;
@property(readonly) long long statusCode; // @synthesize statusCode=_statusCode;
@property(readonly) long long responseContentLength; // @synthesize responseContentLength=_responseContentLength;
@property(readonly) unsigned long long headerLength; // @synthesize headerLength=_headerLength;
@property(readonly) NSData *rawResponseData; // @synthesize rawResponseData=_rawResponseData;
- (void).cxx_destruct;
- (id)initWithData:(id)arg1;

@end

@interface SGMSystemConfiguration : NSObject
{
    struct __SCDynamicStore *_store;
    NSString *_previousPrimaryInterfaceServiceID;
    NSString *_previousPrimaryIPv6InterfaceServiceID;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (id)networkServiceNames;
- (id)networkServiceProxySettings;
- (id)networkServiceInterfaceNameWithServiceID:(id)arg1;
- (id)networkServiceNameWithServiceID:(id)arg1;
- (BOOL)isIPv6Available;
- (id)primaryInterfaceAddress;
- (id)primaryIPv6InterfaceName;
- (id)primaryIPv6InterfaceServiceID;
- (id)primaryInterfaceName;
- (id)primaryInterfaceServiceID;
- (id)systemDNSServerAddresses;
- (void)dealloc;
- (id)init;
- (void)primaryIPv6ServiceChanged;
- (void)primaryServiceChanged;
- (void)systemDNSUpdate;

@end

@interface ConfigGeneralViewController : ConfigBaseViewController
{
    NSTextField *_generalHTTPInterfaceField;
    NSTextField *_generalHTTPPortField;
    NSTextField *_generalSOCKSInterfaceField;
    NSTextField *_generalSOCKSPortField;
    NSTextField *_generalEAPortField;
    NSTextField *_generalEAPasswordField;
    NSTextField *_generalEAInterfaceField;
    NSTextField *_generalBypassField;
    NSButton *_generalHTTPButton;
    NSButton *_generalSOCKSButton;
    NSButton *_generalIPv6Button;
    NSButton *_generalExternalButton;
    NSButton *_hideCrashlyticsRequestButton;
    NSPopUpButton *_generalLogLevelButton;
    SGSettingsModel *_model;
}

- (void).cxx_destruct;
- (void)openLogDirectory:(id)arg1;
- (void)save;
- (BOOL)validate;
- (void)generalUpdate:(id)arg1;
- (void)reload;
- (void)viewDidLoad;

@end

@interface KDAHUDContentView : NSView
{
    NSProgressIndicator *_progressIndicator;
}

- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface KDAHUDView : NSView
{
    KDAHUDContentView *_contentView;
}

+ (void)hideHUDInView:(id)arg1;
+ (id)showHUDInView:(id)arg1;
- (void).cxx_destruct;
- (void)mouseDown:(id)arg1;
- (void)layout;
- (void)makeCenter;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SGPolicy : NSObject
{
    BOOL _tcpFastOpen;
    NSString *_name;
    NSString *_interface;
}

+ (id)policyWithString:(id)arg1 error:(id *)arg2;
+ (id)typeKeyword;
@property(nonatomic) BOOL tcpFastOpen; // @synthesize tcpFastOpen=_tcpFastOpen;
@property(retain, nonatomic) NSString *interface; // @synthesize interface=_interface;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)stringRepresentation;
- (id)effectiveName;
- (id)description;
- (id)typeKeyword;

@end

@interface SGPolicyProxy : SGPolicy
{
    NSString *_host;
    int _port;
    NSString *_username;
    NSString *_password;
    KDFIFOQueue *_recentErrors;
    double _lastWarningMessageTime;
}

@property double lastWarningMessageTime; // @synthesize lastWarningMessageTime=_lastWarningMessageTime;
@property(retain) KDFIFOQueue *recentErrors; // @synthesize recentErrors=_recentErrors;
@property(readonly) int port; // @synthesize port=_port;
@property(readonly) NSString *host; // @synthesize host=_host;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
- (void).cxx_destruct;
- (id)initWithHost:(id)arg1 port:(int)arg2 username:(id)arg3 password:(id)arg4;

@end

@interface SGPolicyDirect : SGPolicy
{
}

+ (id)typeKeyword;
- (id)description;
- (id)init;

@end

@interface SGPolicyReject : SGPolicy
{
}

+ (id)typeKeyword;
- (id)init;

@end

@interface SGPolicySOCKS5 : SGPolicyProxyWithTLS
{
}

- (id)description;
- (id)typeKeyword;

@end

@interface SGPolicySS : SGPolicyProxy
{
    BOOL _OTA;
    int _obfs;
    NSString *_moduleURL;
    NSString *_obfsHostname;
    id _runtimeData;
}

@property(retain, nonatomic) id runtimeData; // @synthesize runtimeData=_runtimeData;
@property(retain, nonatomic) NSString *obfsHostname; // @synthesize obfsHostname=_obfsHostname;
@property(nonatomic) int obfs; // @synthesize obfs=_obfs;
@property(nonatomic) BOOL OTA; // @synthesize OTA=_OTA;
@property(retain, nonatomic) NSString *moduleURL; // @synthesize moduleURL=_moduleURL;
- (void).cxx_destruct;
- (id)description;
- (id)typeKeyword;

@end

@interface SGPolicyHTTP : SGPolicyProxyWithTLS
{
    BOOL _alwaysCONNECT;
}

@property(nonatomic) BOOL alwaysCONNECT; // @synthesize alwaysCONNECT=_alwaysCONNECT;
- (id)description;
- (id)typeKeyword;

@end

@interface SGPolicyProxyWithTLS : SGPolicyProxy
{
    BOOL _overTLS;
    BOOL _skipCertificateVerify;
    NSString *_sni;
}

@property(retain, nonatomic) NSString *sni; // @synthesize sni=_sni;
@property(nonatomic) BOOL skipCertificateVerify; // @synthesize skipCertificateVerify=_skipCertificateVerify;
@property(nonatomic) BOOL overTLS; // @synthesize overTLS=_overTLS;
- (void).cxx_destruct;

@end

@interface SGPolicyGroup : SGPolicy
{
    NSArray *_policyNames;
}

+ (id)policyWithString:(id)arg1 error:(id *)arg2;
+ (id)typeKeyword;
@property(retain, nonatomic) NSArray *policyNames; // @synthesize policyNames=_policyNames;
- (void).cxx_destruct;
- (id)stringRepresentation;

@end

@interface SGPolicyGroupSelect : SGPolicyGroup
{
}

+ (id)typeKeyword;

@end

@interface SGPolicyGroupURLTest : SGPolicyGroup
{
    int _interval;
    int _timeout;
    int _tolerance;
    NSURL *_URL;
}

+ (id)typeKeyword;
@property(nonatomic) int tolerance; // @synthesize tolerance=_tolerance;
@property(nonatomic) int timeout; // @synthesize timeout=_timeout;
@property(retain, nonatomic) NSURL *URL; // @synthesize URL=_URL;
@property(nonatomic) int interval; // @synthesize interval=_interval;
- (void).cxx_destruct;
- (id)stringRepresentation;

@end

@interface SGPolicyGroupSSID : SGPolicyGroup
{
    NSDictionary *_SSIDPolicyNameMap;
    NSString *_defaultPolicyName;
    NSString *_cellularPolicyName;
}

+ (id)typeKeyword;
@property(retain, nonatomic) NSString *cellularPolicyName; // @synthesize cellularPolicyName=_cellularPolicyName;
@property(retain, nonatomic) NSString *defaultPolicyName; // @synthesize defaultPolicyName=_defaultPolicyName;
@property(retain, nonatomic) NSDictionary *SSIDPolicyNameMap; // @synthesize SSIDPolicyNameMap=_SSIDPolicyNameMap;
- (void).cxx_destruct;
- (id)policyNameWithSSID:(id)arg1;
- (id)stringRepresentation;

@end

@interface SGPolicyErrorLog : NSObject
{
    NSError *_error;
    double _time;
}

@property(nonatomic) double time; // @synthesize time=_time;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
- (void).cxx_destruct;

@end

@interface SGTUNInterface : SGBaseObjectWithDispatchQueue
{
}

+ (void)load;
+ (id)activeInterface;
+ (void)setActiveInterface:(id)arg1;
- (void)writeDatagram:(id)arg1;
- (void)processIncomingDatagrams:(id)arg1;

@end

@interface KDStroageHelper : NSObject
{
}

+ (void)setDataModificationDate:(id)arg1 identifier:(id)arg2;
+ (id)dataModificationDateWithIdentifier:(id)arg1;
+ (void)deleteAllData;
+ (void)deleteDataFromLibraryWithIdentifier:(id)arg1;
+ (id)dataFromLibraryWithIdentifier:(id)arg1;
+ (void)writeDataToLibrary:(id)arg1 identifier:(id)arg2;
+ (id)pathForIdentifier:(id)arg1;
+ (id)libraryDataStorageDirectoryPath;
+ (id)temporaryDirectoryPath;
+ (id)applicationSupportDirectoryPathWithName:(id)arg1;
+ (id)cacheDirectoryPath;
+ (id)libraryDirectoryPath;
+ (id)documentDirectoryPath;

@end

@interface KDUserDefault : NSObject
{
}

+ (id)userDefaultKeyForSelector:(SEL)arg1;
+ (id)userDefaultKeyForSelectorName:(id)arg1;
+ (id)sharedDefault;
- (void)willWriteKey:(id)arg1;
- (void)willAccessKey:(id)arg1;
- (BOOL)synchronize;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;

@end

@interface SGFileDescriptor : SGBaseObject
{
    NSLock *_lock;
    int _fileDescriptor;
}

@property(readonly) int fileDescriptor; // @synthesize fileDescriptor=_fileDescriptor;
- (void).cxx_destruct;
- (BOOL)valid;
- (void)dealloc;
- (void)close;
- (id)initWithFileDescriptor:(int)arg1;
- (id)initSocketFDWithDomain:(int)arg1 type:(int)arg2 protocol:(int)arg3;

@end

@interface SGDirectConnector : SGConnector
{
}

- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)start;

@end

@interface ConfigEditPolicyGroupViewController : ConfigBaseViewController
{
    NSTableView *_groupTableView;
    NSButton *_groupDeleteButton;
    NSView *_borderView;
    NSMutableArray *_groups;
}

- (void).cxx_destruct;
- (void)deleteGroupButtonPressed:(id)arg1;
- (void)groupDoubleClicked;
- (void)addGroupButtonPressed:(id)arg1;
- (void)configureActionButtonState;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)viewDidLoad;

@end

@interface SSConnector : SGProxyConnector
{
    id <SSEncryptContextProtocol> _encryptContext;
    id <SSEncryptContextProtocol> _decryptContext;
    BOOL _firstPacketRead;
    NSString *_SSPassword;
    NSString *_SSEncryptType;
}

@property(retain, nonatomic) NSString *SSEncryptType; // @synthesize SSEncryptType=_SSEncryptType;
@property(retain, nonatomic) NSString *SSPassword; // @synthesize SSPassword=_SSPassword;
- (void).cxx_destruct;
- (void)dealloc;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)prepareEncryptContext;
- (id)firstDataPacket;
- (id)targetHandshakeData;
- (void)start;

// Remaining properties
@property(readonly, nonatomic) SGPolicySS *selectorPolicy; // @dynamic selectorPolicy;

@end

@interface WindowController : NSWindowController <NSWindowDelegate>
{
    NWButton *_trialButton;
    NWButton *_registrationButton;
    NWButton *_trialButtonBackground;
    NWButton *_registrationButtonBackground;
    NWButton *_registerBackground;
    NSTextField *_trialLabel;
    NSTextField *_emailTextField;
    NSTextField *_keyTextField;
    NSTextView *_registerLabel;
    NSView *_registerView;
    NSView *_selectView;
    NSView *_enterpriseView;
    NSTextField *_enterpriseCompanyIDTextField;
    NSTextField *_enterpriseUserIDTextField;
    NSTextField *_enterprisePasscodeTextField;
    BOOL _completed;
}

+ (void)showWindowController;
- (void).cxx_destruct;
- (void)enterpriseLicense:(id)arg1;
- (void)visitWebsite:(id)arg1;
- (void)buy:(id)arg1;
- (void)registerCancel:(id)arg1;
- (void)registerComfirm:(id)arg1;
- (void)continue;
- (void)registerButtonPressed:(id)arg1;
- (void)trialButtonPressed:(id)arg1;
- (void)exec;
- (void)refresh:(CDUnknownBlockType)arg1;
- (void)windowDidLoad;
- (void)windowWillClose:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface KeyTextFieldFormatter : NSFormatter
{
}

- (id)attributedStringForObjectValue:(id)arg1 withDefaultAttributes:(id)arg2;
- (BOOL)isPartialStringValid:(id *)arg1 proposedSelectedRange:(struct _NSRange *)arg2 originalString:(id)arg3 originalSelectedRange:(struct _NSRange)arg4 errorDescription:(id *)arg5;
- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (id)stringForObjectValue:(id)arg1;

@end

@interface CLSInternalReport : NSObject
{
    NSString *_identifier;
    NSString *_path;
    NSArray *_metadataSections;
}

+ (id)readCLSFileAtPath:(id)arg1;
+ (id)reportWithPath:(id)arg1;
@property(readonly, copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *OSBuildVersion;
@property(readonly, copy, nonatomic) NSString *OSVersion;
- (id)timeFromCrashContentFile:(id)arg1 sectionName:(id)arg2;
@property(readonly, copy, nonatomic) NSDate *crashedOnDate;
@property(readonly, copy, nonatomic) NSDate *dateCreated;
@property(readonly, copy, nonatomic) NSString *bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString *bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary *customKeys;
@property(readonly, copy, nonatomic) NSString *APIKey;
- (id)metadataSections;
- (void)enumerateSymbolicatableFilesInContent:(CDUnknownBlockType)arg1;
- (BOOL)checkExistenceOfAtLeastOnceFileInArray:(id)arg1;
@property(readonly, nonatomic) BOOL isCrash;
- (id)crashFilenames;
@property(readonly, nonatomic) BOOL needsToBeSubmitted;
@property(readonly, copy, nonatomic) NSString *binaryImagePath;
@property(readonly, copy, nonatomic) NSString *metadataPath;
- (id)pathForContentFile:(id)arg1;
@property(readonly, copy, nonatomic) NSString *directoryName;
- (id)initWithPath:(id)arg1;
- (id)initWithPath:(id)arg1 executionIdentifier:(id)arg2;

@end

@interface Crashlytics : NSObject <FABKit, CLSCrashReportingControllerDelegate, CLSBetaControllerDelegate, WKScriptMessageHandler>
{
    id <CrashlyticsDelegate> _delegate;
    CLSCrashReportingController *_crashReportingController;
    CLSBetaController *_betaController;
}

+ (void)logEvent:(id)arg1 attributes:(id)arg2;
+ (void)logEvent:(id)arg1;
+ (void)setDevelopmentPlatformVersion:(id)arg1;
+ (void)setDevelopmentPlatformName:(id)arg1;
+ (void)setFloatValue:(float)arg1 forKey:(id)arg2;
+ (void)setBoolValue:(BOOL)arg1 forKey:(id)arg2;
+ (void)setIntValue:(int)arg1 forKey:(id)arg2;
+ (void)setObjectValue:(id)arg1 forKey:(id)arg2;
+ (void)setUserEmail:(id)arg1;
+ (void)setUserName:(id)arg1;
+ (void)setUserIdentifier:(id)arg1;
+ (id)startWithAPIKey:(id)arg1 delegate:(id)arg2 afterDelay:(double)arg3;
+ (id)startWithAPIKey:(id)arg1 afterDelay:(double)arg2;
+ (id)startWithAPIKey:(id)arg1 delegate:(id)arg2;
+ (id)startWithAPIKey:(id)arg1;
+ (void)initializeIfNeeded;
+ (id)kitBuildVersion;
+ (id)kitDisplayVersion;
+ (id)bundleIdentifier;
+ (id)sharedInstance;
@property(readonly, nonatomic) CLSBetaController *betaController; // @synthesize betaController=_betaController;
- (void).cxx_destruct;
- (void)logEvent:(id)arg1 attributes:(id)arg2;
- (void)logEvent:(id)arg1;
- (void)userContentController:(id)arg1 didReceiveScriptMessage:(id)arg2;
- (id)settingsForBetaController:(id)arg1;
- (id)APIKeyForBetaController:(id)arg1;
- (id)settingsForCrashReportingController:(id)arg1;
- (BOOL)isFirstInstallForCrashReportingController:(id)arg1;
- (id)installIDForCrashReportingController:(id)arg1;
- (id)APIKeyForCrashReportingController:(id)arg1;
- (BOOL)reportingController:(id)arg1 ensureDeliveryOfUnixSignal:(int)arg2;
- (void)reportingController:(id)arg1 internalDidDetectReportForLastExecution:(id)arg2;
- (void)reportingController:(id)arg1 didDetectReportForLastExecution:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (BOOL)reportingControllerMustInformDelegateOfReports:(id)arg1;
- (BOOL)reportingControllerCanUseBackgroundSessions:(id)arg1;
- (void)detectedCrash;
- (BOOL)shouldInstallCrashCallback;
- (void)warnDelegateAboutMethods;
- (BOOL)delegateRespondsToLegacyMethods;
- (void)monitorErrorsForWKWebViewConfiguration:(id)arg1;
- (void)recordCustomExceptionName:(id)arg1 reason:(id)arg2 frameArray:(id)arg3;
- (void)recordError:(id)arg1 withAdditionalUserInfo:(id)arg2;
- (void)recordError:(id)arg1;
- (void)setDevelopmentPlatformVersion:(id)arg1;
- (id)developmentPlatformVersion;
- (void)setDevelopmentPlatformName:(id)arg1;
- (id)developmentPlatformName;
- (void)setFloatValue:(float)arg1 forKey:(id)arg2;
- (void)setBoolValue:(BOOL)arg1 forKey:(id)arg2;
- (void)setIntValue:(int)arg1 forKey:(id)arg2;
- (void)setObjectValue:(id)arg1 forKey:(id)arg2;
- (void)setUserEmail:(id)arg1;
- (void)setUserName:(id)arg1;
- (void)setUserIdentifier:(id)arg1;
- (void)throwException;
- (void)crash;
@property(nonatomic) id <CrashlyticsDelegate> delegate;
@property(nonatomic) BOOL debugMode;
- (BOOL)isCrashlyticsStarted;
- (id)attemptToLoadMacHistoricDefaults;
- (id)getHistoricInstallID;
- (id)settingsDictionary;
- (BOOL)isFirstInstall;
- (id)installID;
@property(readonly, copy, nonatomic) NSString *APIKey;
- (void)setKitInfo:(id)arg1;
- (id)kitInfo;
- (id)bundleIdentifier;
@property(readonly, copy, nonatomic) NSString *version;
- (void)start;
- (id)initWithSuper;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSFileManager : NSObject
{
    NSString *_rootPath;
    NSFileManager *_underlyingFileManager;
}

@property(readonly, copy, nonatomic) NSString *rootPath; // @synthesize rootPath=_rootPath;
@property(readonly, nonatomic) NSFileManager *underlyingFileManager; // @synthesize underlyingFileManager=_underlyingFileManager;
- (void).cxx_destruct;
- (BOOL)removeContentsOfAllPaths;
- (BOOL)removeContentsOfPendingPath;
- (BOOL)removeContentsOfProcessingPath;
- (BOOL)movePendingToProcessing;
- (BOOL)moveProcessingContentsToPrepared;
- (void)enumerateFilesInPreparedDirectoryUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateFilesInActiveDirectoryUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateReportsInProcessingDirectoryUsingBlock:(CDUnknownBlockType)arg1;
- (void)removeLegacyDirectories;
- (id)setupNewPathForExecutionIdentifier:(id)arg1;
- (BOOL)prepareForNewLaunch;
@property(readonly, nonatomic) NSArray *processingPathContents;
@property(readonly, nonatomic) NSArray *preparedPathContents;
@property(readonly, nonatomic) NSArray *activePathContents;
@property(readonly, copy, nonatomic) NSString *preparedPath;
@property(readonly, copy, nonatomic) NSString *processingPath;
@property(readonly, copy, nonatomic) NSString *pendingPath;
@property(readonly, copy, nonatomic) NSString *activePath;
@property(readonly, copy, nonatomic) NSString *structurePath;
- (id)pathNamespace;
- (id)contentsOfDirectory:(id)arg1;
- (id)fileSizeAtPath:(id)arg1;
- (BOOL)moveItemsFromDirectory:(id)arg1 toDirectory:(id)arg2;
- (void)enumerateFilesInDirectory:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (BOOL)moveItemAtPath:(id)arg1 toDirectory:(id)arg2;
- (BOOL)removeContentsOfDirectoryAtPath:(id)arg1;
- (BOOL)removeItemAtPath:(id)arg1;
- (BOOL)createDirectoryAtPath:(id)arg1;
- (id)init;

@end

@interface CLSDemangleOperation : CLSThreadArrayOperation
{
}

+ (id)demangleCppSymbol:(const char *)arg1;
+ (id)demangleBlockInvokeCppSymbol:(const char *)arg1;
+ (id)demangleSymbol:(const char *)arg1;
- (void)main;
- (id)demangleSymbol:(const char *)arg1;

@end

@interface CLSPackageReportOperation : NSOperation
{
    CLSInternalReport *_report;
    CLSFileManager *_fileManager;
    NSString *_finalPath;
}

@property(copy, nonatomic) NSString *finalPath; // @synthesize finalPath=_finalPath;
@property(readonly, nonatomic) CLSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(readonly, nonatomic) CLSInternalReport *report; // @synthesize report=_report;
- (void).cxx_destruct;
- (void)encode:(id)arg1 data:(id)arg2 fromPath:(id)arg3;
- (void)main;
- (id)packagedPathWithName:(id)arg1;
- (id)destinationDirectory;
- (id)reportPath;
- (BOOL)writeBytes:(const void *)arg1 length:(unsigned long long)arg2 toGZFile:(struct gzFile_s *)arg3;
- (BOOL)compressData:(id)arg1 toPath:(id)arg2;
- (id)initWithReport:(id)arg1 fileManager:(id)arg2;

@end

@interface CLSSerializeSymbolicatedFramesOperation : CLSThreadArrayOperation
{
    NSString *_outputPath;
}

@property(copy, nonatomic) NSString *outputPath; // @synthesize outputPath=_outputPath;
- (void).cxx_destruct;
- (void)main;

@end

@interface CLSProcessReportOperation : NSOperation
{
    CLSSymbolResolver *_symbolResolver;
    CLSInternalReport *_report;
}

@property(readonly, nonatomic) CLSInternalReport *report; // @synthesize report=_report;
@property(readonly, nonatomic) CLSSymbolResolver *symbolResolver; // @synthesize symbolResolver=_symbolResolver;
- (void).cxx_destruct;
- (void)main;
- (BOOL)symbolicateFile:(id)arg1 withResolver:(id)arg2;
- (id)threadArrayFromFile:(id)arg1;
- (id)binaryImagePath;
- (id)initWithReport:(id)arg1 resolver:(id)arg2;

@end

@interface CLSSettings : NSObject
{
    NSDictionary *_settingsDictionary;
}

@property(readonly, nonatomic) NSDictionary *settingsDictionary; // @synthesize settingsDictionary=_settingsDictionary;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *interactivePromptAlwaysSendTitle;
@property(readonly, copy, nonatomic) NSString *interactivePromptSendTitle;
@property(readonly, copy, nonatomic) NSString *interactivePromptCancelTitle;
@property(readonly, copy, nonatomic) NSString *interactivePromptMessage;
@property(readonly, copy, nonatomic) NSString *interactivePromptTitle;
- (id)promptValueForSettingsKey:(id)arg1 withLocalizedKey:(id)arg2 defaultValue:(id)arg3;
@property(readonly, nonatomic) unsigned int maxCustomKeys;
@property(readonly, nonatomic) unsigned int maxCustomExceptions;
@property(readonly, nonatomic) unsigned int logBufferSize;
@property(readonly, nonatomic) unsigned int errorLogBufferSize;
@property(readonly, nonatomic) BOOL userPromptEnabled;
@property(readonly, nonatomic) BOOL crashReportingEnabled;
@property(readonly, nonatomic) BOOL customExceptionsEnabled;
@property(readonly, nonatomic) BOOL errorReportingEnabled;
@property(readonly, nonatomic) BOOL canProcessUrgentReports;
@property(readonly, nonatomic) BOOL shouldSubmitReports;
@property(readonly, nonatomic) BOOL shouldPackageReports;
@property(readonly, copy, nonatomic) NSString *reportsEndpoint;
@property(readonly, copy, nonatomic) NSNumber *betaSuspendDuration;
@property(readonly, copy, nonatomic) NSString *betaEndpoint;
- (id)valueForConfigurationKey:(id)arg1;
- (id)defaultConfiguration;
- (id)configuration;
- (id)initWithDictionary:(id)arg1;

@end

@interface CLSBetaController : NSObject <NSURLSessionDelegate>
{
    NSString *_betaToken;
    BOOL _checksSuspended;
    BOOL _retrying;
    id <CLSBetaControllerDelegate> _delegate;
    FABNetworkClient *_networkClient;
    CLSBetaUpdate *_activeUpdate;
    NSTimer *_checkSuspensionTimer;
    struct dispatch_queue_s *_queue;
}

+ (id)pinnnedCertificates;
+ (BOOL)isBetaSupported;
@property(readonly, nonatomic) struct dispatch_queue_s *queue; // @synthesize queue=_queue;
@property(nonatomic) BOOL retrying; // @synthesize retrying=_retrying;
@property(nonatomic) BOOL checksSuspended; // @synthesize checksSuspended=_checksSuspended;
@property(retain, nonatomic) NSTimer *checkSuspensionTimer; // @synthesize checkSuspensionTimer=_checkSuspensionTimer;
@property(retain, nonatomic) CLSBetaUpdate *activeUpdate; // @synthesize activeUpdate=_activeUpdate;
@property(readonly, nonatomic) FABNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(nonatomic) __weak id <CLSBetaControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)fabricSettingsDownloaded:(id)arg1;
- (void)showBetaAlertForUpdate:(id)arg1;
- (void)didGetUpdate:(id)arg1;
- (BOOL)shouldGetUpdates;
- (void)applicationWillEnterForeground;
- (void)allowChecks;
- (void)temporarilySuspendChecks;
- (id)updateWithData:(id)arg1 error:(id *)arg2;
- (void)handledCompletedBetaRequestWithData:(id)arg1 error:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)loadUpdateWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)maybeGetUpdate:(CDUnknownBlockType)arg1;
- (void)checkForUpdate;
- (id)betaUpdateURL;
- (id)APIKey;
- (id)appInstallationSource;
- (id)appInstanceIdentifier;
- (id)appDisplayVersion;
- (id)appBuildVersion;
- (id)appBundleIdentifier;
- (id)betaEndpoint;
- (id)betaUpdateSuspendDurationSecs;
- (id)settings;
@property(readonly, copy, nonatomic) NSString *betaToken;
- (void)dealloc;
- (BOOL)start;
- (id)initWithDelegate:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSSymbolResolver : NSObject
{
    NSMutableArray *_binaryImages;
}

- (void).cxx_destruct;
- (BOOL)updateStackFrame:(id)arg1;
- (id)frameForAddress:(unsigned long long)arg1;
- (BOOL)fillInImageDetails:(CDStruct_762b38bc *)arg1 forUUID:(id)arg2;
- (id)loadedBinaryImageForPC:(unsigned long long)arg1;
- (BOOL)loadBinaryImagesFromFile:(id)arg1;
- (id)init;

@end

@interface CLSCrashReportingController : NSObject <CLSNetworkClientDelegate, CLSReportsControllerDelegate>
{
    CLSFileManager *_fileMananger;
    CLSNetworkClient *_networkClient;
    CLSReportsController *_reportsController;
    NSOperationQueue *_operationQueue;
    CLSSettings *_settings;
    long long _promptChoice;
    id <CLSCrashReportingControllerDelegate> _delegate;
    CLSFileManager *_fileManager;
}

@property(retain, nonatomic) CLSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(retain, nonatomic) CLSNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(retain, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) __weak id <CLSCrashReportingControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)reportsControllerDidCompleteAllSubmissions:(id)arg1;
- (void)reportsController:(id)arg1 didCompletePackageSubmission:(id)arg2 error:(id)arg3;
- (id)bundleIdentifierForReportsController:(id)arg1;
- (id)APIKeyForReportsController:(id)arg1;
- (id)settingsForReportsController:(id)arg1;
- (void)networkClient:(id)arg1 didFinishUploadWithPath:(id)arg2 error:(id)arg3;
- (BOOL)networkClientCanUseBackgroundSessions:(id)arg1;
- (void)didBecomeInactive:(id)arg1;
- (void)willBecomeActive:(id)arg1;
- (void)captureInitialNotificationStates;
- (void)setupStateNotifications;
- (BOOL)checkForAndCreateLaunchMarker;
- (BOOL)removeLaunchFailureMarker;
- (BOOL)launchFailureMarkerPresent;
- (BOOL)createLaunchFailureMarker;
- (id)launchFailureMarkerPath;
- (void)handlePromptCompleteForReport:(id)arg1 shouldSubmit:(BOOL)arg2 shouldMarkAlwaysSubmit:(BOOL)arg3;
- (void)setupAndDisplayAlertWithTitle:(id)arg1 message:(id)arg2 cancel:(id)arg3 send:(id)arg4 alwaysSend:(id)arg5 report:(id)arg6;
- (void)displayPermissionAlertForReport:(id)arg1;
- (void)retryUploadForReportAtPath:(id)arg1;
- (void)uploadPreexistingFiles:(id)arg1;
- (void)handleExistingFilesInPrepared;
- (void)handleExistingFilesInProcessing;
- (void)handleContentsInOtherReportingDirectories;
- (void)removeReport:(id)arg1;
- (void)handleDelegateCompletionForReport:(id)arg1 submit:(BOOL)arg2;
- (void)processExistingActiveReportPath:(id)arg1 asUrgent:(BOOL)arg2;
- (void)processExistingReportPaths:(id)arg1 asUrgent:(BOOL)arg2;
- (id)setupCurrentReport;
- (BOOL)installCrashReportingHandlers:(CDStruct_1e2a2a70 *)arg1;
- (BOOL)prepareForNewLaunch;
- (id)bundleIdentifier;
- (BOOL)needsToPrompt;
- (BOOL)canProcessUrgentReports;
- (BOOL)delegateNeedsToBeInformedOfReports;
- (BOOL)packagingEnabled;
- (void)checkForUserPromptSetting;
- (BOOL)potentiallySubmittableCrashOccurred;
- (BOOL)attemptCurrentReportSubmission;
- (void)deliverCrashDelegateCallback;
- (unsigned int)machExceptionMask;
- (id)settings;
- (id)APIKey;
- (id)installIdentifier;
- (BOOL)firstInstall;
@property(readonly, nonatomic) CLSReportsController *reportsController;
- (BOOL)checkPreconditions;
- (void)crashReportingSetupCompleted:(unsigned long long)arg1;
- (BOOL)startCrashReporterWithAPIKey:(id)arg1 betaToken:(id)arg2 profilingMark:(unsigned long long)arg3 report:(id)arg4;
- (BOOL)startWithProfilingMark:(unsigned long long)arg1 betaToken:(id)arg2;
- (id)clientWithOperationQueue:(id)arg1;
- (id)initWithFileManager:(id)arg1 delegate:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSStackFrame : NSObject
{
    unsigned int _lineNumber;
    NSString *_symbol;
    NSString *_rawSymbol;
    NSString *_library;
    NSString *_fileName;
    unsigned long long _offset;
    unsigned long long _address;
}

+ (id)stackFrameWithSymbol:(id)arg1;
+ (id)stackFrameWithAddress:(unsigned long long)arg1;
+ (id)stackFrame;
@property(nonatomic) unsigned long long address; // @synthesize address=_address;
@property(nonatomic) unsigned long long offset; // @synthesize offset=_offset;
@property(nonatomic) unsigned int lineNumber; // @synthesize lineNumber=_lineNumber;
@property(copy, nonatomic) NSString *fileName; // @synthesize fileName=_fileName;
@property(copy, nonatomic) NSString *library; // @synthesize library=_library;
@property(copy, nonatomic) NSString *rawSymbol; // @synthesize rawSymbol=_rawSymbol;
@property(copy, nonatomic) NSString *symbol; // @synthesize symbol=_symbol;
- (void).cxx_destruct;
- (id)description;

@end

@interface CLSSymbolicationOperation : CLSThreadArrayOperation
{
    CLSSymbolResolver *_symbolResolver;
}

@property(retain, nonatomic) CLSSymbolResolver *symbolResolver; // @synthesize symbolResolver=_symbolResolver;
- (void).cxx_destruct;
- (void)main;

@end

@interface CLSReportsController : NSObject
{
    id <CLSReportsControllerDelegate> _delegate;
    NSOperationQueue *_operationQueue;
    CLSNetworkClient *_networkClient;
    CLSFileManager *_fileManager;
}

@property(readonly, nonatomic) CLSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(readonly, nonatomic) CLSNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) __weak id <CLSReportsControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)reportUploadAtPath:(id)arg1 completedWithError:(id)arg2;
- (BOOL)cleanUpSubmittedReportAtPath:(id)arg1;
- (BOOL)uploadPackagedReportAtPath:(id)arg1 asUrgent:(BOOL)arg2;
- (BOOL)submitPackageMultipartMimeAtPath:(id)arg1 synchronously:(BOOL)arg2;
- (BOOL)prepareAndSubmitReport:(id)arg1 asUrgent:(BOOL)arg2 withProcessing:(BOOL)arg3;
- (BOOL)fillInRequest:(id)arg1 forMultipartMimeDataAtPath:(id)arg2;
- (id)mutableRequestWithURL:(id)arg1 timeout:(double)arg2;
- (id)APIKey;
- (id)localeIdentifier;
- (BOOL)packagingEnabled;
- (BOOL)submissionEnabled;
- (id)reportURL;
- (id)reportEndpoint;
- (id)appBundleIdentifier;
- (id)settings;
- (id)initWithQueue:(id)arg1 delegate:(id)arg2 client:(id)arg3 fileManager:(id)arg4;

@end

@interface CLSReport : NSObject <CLSCrashReport>
{
    CLSInternalReport *_internalReport;
    unsigned int _internalKVCounter;
    unsigned int _userKVCounter;
    NSString *_internalCompactedKVFile;
    NSString *_internalIncrementalKVFile;
    NSString *_userCompactedKVFile;
    NSString *_userIncrementalKVFile;
    BOOL _readOnly;
    NSString *_identifer;
    NSString *_bundleVersion;
    NSString *_bundleShortVersionString;
    NSDate *_dateCreated;
    NSDate *_crashedOnDate;
    NSString *_OSVersion;
    NSString *_OSBuildVersion;
    NSNumber *_isCrash;
    NSDictionary *_customKeys;
}

@property(readonly, nonatomic) CLSInternalReport *internalReport; // @synthesize internalReport=_internalReport;
- (void).cxx_destruct;
@property(copy, nonatomic) NSString *userEmail;
@property(copy, nonatomic) NSString *userName;
@property(copy, nonatomic) NSString *userIdentifier;
- (void)setObjectValue:(id)arg1 forKey:(id)arg2;
@property(readonly, nonatomic) BOOL isCrash;
@property(readonly, copy, nonatomic) NSString *OSBuildVersion;
@property(readonly, copy, nonatomic) NSString *OSVersion;
@property(readonly, nonatomic) NSDate *crashedOnDate;
@property(readonly, copy, nonatomic) NSDate *dateCreated;
@property(readonly, copy, nonatomic) NSString *bundleShortVersionString;
@property(readonly, copy, nonatomic) NSString *bundleVersion;
@property(readonly, copy, nonatomic) NSDictionary *customKeys;
@property(readonly, copy, nonatomic) NSString *identifier;
- (id)readCustomKeys;
- (void)recordValue:(id)arg1 forUserKey:(id)arg2;
- (void)recordValue:(id)arg1 forInternalKey:(id)arg2;
- (BOOL)canRecordNewValues;
- (CDStruct_4355734a)userKVStorage;
- (CDStruct_4355734a)internalKVStorage;
- (id)initWithInternalReport:(id)arg1;
- (id)initWithInternalReport:(id)arg1 prefetchData:(BOOL)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSThreadArrayOperation : NSOperation
{
    NSArray *_threadArray;
}

@property(retain, nonatomic) NSArray *threadArray; // @synthesize threadArray=_threadArray;
- (void).cxx_destruct;
- (void)enumerateFramesWithBlock:(CDUnknownBlockType)arg1;

@end

@interface CLSBetaUpdate : NSObject
{
    NSURL *_url;
    NSString *_version;
}

+ (id)betaUpdateWithDictionary:(id)arg1 error:(id *)arg2;
@property(readonly, copy, nonatomic) NSString *version; // @synthesize version=_version;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *installLabel;
@property(readonly, copy, nonatomic) NSString *cancelLabel;
@property(readonly, copy, nonatomic) NSString *promptMessage;
@property(readonly, copy, nonatomic) NSString *promptTitle;
- (id)initWithDictionary:(id)arg1;

@end

@interface CLSNetworkClient : NSObject <NSURLSessionDelegate>
{
    NSURLSession *_session;
    BOOL _canUseBackgroundSession;
    id <CLSNetworkClientDelegate> _delegate;
    NSOperationQueue *_operationQueue;
    FABCertificatePinner *_certPinner;
    CDUnknownBlockType _backgroundCompletionHandler;
    CLSFileManager *_fileManager;
}

+ (id)pinner;
@property(retain, nonatomic) CLSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(nonatomic) BOOL canUseBackgroundSession; // @synthesize canUseBackgroundSession=_canUseBackgroundSession;
@property(copy, nonatomic) CDUnknownBlockType backgroundCompletionHandler; // @synthesize backgroundCompletionHandler=_backgroundCompletionHandler;
@property(readonly, nonatomic) FABCertificatePinner *certPinner; // @synthesize certPinner=_certPinner;
@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) __weak id <CLSNetworkClientDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)handleTaskDescription:(id)arg1 completedWithError:(id)arg2;
- (void)handleTask:(id)arg1 completedWithError:(id)arg2;
- (void)restartTask:(id)arg1;
- (void)runAfterRetryValueFromResponse:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)checkForExistingTaskMatchingDescription:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)checkSession:(id)arg1 forTasksMatchingDescription:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (BOOL)taskArray:(id)arg1 hasTaskMatchingDescription:(id)arg2;
- (id)relativeTaskPathForAbsolutePath:(id)arg1;
- (id)absolutePathForRelativeTaskPath:(id)arg1;
- (id)rootPath;
- (void)startNewUploadRequest:(id)arg1 filePath:(id)arg2;
- (void)startImmediateUploadRequest:(id)arg1 filePath:(id)arg2;
- (void)startUploadRequest:(id)arg1 filePath:(id)arg2 immediately:(BOOL)arg3;
- (void)attemptToReconnectBackgroundSessionWithCompletionBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) BOOL supportsBackgroundRequests;
- (BOOL)NSURLSessionAvailable;
@property(readonly, nonatomic) NSURLSession *session;
- (id)initWithQueue:(id)arg1 fileManager:(id)arg2 delegate:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface Answers : NSObject <FABKit>
{
    ANSAnswersController *_answersController;
}

+ (void)initializeIfNeeded;
+ (id)kitBuildVersion;
+ (id)kitDisplayVersion;
+ (id)bundleIdentifier;
+ (void)logCustomEventWithName:(id)arg1 customAttributes:(id)arg2;
+ (void)logSearchWithQuery:(id)arg1 customAttributes:(id)arg2;
+ (void)logContentViewWithName:(id)arg1 contentType:(id)arg2 contentId:(id)arg3 customAttributes:(id)arg4;
+ (void)logRating:(id)arg1 contentName:(id)arg2 contentType:(id)arg3 contentId:(id)arg4 customAttributes:(id)arg5;
+ (void)logStartCheckoutWithPrice:(id)arg1 currency:(id)arg2 itemCount:(id)arg3 customAttributes:(id)arg4;
+ (void)logAddToCartWithPrice:(id)arg1 currency:(id)arg2 itemName:(id)arg3 itemType:(id)arg4 itemId:(id)arg5 customAttributes:(id)arg6;
+ (void)logLevelEnd:(id)arg1 score:(id)arg2 success:(id)arg3 customAttributes:(id)arg4;
+ (void)logLevelStart:(id)arg1 customAttributes:(id)arg2;
+ (void)logPurchaseWithPrice:(id)arg1 currency:(id)arg2 success:(id)arg3 itemName:(id)arg4 itemType:(id)arg5 itemId:(id)arg6 customAttributes:(id)arg7;
+ (void)logShareWithMethod:(id)arg1 contentName:(id)arg2 contentType:(id)arg3 contentId:(id)arg4 customAttributes:(id)arg5;
+ (void)logLoginWithMethod:(id)arg1 success:(id)arg2 customAttributes:(id)arg3;
+ (void)logSignUpWithMethod:(id)arg1 success:(id)arg2 customAttributes:(id)arg3;
+ (void)logInviteWithMethod:(id)arg1 customAttributes:(id)arg2;
+ (void)logPreviousSessionCrashedOnDate:(id)arg1;
+ (void)startWithBetaToken:(id)arg1;
+ (id)sharedInstance;
@property(retain, nonatomic) ANSAnswersController *answersController; // @synthesize answersController=_answersController;
- (void).cxx_destruct;
- (void)startWithBetaToken:(id)arg1;
- (void)configureLogging;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ANSPredefinedEvent : ANSEvent
{
    NSString *_predefinedEventName;
    ANSAttributeDictionary *_customAttributes;
    ANSAttributeDictionary *_predefinedAttributes;
}

+ (id)searchEventWithQuery:(id)arg1 customAttributes:(id)arg2;
+ (id)contentViewEventWithName:(id)arg1 contentType:(id)arg2 contentId:(id)arg3 customAttributes:(id)arg4;
+ (id)ratingEventWithRating:(id)arg1 contentName:(id)arg2 contentType:(id)arg3 contentId:(id)arg4 customAttributes:(id)arg5;
+ (id)startCheckoutEventWithPrice:(id)arg1 currency:(id)arg2 itemCount:(id)arg3 customAttributes:(id)arg4;
+ (id)addToCartEventWithPrice:(id)arg1 currency:(id)arg2 itemName:(id)arg3 itemType:(id)arg4 itemId:(id)arg5 customAttributes:(id)arg6;
+ (id)levelEndEventWithLevelName:(id)arg1 score:(id)arg2 success:(id)arg3 customAttributes:(id)arg4;
+ (id)levelStartEventWithLevelName:(id)arg1 customAttributes:(id)arg2;
+ (id)purchaseEventWithPrice:(id)arg1 currency:(id)arg2 success:(id)arg3 itemName:(id)arg4 itemType:(id)arg5 itemId:(id)arg6 customAttributes:(id)arg7;
+ (id)inviteEventWithMethod:(id)arg1 customAttributes:(id)arg2;
+ (id)shareEventWithMethod:(id)arg1 contentName:(id)arg2 contentType:(id)arg3 contentId:(id)arg4 customAttributes:(id)arg5;
+ (id)loginEventWithMethod:(id)arg1 success:(id)arg2 customAttributes:(id)arg3;
+ (id)signUpEventWithMethod:(id)arg1 success:(id)arg2 customAttributes:(id)arg3;
@property(retain, nonatomic) ANSAttributeDictionary *predefinedAttributes; // @synthesize predefinedAttributes=_predefinedAttributes;
@property(retain, nonatomic) ANSAttributeDictionary *customAttributes; // @synthesize customAttributes=_customAttributes;
@property(retain, nonatomic) NSString *predefinedEventName; // @synthesize predefinedEventName=_predefinedEventName;
- (void).cxx_destruct;
- (id)description;
- (id)dictionaryRepresentation;
- (id)name;

@end

@interface ANSCrashMetadata : NSObject <ANSMetadataSerializable>
{
    NSDictionary *_rawMetadataDictionary;
}

+ (BOOL)writeSerializedDictionary:(id)arg1 toURL:(id)arg2;
+ (id)readSerializedDictionaryFromURL:(id)arg1;
@property(readonly, nonatomic) NSDictionary *rawMetadataDictionary; // @synthesize rawMetadataDictionary=_rawMetadataDictionary;
- (void).cxx_destruct;
- (id)dictionaryRepresentationWithStartTime:(unsigned long long)arg1;
- (id)eventName;
- (id)initWithDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ANSPackageLogOperation : NSOperation
{
    NSURL *_compressedLogURL;
    NSString *_multipartMimeBoundary;
    NSURL *_packagedLogURL;
}

@property(retain, nonatomic) NSURL *packagedLogURL; // @synthesize packagedLogURL=_packagedLogURL;
@property(retain, nonatomic) NSString *multipartMimeBoundary; // @synthesize multipartMimeBoundary=_multipartMimeBoundary;
@property(retain, nonatomic) NSURL *compressedLogURL; // @synthesize compressedLogURL=_compressedLogURL;
- (void).cxx_destruct;
- (id)multipartURLForCompressedURL:(id)arg1 withBoundary:(id)arg2;
- (void)main;
- (id)initWithCompressedLogURL:(id)arg1 packagedLogURL:(id)arg2 multipartMimeBoundary:(id)arg3;

@end

@interface ANSLifecycleEvent : ANSEvent
{
    NSString *_name;
}

+ (id)nameFromNotification:(id)arg1;
+ (id)notificationNameMap;
+ (id)appLaunchedEvent;
+ (id)installEvent;
+ (id)eventWithNotification:(id)arg1;
- (void).cxx_destruct;
- (BOOL)triggersFlush;
- (id)dictionaryRepresentation;
- (id)name;
- (id)initWithName:(id)arg1;
- (id)initWithNotification:(id)arg1;

@end

@interface ANSRotateCrashMetadataOperation : NSOperation
{
    NSURL *_crashMetadataURL;
    ANSMetadata *_currentMetadata;
    ANSCrashMetadata *_crashMetadata;
    NSDictionary *_currentMetadataDictionary;
}

@property(retain, nonatomic) NSDictionary *currentMetadataDictionary; // @synthesize currentMetadataDictionary=_currentMetadataDictionary;
@property(retain, nonatomic) ANSCrashMetadata *crashMetadata; // @synthesize crashMetadata=_crashMetadata;
@property(retain, nonatomic) ANSMetadata *currentMetadata; // @synthesize currentMetadata=_currentMetadata;
@property(retain, nonatomic) NSURL *crashMetadataURL; // @synthesize crashMetadataURL=_crashMetadataURL;
- (void).cxx_destruct;
- (void)main;
- (id)initWithCrashMetadataURL:(id)arg1 currentMetadata:(id)arg2;

@end

@interface ANSCleanupFilesOperation : NSOperation
{
    CDUnknownBlockType _successBlock;
    NSURL *_directoryUrl;
    long long _maximumPendingMultipartFiles;
}

@property(readonly, nonatomic) long long maximumPendingMultipartFiles; // @synthesize maximumPendingMultipartFiles=_maximumPendingMultipartFiles;
@property(readonly, nonatomic) NSURL *directoryUrl; // @synthesize directoryUrl=_directoryUrl;
@property(copy, nonatomic) CDUnknownBlockType successBlock; // @synthesize successBlock=_successBlock;
- (void).cxx_destruct;
- (id)URLsByRemovingOldFiles:(id)arg1 withMaximumFileCount:(long long)arg2;
- (void)main;
- (id)initWithDirectoryURL:(id)arg1 maximumPendingMulitpartFiles:(long long)arg2;

@end

@interface ANSAttributeDictionary : NSObject
{
    NSMutableDictionary *_rawDictionary;
}

@property(retain, nonatomic) NSMutableDictionary *rawDictionary; // @synthesize rawDictionary=_rawDictionary;
- (void).cxx_destruct;
- (id)serializeNumber:(id)arg1;
- (id)serializePriceToMicros:(id)arg1;
- (id)serializeSuccess:(id)arg1;
- (id)truncateString:(id)arg1;
- (id)serializeAttributeValue:(id)arg1;
- (BOOL)validAttributeValue:(id)arg1;
- (void)addPriceAttribute:(id)arg1 forKey:(id)arg2;
- (void)addBooleanAttribute:(id)arg1 forKey:(id)arg2;
- (void)addAttribute:(id)arg1 forKey:(id)arg2;
- (id)dictionaryRepresentation;
- (id)description;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface ANSSettings : NSObject
{
    NSDictionary *_settingsDictionary;
}

@property(readonly, nonatomic) NSDictionary *settingsDictionary; // @synthesize settingsDictionary=_settingsDictionary;
- (void).cxx_destruct;
@property(readonly, nonatomic) double lowPowerUploadTimeout;
@property(readonly, nonatomic) double defaultUploadTimeout;
@property(readonly, nonatomic) long long samplingRate;
@property(readonly, nonatomic) double flushInterval;
@property(readonly, nonatomic) long long maxPendingSendFiles;
@property(readonly, nonatomic) long long maximumPayloadSize;
@property(readonly, nonatomic) BOOL shouldCollectPredefinedEvents;
@property(readonly, nonatomic) BOOL shouldCollectCustomEvents;
@property(readonly, nonatomic) BOOL shouldCollectAnalytics;
@property(readonly, nonatomic) NSURL *answersURL;
@property(readonly, nonatomic) BOOL valid;
- (id)initWithDictionary:(id)arg1;

@end

@interface ANSMetadata : NSObject <ANSMetadataSerializable>
{
    BOOL _isJailbroken;
    unsigned int _numberOfCores;
    NSString *_APIKey;
    NSString *_betaToken;
    NSString *_buildVersion;
    NSString *_bundleIdentifier;
    NSString *_displayVersion;
    NSString *_executionIdentifier;
    NSString *_hostModel;
    NSString *_installationId;
    NSString *_instanceIdentifier;
    NSString *_locale;
    NSString *_OSBuildVersion;
    NSString *_OSDisplayVersion;
    NSString *_platform;
}

+ (id)identifierForAdvertising;
+ (BOOL)trackingForAdvertisingEnabled;
+ (BOOL)advertisingSupportFrameworkLinked;
+ (id)ASManager;
@property(readonly, nonatomic) NSString *platform; // @synthesize platform=_platform;
@property(readonly, nonatomic) NSString *OSDisplayVersion; // @synthesize OSDisplayVersion=_OSDisplayVersion;
@property(readonly, nonatomic) NSString *OSBuildVersion; // @synthesize OSBuildVersion=_OSBuildVersion;
@property(readonly, nonatomic) unsigned int numberOfCores; // @synthesize numberOfCores=_numberOfCores;
@property(readonly, nonatomic) NSString *locale; // @synthesize locale=_locale;
@property(readonly, nonatomic) BOOL isJailbroken; // @synthesize isJailbroken=_isJailbroken;
@property(readonly, nonatomic) NSString *instanceIdentifier; // @synthesize instanceIdentifier=_instanceIdentifier;
@property(readonly, nonatomic) NSString *installationId; // @synthesize installationId=_installationId;
@property(readonly, nonatomic) NSString *hostModel; // @synthesize hostModel=_hostModel;
@property(readonly, nonatomic) NSString *executionIdentifier; // @synthesize executionIdentifier=_executionIdentifier;
@property(readonly, nonatomic) NSString *displayVersion; // @synthesize displayVersion=_displayVersion;
@property(readonly, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly, nonatomic) NSString *buildVersion; // @synthesize buildVersion=_buildVersion;
@property(readonly, nonatomic) NSString *betaToken; // @synthesize betaToken=_betaToken;
@property(readonly, nonatomic) NSString *APIKey; // @synthesize APIKey=_APIKey;
- (void).cxx_destruct;
- (id)dictionaryRepresentationWithStartTime:(unsigned long long)arg1;
- (void)setValueInDictionary:(id)arg1 withKey:(id)arg2 toObject:(id)arg3;
- (id)eventName;
- (BOOL)computeIsJailbroken;
@property(readonly, nonatomic) unsigned int platformCode;
- (id)unwrapBetaToken:(id)arg1;
- (id)initWithFabric:(id)arg1 betaToken:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ANSEvent : NSObject
{
    NSDate *_timestamp;
    NSString *_identifier;
}

@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly, nonatomic) NSDate *timestamp; // @synthesize timestamp=_timestamp;
- (void).cxx_destruct;
@property(readonly, nonatomic) BOOL triggersFlush;
@property(readonly, nonatomic) NSDictionary *dictionaryRepresentation;
@property(readonly, nonatomic) NSString *name;
- (id)init;

@end

@interface ANSFileUtils : NSObject
{
}

+ (id)fileCreatedDateAtURL:(id)arg1 withDefault:(id)arg2;
+ (id)fileSizeAtURL:(id)arg1;
+ (id)filesWithExtension:(id)arg1 inDirectory:(id)arg2;
+ (id)allFilesInDirectory:(id)arg1;

@end

@interface ANSBackoffTimer : NSObject
{
    unsigned long long _retryCount;
    double _initialValue;
    double _jitterCoefficient;
}

+ (BOOL)jitterCoefficientIsValid:(double)arg1;
@property(readonly, nonatomic) double jitterCoefficient; // @synthesize jitterCoefficient=_jitterCoefficient;
@property(nonatomic) double initialValue; // @synthesize initialValue=_initialValue;
@property(nonatomic) unsigned long long retryCount; // @synthesize retryCount=_retryCount;
- (double)computeDelayForInitialValue:(double)arg1 retryCount:(unsigned long long)arg2;
- (double)generateRandomJitter;
- (double)randomDoubleWithMin:(double)arg1 max:(double)arg2;
- (void)executeBlockAfterNextInterval:(CDUnknownBlockType)arg1;
- (id)init;
- (id)initWithInitialValue:(double)arg1 jitterCoefficient:(double)arg2;
- (id)initWithInitialValue:(double)arg1;

@end

@interface ANSNetworkRetryHandler : NSObject
{
    FABCertificatePinner *_certPinner;
    NSMutableDictionary *_retryTimerMap;
}

@property(readonly, nonatomic) NSMutableDictionary *retryTimerMap; // @synthesize retryTimerMap=_retryTimerMap;
@property(readonly, nonatomic) FABCertificatePinner *certPinner; // @synthesize certPinner=_certPinner;
- (void).cxx_destruct;
- (id)timerForIdentifier:(id)arg1 initialRetryValue:(double)arg2;
- (void)handleCompletedRequest:(id)arg1 withResponse:(id)arg2 forIdentifier:(id)arg3 maxRetries:(unsigned long long)arg4 error:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)handleCompletedRequest:(id)arg1 withResponse:(id)arg2 forIdentifier:(id)arg3 error:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)errorWithCode:(long long)arg1 forIdentifier:(id)arg2 request:(id)arg3 handlerError:(id)arg4;
- (double)retryValueForResponse:(id)arg1;
- (void)handleChallenge:(id)arg1 fromURLSession:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)sharedFabricSDK;
- (id)init;

@end

@interface ANSWriteEventOperation : NSOperation
{
    BOOL _success;
    ANSEvent *_event;
    id <ANSMetadataSerializable> _metadata;
    NSURL *_logFileUrl;
    NSString *_formattedEvent;
    NSString *_formattedMetadata;
}

@property(retain, nonatomic) NSString *formattedMetadata; // @synthesize formattedMetadata=_formattedMetadata;
@property(retain, nonatomic) NSString *formattedEvent; // @synthesize formattedEvent=_formattedEvent;
@property(nonatomic) BOOL success; // @synthesize success=_success;
@property(retain, nonatomic) NSURL *logFileUrl; // @synthesize logFileUrl=_logFileUrl;
@property(readonly, nonatomic) id <ANSMetadataSerializable> metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) ANSEvent *event; // @synthesize event=_event;
- (void).cxx_destruct;
- (id)logLineWithTimestamp:(id)arg1 eventName:(id)arg2 payloadDictionary:(id)arg3;
- (id)generateFormattedLogLineWithMetdata:(id)arg1 timestamp:(id)arg2;
- (id)generateFormattedLogLineWithEvent:(id)arg1;
- (BOOL)appendLogLine:(id)arg1 toFileDescriptor:(int)arg2;
- (BOOL)writeDataToDescriptor:(int)arg1 withPreexistingFile:(BOOL)arg2;
- (void)main;
- (id)initWithEvent:(id)arg1 metadata:(id)arg2 logFileUrl:(id)arg3;

@end

@interface ANSTimer : NSObject
{
    NSString *_timerIdentifier;
    double _timeInterval;
    CDUnknownBlockType _timerBlock;
    NSOperationQueue *_queue;
    struct dispatch_source_s *_timerSource;
    NSBackgroundActivityScheduler *_backgroundActivityScheduler;
}

@property(retain, nonatomic) NSBackgroundActivityScheduler *backgroundActivityScheduler; // @synthesize backgroundActivityScheduler=_backgroundActivityScheduler;
@property(nonatomic) struct dispatch_source_s *timerSource; // @synthesize timerSource=_timerSource;
@property(readonly, nonatomic) NSOperationQueue *queue; // @synthesize queue=_queue;
@property(copy, nonatomic) CDUnknownBlockType timerBlock; // @synthesize timerBlock=_timerBlock;
@property(nonatomic) double timeInterval; // @synthesize timeInterval=_timeInterval;
@property(readonly, nonatomic) NSString *timerIdentifier; // @synthesize timerIdentifier=_timerIdentifier;
- (void).cxx_destruct;
- (void)scheduleBackgroundActivityWithName:(id)arg1;
- (void)scheduleDispatchTimer;
- (void)executeBlock;
@property(readonly, nonatomic) double tolerance;
- (void)scheduleTimer;
- (void)dealloc;
- (id)initWithTimeInterval:(double)arg1 onQueue:(id)arg2 timerIdentifier:(id)arg3 block:(CDUnknownBlockType)arg4;

@end

@interface ANSActivityOperation : NSOperation
{
    ANSActivity *_activity;
}

+ (id)operationByStartingActivityName:(id)arg1 options:(unsigned long long)arg2;
@property(readonly, nonatomic) ANSActivity *activity; // @synthesize activity=_activity;
- (void).cxx_destruct;
- (void)main;
- (void)startActivityWithName:(id)arg1 options:(unsigned long long)arg2;

@end

@interface ANSCompressLogOperation : NSOperation
{
    NSURL *_uncompressedLogURL;
    NSURL *_compressedLogURL;
}

@property(retain, nonatomic) NSURL *compressedLogURL; // @synthesize compressedLogURL=_compressedLogURL;
@property(retain, nonatomic) NSURL *uncompressedLogURL; // @synthesize uncompressedLogURL=_uncompressedLogURL;
- (void).cxx_destruct;
- (id)compressedURLForUncompressedURL:(id)arg1;
- (void)main;
- (id)initWithUncompressedLogURL:(id)arg1 compressedLogURL:(id)arg2;

@end

@interface ANSUploader : NSObject <NSURLSessionDelegate>
{
    NSURLSession *_session;
    id <ANSUploaderDelegate> _delegate;
    double _defaultUploadTimeout;
    double _lowPowerUploadTimeout;
    NSOperationQueue *_operationQueue;
}

@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) double lowPowerUploadTimeout; // @synthesize lowPowerUploadTimeout=_lowPowerUploadTimeout;
@property(nonatomic) double defaultUploadTimeout; // @synthesize defaultUploadTimeout=_defaultUploadTimeout;
@property(nonatomic) __weak id <ANSUploaderDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)handleTaskDescription:(id)arg1 completedWithError:(id)arg2;
- (void)handleTask:(id)arg1 completedWithError:(id)arg2;
- (void)restartTask:(id)arg1;
- (void)checkForExistingTaskMatchingDescription:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)checkSession:(id)arg1 forTasksMatchingDescription:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (BOOL)taskArray:(id)arg1 hasTaskMatchingDescription:(id)arg2;
- (void)startNewUploadRequest:(id)arg1 filePath:(id)arg2 uniqueName:(id)arg3;
- (id)errorUserInfoWithFilePath:(id)arg1 uniqueName:(id)arg2;
- (id)errorWithCode:(long long)arg1 userInfo:(id)arg2;
- (void)startUploadRequest:(id)arg1 filePath:(id)arg2 uniqueName:(id)arg3;
- (id)session;
- (id)createBackgroundSessionConfiguration;
- (Class)urlSessionConfigurationClass;
- (Class)urlSessionClass;
- (void)attemptToReconnectBackgroundSessionWithCompletionBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) BOOL supportsBackgroundRequests;
- (BOOL)shouldUseBackgroundRequests;
@property(readonly, nonatomic) BOOL lowPowerMode;
- (BOOL)supportsThermalNotifications;
- (void)powerStageChanged:(id)arg1;
- (id)initWithQueue:(id)arg1 delegate:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ANSLogger : NSObject
{
    BOOL _debugMode;
}

+ (id)sharedLogger;
@property(nonatomic) BOOL debugMode; // @synthesize debugMode=_debugMode;
- (void)internalLog:(id)arg1 args:(struct __va_list_tag [1])arg2;
- (void)logWithLabel:(id)arg1 format:(id)arg2;
- (void)log:(id)arg1;

@end

@interface ANSApplication : NSObject
{
    NSDictionary *_infoPlistDict;
}

+ (id)hostApplication;
@property(readonly, nonatomic) NSDictionary *infoPlistDict; // @synthesize infoPlistDict=_infoPlistDict;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSApplication *appSharedInstance;
@property(readonly, nonatomic) BOOL isExtension;
@property(readonly, nonatomic) NSString *extensionPointIdentifier;
@property(readonly, nonatomic) NSDictionary *extensionDefinitionDictionary;
@property(readonly, nonatomic) NSString *shortVersionString;
@property(readonly, nonatomic) NSString *bundleVersion;
@property(readonly, nonatomic) NSString *bundleIdentifier;
- (id)initWithInfoPlistDictionary:(id)arg1;

@end

@interface ANSCrashEvent : ANSEvent
{
    NSDate *_crashTimestamp;
    unsigned long long _crashState;
}

@property(nonatomic) unsigned long long crashState; // @synthesize crashState=_crashState;
@property(retain, nonatomic) NSDate *crashTimestamp; // @synthesize crashTimestamp=_crashTimestamp;
- (void).cxx_destruct;
- (id)payloadStringForCrashState:(unsigned long long)arg1;
- (id)dictionaryRepresentation;
- (id)timestamp;
- (id)name;
- (id)initWithTimestamp:(id)arg1 crashState:(unsigned long long)arg2;

@end

@interface ANSCustomEvent : ANSEvent
{
    NSString *_customEventName;
    ANSAttributeDictionary *_customAttributes;
}

@property(retain, nonatomic) ANSAttributeDictionary *customAttributes; // @synthesize customAttributes=_customAttributes;
@property(readonly, nonatomic) NSString *customEventName; // @synthesize customEventName=_customEventName;
- (void).cxx_destruct;
- (id)description;
- (id)dictionaryRepresentation;
- (id)name;
- (id)initWithCustomEventName:(id)arg1 customAttributes:(id)arg2;

@end

@interface ANSActivity : NSObject
{
    id <NSObject> _processInfoToken;
    unsigned long long _options;
    NSString *_reason;
    unsigned long long _backgroundTaskIdentifier;
}

+ (id)beginActivityIfAvailable:(id)arg1 options:(unsigned long long)arg2;
+ (void)performActivity:(id)arg1 options:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (id)beginActivity:(id)arg1 withOptions:(unsigned long long)arg2;
+ (id)beginActivity:(id)arg1 withOptions:(unsigned long long)arg2 expirationHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) unsigned long long backgroundTaskIdentifier; // @synthesize backgroundTaskIdentifier=_backgroundTaskIdentifier;
@property(readonly, nonatomic) NSString *reason; // @synthesize reason=_reason;
@property(readonly, nonatomic) unsigned long long options; // @synthesize options=_options;
@property(retain, nonatomic) id <NSObject> processInfoToken; // @synthesize processInfoToken=_processInfoToken;
- (void).cxx_destruct;
- (void)endAndInvalidateInternalActivity;
- (void)endAndInvalidateBackgroundTask;
- (BOOL)supportsBackgroundTasks;
- (id)sharedAppInstance;
- (void)end;
- (void)dealloc;
- (id)initWithProcessToken:(id)arg1 options:(unsigned long long)arg2 reason:(id)arg3 backgroundTaskIdentifier:(unsigned long long)arg4;
- (unsigned long long)beginBackgroundTaskWithName:(id)arg1 expirationHandler:(CDUnknownBlockType)arg2;

@end

@interface ANSAnswersController : NSObject <ANSUploaderDelegate>
{
    NSOperationQueue *_eventQueue;
    NSString *_rootEventDirectory;
    ANSMetadata *_metadata;
    ANSCrashMetadata *_previousExecutionMetadata;
    ANSUploader *_uploader;
    ANSNetworkRetryHandler *_networkRetryHandler;
    NSURL *_currentLogURL;
    ANSEventFilter *_eventFilter;
    ANSSettings *_settings;
    ANSTimer *_flushTimer;
}

+ (id)rootDirectory;
@property(readonly, nonatomic) ANSTimer *flushTimer; // @synthesize flushTimer=_flushTimer;
@property(readonly, nonatomic) ANSSettings *settings; // @synthesize settings=_settings;
@property(readonly, nonatomic) ANSEventFilter *eventFilter; // @synthesize eventFilter=_eventFilter;
@property(readonly, nonatomic) NSURL *currentLogURL; // @synthesize currentLogURL=_currentLogURL;
@property(readonly, nonatomic) ANSNetworkRetryHandler *networkRetryHandler; // @synthesize networkRetryHandler=_networkRetryHandler;
@property(readonly, nonatomic) ANSUploader *uploader; // @synthesize uploader=_uploader;
@property(readonly, nonatomic) ANSCrashMetadata *previousExecutionMetadata; // @synthesize previousExecutionMetadata=_previousExecutionMetadata;
@property(readonly, nonatomic) ANSMetadata *metadata; // @synthesize metadata=_metadata;
@property(readonly, nonatomic) NSString *rootEventDirectory; // @synthesize rootEventDirectory=_rootEventDirectory;
@property(readonly, nonatomic) NSOperationQueue *eventQueue; // @synthesize eventQueue=_eventQueue;
- (void).cxx_destruct;
- (void)uploader:(id)arg1 completedRequest:(id)arg2 withResponse:(id)arg3 uniqueName:(id)arg4 error:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)uploader:(id)arg1 session:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)uploader:(id)arg1 didFinishUploadWithUniqueName:(id)arg2 error:(id)arg3;
- (id)uploader:(id)arg1 filePathForUniqueName:(id)arg2;
- (id)multipartMimeURLWithBoundary:(id)arg1;
- (id)boundaryFromURL:(id)arg1;
- (void)uploadMultipartFiles:(id)arg1;
- (void)uploadAllMultipartFiles;
- (void)cleanupAndProcessExistingFiles;
- (id)uploadOperationForFileAtURL:(id)arg1 withBoundary:(id)arg2;
- (id)operationsForCompressedLog:(id)arg1;
- (id)operationsForUncompressedLog:(id)arg1;
- (void)rotateAndSubmitCurrentLog;
- (BOOL)shouldSubmitLogAtURL:(id)arg1;
- (void)enqueueEvent:(id)arg1;
- (void)logCrashEvent:(id)arg1;
- (BOOL)shouldLogEvent;
- (void)logEvent:(id)arg1;
- (id)replacePreviousExecutionMetadataWithCurrentMetadata:(id)arg1 inRootDirectory:(id)arg2;
- (void)removeAllLogs;
- (void)flushTimerFired;
- (void)setupFlushTimer;
- (void)initializeSettingsIfNeededWithFabricSettings:(id)arg1;
- (void)fabricSettingsDidBecomeAvailable:(id)arg1;
- (id)generateNewLogPath;
- (void)applicationLifecycleEvent:(id)arg1;
- (void)registerForApplicationLifecycleEvents;
- (id)uploaderWithQueue:(id)arg1 delegate:(id)arg2;
- (id)sharedFabricSDK;
- (id)crashMetadataPathForRootDirectory:(id)arg1;
- (id)eventDirectoryForRootDirectory:(id)arg1;
- (id)initWithBetaToken:(id)arg1 rootDirectory:(id)arg2;
- (id)initWithBetaToken:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ANSUploadOperation : NSOperation
{
    ANSUploader *_uploader;
    NSURL *_answersURL;
    NSString *_apiKey;
    NSURL *_multipartURL;
    NSString *_multipartMimeBoundary;
}

@property(readonly, nonatomic) NSString *multipartMimeBoundary; // @synthesize multipartMimeBoundary=_multipartMimeBoundary;
@property(readonly, nonatomic) NSURL *multipartURL; // @synthesize multipartURL=_multipartURL;
@property(readonly, nonatomic) NSString *apiKey; // @synthesize apiKey=_apiKey;
@property(readonly, nonatomic) NSURL *answersURL; // @synthesize answersURL=_answersURL;
@property(readonly, nonatomic) ANSUploader *uploader; // @synthesize uploader=_uploader;
- (void).cxx_destruct;
- (id)currentTimestampString;
- (void)main;
- (id)initWithUploader:(id)arg1 answersURL:(id)arg2 apiKey:(id)arg3 multipartURL:(id)arg4 multipartMimeBoundary:(id)arg5;

@end

@interface ANSEventFilter : NSObject
{
}

+ (int)javaHashCodeForString:(id)arg1;
- (BOOL)shouldDiscardEventWithInstallationID:(id)arg1 forSamplingFactor:(long long)arg2;
- (BOOL)samplingEnabledForEventType:(id)arg1;
- (BOOL)shouldDiscardEvent:(id)arg1 betaToken:(id)arg2 installationID:(id)arg3 withFactor:(long long)arg4;

@end

@interface AdMobKit : NSObject <FABKit>
{
}

+ (id)kitDisplayVersion;
+ (id)bundleIdentifier;
+ (id)sharedInstance;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FABSettingsOnboardingManager : NSObject <FABDownloadAndSaveSettingsOperationDelegate, FABOnboardingOperationDelegate>
{
    BOOL _hasAttemptedAppConfigure;
    FABApplicationIdentiferModel *_appIdentifierModel;
    FABSettings *_settingsModel;
    FABOnboardingOperation *_onboardingOperation;
    NSFileManager *_fileManager;
    NSDictionary *_configuration;
    NSDictionary *_defaultConfiguration;
    NSString *_APIKey;
    NSDictionary *_kitVersionsByKitBundleIdentifier;
    FABNetworkClient *_networkClient;
}

+ (id)settingsDirectoryPath;
@property(readonly, nonatomic) FABNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(copy, nonatomic) NSDictionary *kitVersionsByKitBundleIdentifier; // @synthesize kitVersionsByKitBundleIdentifier=_kitVersionsByKitBundleIdentifier;
@property(copy, nonatomic) NSString *APIKey; // @synthesize APIKey=_APIKey;
@property(retain, nonatomic) NSDictionary *defaultConfiguration; // @synthesize defaultConfiguration=_defaultConfiguration;
@property(retain, nonatomic) NSDictionary *configuration; // @synthesize configuration=_configuration;
@property(nonatomic) BOOL hasAttemptedAppConfigure; // @synthesize hasAttemptedAppConfigure=_hasAttemptedAppConfigure;
@property(retain, nonatomic) NSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(retain, nonatomic) FABOnboardingOperation *onboardingOperation; // @synthesize onboardingOperation=_onboardingOperation;
@property(retain, nonatomic) FABSettings *settingsModel; // @synthesize settingsModel=_settingsModel;
@property(retain, nonatomic) FABApplicationIdentiferModel *appIdentifierModel; // @synthesize appIdentifierModel=_appIdentifierModel;
- (void).cxx_destruct;
- (void)postSettingsDownloadCompletedNotification;
- (id)settingsPath;
- (id)settingsURL;
- (void)operation:(id)arg1 didDownloadAndSaveSettingsWithError:(id)arg2;
- (void)onboardingOperation:(id)arg1 didCompleteAppUpdateWithError:(id)arg2;
- (void)onboardingOperation:(id)arg1 didCompleteAppCreationWithError:(id)arg2;
- (id)appIconHash;
- (id)valueForConfigurationKey:(id)arg1;
- (void)finishNetworkingSession;
- (id)advertisingToken;
- (void)beginOnboarding:(BOOL)arg1 endpointString:(id)arg2;
- (void)beginSettingsDownload;
- (void)beginSettingsAndOnboardingOperationsWithAPIKey:(id)arg1 kitVersionsByKitBundleIdentifier:(id)arg2;
- (id)initWithApplicationIdentifierModel:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FABIcon : NSObject
{
    BOOL _prerendered;
    NSData *_data;
    NSString *_dataHash;
    struct CGSize _size;
}

@property(nonatomic) BOOL prerendered; // @synthesize prerendered=_prerendered;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
@property(copy, nonatomic) NSString *dataHash; // @synthesize dataHash=_dataHash;
@property(copy, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (BOOL)largerThanSize:(struct CGSize)arg1;
@property(readonly, nonatomic) BOOL isWithinMaxSurfaceArea;
@property(readonly, nonatomic) double surfaceArea;
- (id)initWithImage:(id)arg1;
- (id)initWithData:(id)arg1 size:(struct CGSize)arg2;
- (id)initWithData:(id)arg1 size:(struct CGSize)arg2 prerendered:(BOOL)arg3;
- (id)initWithData:(id)arg1 dataHash:(id)arg2 size:(struct CGSize)arg3 prerendered:(BOOL)arg4;

@end

@interface Fabric : NSObject
{
    BOOL _debug;
    BOOL _isFirstInstall;
    NSString *_APIKey;
    NSString *_installID;
    NSString *_executionIdentifier;
    NSString *_advertisingToken;
    NSArray *_kitClasses;
    NSDictionary *_fabricConfig;
    FABSettingsOnboardingManager *_settingsAndOnboardingManager;
    FABApplicationIdentiferModel *_applicationIdentifierModel;
}

+ (id)configurationDictionaryForKitClass:(Class)arg1;
+ (void)initializeKit:(Class)arg1;
+ (id)kitClassesByAddingAdMobIfFound:(id)arg1;
+ (id)kitClassesByEnsuringAppseeIsFirst:(id)arg1;
+ (id)kitClassesByAddingAnswersIfFound:(id)arg1;
+ (id)kitClassesByAddingDigitsIfFound:(id)arg1;
+ (void)validateFABKitConformance:(id)arg1;
+ (id)convertToKitClassesIfNeeded:(id)arg1;
+ (id)with:(id)arg1;
+ (id)sharedSDK;
@property(readonly, nonatomic) FABApplicationIdentiferModel *applicationIdentifierModel; // @synthesize applicationIdentifierModel=_applicationIdentifierModel;
@property(retain, nonatomic) FABSettingsOnboardingManager *settingsAndOnboardingManager; // @synthesize settingsAndOnboardingManager=_settingsAndOnboardingManager;
@property(copy, nonatomic) NSDictionary *fabricConfig; // @synthesize fabricConfig=_fabricConfig;
@property(copy, nonatomic) NSArray *kitClasses; // @synthesize kitClasses=_kitClasses;
@property(copy, nonatomic) NSString *advertisingToken; // @synthesize advertisingToken=_advertisingToken;
@property(readonly, copy, nonatomic) NSString *executionIdentifier; // @synthesize executionIdentifier=_executionIdentifier;
@property(readonly, nonatomic) BOOL isFirstInstall; // @synthesize isFirstInstall=_isFirstInstall;
@property(readonly, copy, nonatomic) NSString *installID; // @synthesize installID=_installID;
@property(copy, nonatomic) NSString *APIKey; // @synthesize APIKey=_APIKey;
@property(nonatomic) BOOL debug; // @synthesize debug=_debug;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *instanceIdentifier;
@property(readonly, nonatomic) NSDictionary *settings;
- (id)configurationDictionaryForKit:(id)arg1;
- (id)validFabricConfigFromInfoPlist:(id)arg1;
- (id)generateInstallationUUID;
- (id)readInstallationUUID;
- (id)kitVersionsByKitBundleIdentifier;
- (void)onboardAppAndDownloadSettings;
- (id)init;

@end

@interface FABNetworkOperation : FABAsyncOperation
{
    NSString *_APIKey;
}

@property(readonly, nonatomic) NSString *APIKey; // @synthesize APIKey=_APIKey;
- (void).cxx_destruct;
- (id)localeIdentifier;
- (id)userAgentString;
- (id)mutableRequestWithDefaultHTTPHeadersForURL:(id)arg1 timeout:(double)arg2;
- (id)mutableRequestWithDefaultHTTPHeaderFieldsAndTimeoutForURL:(id)arg1;
- (id)initWithAPIKey:(id)arg1;

@end

@interface FABURLBuilder : NSObject
{
    NSMutableString *_URLString;
    unsigned long long _queryParams;
}

+ (id)URLWithBase:(id)arg1;
@property(nonatomic) unsigned long long queryParams; // @synthesize queryParams=_queryParams;
@property(retain, nonatomic) NSMutableString *URLString; // @synthesize URLString=_URLString;
- (void).cxx_destruct;
- (id)URL;
- (void)appendValue:(id)arg1 forQueryParam:(id)arg2;
- (void)escapeAndAppendComponent:(id)arg1;
- (void)appendComponent:(id)arg1;
- (id)escapeString:(id)arg1;
- (id)init;

@end

@interface FABCertificatePinner : NSObject
{
    NSArray *_certificates;
}

+ (struct OpaqueSecCertificateRef *)createCertificationWithData:(const void *)arg1 length:(unsigned long long)arg2;
@property(readonly, nonatomic) NSArray *certificates; // @synthesize certificates=_certificates;
- (void).cxx_destruct;
- (BOOL)handleChallenge:(id)arg1 fromURLSession:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (short)evaluateTrust:(struct __SecTrust *)arg1 result:(unsigned int *)arg2;
- (id)initWithCertificates:(id)arg1;

@end

@interface FABAppIconUtility : NSObject
{
    FABIcon *_applicationIcon;
}

@property(retain, nonatomic) FABIcon *applicationIcon; // @synthesize applicationIcon=_applicationIcon;
- (void).cxx_destruct;
- (id)fetchApplicationIcon;
- (id)mainAppIcon;
@property(readonly, nonatomic) NSDictionary *appInfoDictionary;

@end

@interface FABMultipartMimeStreamEncoder : NSObject <NSStreamDelegate>
{
    unsigned long long _length;
    NSString *_boundary;
    NSOutputStream *_outputStream;
}

+ (id)generateBoundary;
+ (id)encoderWithStream:(id)arg1 andBoundary:(id)arg2;
+ (id)contentTypeHTTPHeaderValueWithBoundary:(id)arg1;
+ (void)populateRequest:(id)arg1 withDataFromEncoder:(CDUnknownBlockType)arg2;
@property(retain, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(copy, nonatomic) NSString *boundary; // @synthesize boundary=_boundary;
@property(nonatomic) unsigned long long length; // @synthesize length=_length;
- (void).cxx_destruct;
- (void)writeData:(id)arg1;
- (BOOL)writeBytes:(const void *)arg1 ofLength:(unsigned long long)arg2;
- (void)addFile:(id)arg1 fileName:(id)arg2 mimeType:(id)arg3 fieldName:(id)arg4;
- (void)addValue:(id)arg1 fieldName:(id)arg2;
- (void)addFileData:(id)arg1 fileName:(id)arg2 mimeType:(id)arg3 fieldName:(id)arg4;
@property(readonly, copy, nonatomic) NSData *footerData;
@property(readonly, copy, nonatomic) NSData *headerData;
- (void)endEncoding;
- (void)beginEncoding;
@property(readonly, copy, nonatomic) NSString *contentLengthHTTPHeaderValue;
@property(readonly, copy, nonatomic) NSString *contentTypeHTTPHeaderValue;
- (void)encode:(CDUnknownBlockType)arg1;
- (id)initWithStream:(id)arg1 andBoundary:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FABSettings : NSObject
{
    BOOL _reportingEnabled;
    BOOL _errorReportingEnabled;
    NSNumber *_logBufferSize;
    NSNumber *_maxErrors;
    NSNumber *_maxCustomKeys;
    NSDictionary *_settingsDictionary;
    NSString *_settingsPath;
    NSFileManager *_fileManager;
}

@property(retain, nonatomic) NSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(retain, nonatomic) NSString *settingsPath; // @synthesize settingsPath=_settingsPath;
@property(retain, nonatomic) NSDictionary *settingsDictionary; // @synthesize settingsDictionary=_settingsDictionary;
@property(readonly, nonatomic) NSNumber *maxCustomKeys; // @synthesize maxCustomKeys=_maxCustomKeys;
@property(readonly, nonatomic) NSNumber *maxErrors; // @synthesize maxErrors=_maxErrors;
@property(readonly, nonatomic) NSNumber *logBufferSize; // @synthesize logBufferSize=_logBufferSize;
@property(readonly, nonatomic) BOOL errorReportingEnabled; // @synthesize errorReportingEnabled=_errorReportingEnabled;
@property(readonly, nonatomic) BOOL reportingEnabled; // @synthesize reportingEnabled=_reportingEnabled;
- (void).cxx_destruct;
- (id)settingsURLForEndpoint:(id)arg1 appInstanceIdentifer:(id)arg2 appIconHash:(id)arg3;
- (void)clearSettingsDictionary;
- (id)appStatus;
- (id)appSettings;
- (id)appSource;
- (id)appDisplayVersion;
- (id)appBuildVersion;
- (id)appPlatform;
- (id)appBundleIdentifier;
@property(readonly, nonatomic) BOOL appNeedsOnboarding;
@property(readonly, nonatomic) BOOL appUpdateRequired;
- (id)initWithSettingsPath:(id)arg1 fileManager:(id)arg2;

@end

@interface FABApplicationIdentiferModel : NSObject
{
    NSDictionary *_architectureUUIDMap;
    NSString *_installID;
    FABIcon *_icon;
    NSString *_bundleIdentifier;
    NSString *_instanceIdentifier;
    CDStruct_e24ffa00 _builtSDK;
    CDStruct_e24ffa00 _minimumSDK;
}

@property(readonly, nonatomic) CDStruct_e24ffa00 minimumSDK; // @synthesize minimumSDK=_minimumSDK;
@property(readonly, nonatomic) CDStruct_e24ffa00 builtSDK; // @synthesize builtSDK=_builtSDK;
@property(copy, nonatomic) NSString *instanceIdentifier; // @synthesize instanceIdentifier=_instanceIdentifier;
@property(readonly, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly, nonatomic) FABIcon *icon; // @synthesize icon=_icon;
@property(readonly, nonatomic) NSString *installID; // @synthesize installID=_installID;
@property(copy, nonatomic) NSDictionary *architectureUUIDMap; // @synthesize architectureUUIDMap=_architectureUUIDMap;
- (void).cxx_destruct;
- (BOOL)computeInstanceIdentifier;
- (BOOL)computeExecutableInfo;
@property(readonly, nonatomic) NSString *minimumSDKString;
@property(readonly, nonatomic) NSString *builtSDKString;
- (id)initWithInstallID:(id)arg1;

@end

@interface FABDownloadAndSaveSettingsOperation : FABNetworkOperation
{
    id <FABDownloadAndSaveSettingsOperationDelegate> _delegate;
    NSError *_error;
    NSURL *_settingsURL;
    NSFileManager *_fileManager;
    NSString *_settingsDirectoryPath;
    NSString *_settingsFilePath;
    NSString *_installIdentifier;
    NSString *_advertisingToken;
    FABNetworkClient *_networkClient;
}

@property(readonly, nonatomic) __weak FABNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(readonly, nonatomic) NSString *advertisingToken; // @synthesize advertisingToken=_advertisingToken;
@property(readonly, nonatomic) NSString *installIdentifier; // @synthesize installIdentifier=_installIdentifier;
@property(readonly, nonatomic) NSString *settingsFilePath; // @synthesize settingsFilePath=_settingsFilePath;
@property(readonly, nonatomic) NSString *settingsDirectoryPath; // @synthesize settingsDirectoryPath=_settingsDirectoryPath;
@property(readonly, nonatomic) NSFileManager *fileManager; // @synthesize fileManager=_fileManager;
@property(readonly, nonatomic) NSURL *settingsURL; // @synthesize settingsURL=_settingsURL;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) id <FABDownloadAndSaveSettingsOperationDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)main;
- (id)mutableRequestWithDefaultHTTPHeaderFieldsAndTimeoutForURL:(id)arg1;
- (id)initWithAPIKey:(id)arg1 delegate:(id)arg2 settingsURL:(id)arg3 settingsDirectoryPath:(id)arg4 settingsFilePath:(id)arg5 fileManager:(id)arg6 installIdentifier:(id)arg7 advertisingToken:(id)arg8 networkClient:(id)arg9;
- (id)initWithAPIKey:(id)arg1;

@end

@interface FABNetworkResponseHandler : NSObject
{
}

+ (void)handleCompletedResponse:(id)arg1 forOriginalRequest:(id)arg2 error:(id)arg3 block:(CDUnknownBlockType)arg4;
+ (void)clientResponseType:(id)arg1 handler:(CDUnknownBlockType)arg2;
+ (id)errorForResponse:(id)arg1 ofType:(long long)arg2 status:(long long)arg3;
+ (id)errorForCode:(long long)arg1 userInfo:(id)arg2;
+ (BOOL)retryableURLError:(id)arg1;
+ (long long)cancelReasonFromURLError:(id)arg1;
+ (BOOL)contentTypeForResponse:(id)arg1 matchesRequest:(id)arg2;
+ (id)requestIdForResponse:(id)arg1;
+ (double)retryValueForResponse:(id)arg1;
+ (id)headerForResponse:(id)arg1 withKey:(id)arg2;

@end

@interface FABOnboardingOperation : FABNetworkOperation
{
    BOOL _shouldCreate;
    NSError *_error;
    FABApplicationIdentiferModel *_appIdentifierModel;
    NSString *_appEndpoint;
    id <FABOnboardingOperationDelegate> _delegate;
    FABNetworkClient *_networkClient;
    NSDictionary *_kitVersionsByKitBundleIdentifier;
}

@property(readonly, copy, nonatomic) NSDictionary *kitVersionsByKitBundleIdentifier; // @synthesize kitVersionsByKitBundleIdentifier=_kitVersionsByKitBundleIdentifier;
@property(readonly, nonatomic) __weak FABNetworkClient *networkClient; // @synthesize networkClient=_networkClient;
@property(readonly, nonatomic) id <FABOnboardingOperationDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) NSString *appEndpoint; // @synthesize appEndpoint=_appEndpoint;
@property(readonly, nonatomic) FABApplicationIdentiferModel *appIdentifierModel; // @synthesize appIdentifierModel=_appIdentifierModel;
@property(nonatomic) BOOL shouldCreate; // @synthesize shouldCreate=_shouldCreate;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
- (void).cxx_destruct;
- (id)onboardingRequestForAppCreate:(BOOL)arg1;
- (id)appUpdateURL;
- (id)appCreateURL;
- (id)errorForCode:(unsigned long long)arg1 userInfo:(id)arg2;
- (id)appInstallSource;
- (id)appDisplayVersion;
- (id)appBuildVersion;
- (id)appName;
- (id)appPlatform;
- (id)appBundleIdentifier;
- (void)beginAppConfigure;
- (void)main;
- (id)initWithDelegate:(id)arg1 shouldCreate:(BOOL)arg2 APIKey:(id)arg3 kitVersionsByKitBundleIdentifier:(id)arg4 appIdentifierModel:(id)arg5 endpointString:(id)arg6 networkClient:(id)arg7;
- (id)initWithAPIKey:(id)arg1;

@end

@interface FABNetworkClient : NSObject <NSURLSessionDelegate, NSURLSessionTaskDelegate>
{
    FABCertificatePinner *_certPinner;
    NSURLSession *_session;
}

@property(readonly, nonatomic) NSURLSession *session; // @synthesize session=_session;
@property(readonly, nonatomic) FABCertificatePinner *certPinner; // @synthesize certPinner=_certPinner;
- (void).cxx_destruct;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)invalidateAndCancel;
- (void)startDownloadTaskWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startDownloadTaskWithRequest:(id)arg1 retryLimit:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)startDownloadTaskWithRequest:(id)arg1 retryLimit:(unsigned long long)arg2 tries:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)startDataTaskWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startDataTaskWithRequest:(id)arg1 retryLimit:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)startDataTaskWithRequest:(id)arg1 retryLimit:(unsigned long long)arg2 tries:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)runAfterRetryValueFromResponse:(id)arg1 attempts:(unsigned long long)arg2 block:(CDUnknownBlockType)arg3;
- (void)runAfterRetryValueFromResponse:(id)arg1 attempts:(unsigned long long)arg2 onQueue:(struct dispatch_queue_s *)arg3 block:(CDUnknownBlockType)arg4;
- (double)computeDelayForResponse:(id)arg1 withRetryCount:(unsigned long long)arg2;
- (double)generateRandomJitter;
- (double)randomDoubleWithMin:(double)arg1 max:(double)arg2;
- (void)dealloc;
- (id)initWithSessionConfiguration:(id)arg1 queue:(id)arg2 pinnedCertificates:(id)arg3;
- (id)initWithQueue:(id)arg1 pinnedCertificates:(id)arg2;
- (id)initWithQueue:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSURLSessionDownloadTask : CLSURLSessionDataTask <NSStreamDelegate>
{
    CDUnknownBlockType _downloadCompletionHandler;
    NSOutputStream *_outputStream;
    NSURL *_targetURL;
}

@property(copy, nonatomic) CDUnknownBlockType downloadCompletionHandler; // @synthesize downloadCompletionHandler=_downloadCompletionHandler;
- (void).cxx_destruct;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)completeForError;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)writeDataToStream:(id)arg1;
- (void)complete;
- (void)cleanup;
- (id)temporaryFileURL;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSURLSessionTask : NSObject
{
    id <CLSURLSessionTaskDelegate> _delegate;
    NSURLRequest *_originalRequest;
    NSURLRequest *_currentRequest;
    NSURLResponse *_response;
    NSError *_error;
    struct dispatch_queue_s *_queue;
    BOOL _invokesDelegate;
}

+ (id)task;
@property(nonatomic) id <CLSURLSessionTaskDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) BOOL invokesDelegate; // @synthesize invokesDelegate=_invokesDelegate;
@property(readonly, nonatomic) struct dispatch_queue_s *queue; // @synthesize queue=_queue;
@property(copy, nonatomic) NSError *error; // @synthesize error=_error;
@property(copy, nonatomic) NSURLResponse *response; // @synthesize response=_response;
@property(copy, nonatomic) NSURLRequest *originalRequest; // @synthesize originalRequest=_originalRequest;
@property(copy, nonatomic) NSURLRequest *currentRequest; // @synthesize currentRequest=_currentRequest;
- (void).cxx_destruct;
- (void)cleanup;
- (void)resume;
- (void)cancel;
- (void)start;
- (id)init;

@end

@interface CLSURLSessionDataTask : CLSURLSessionTask <NSURLConnectionDelegate>
{
    CDUnknownBlockType _completionHandler;
    NSURLConnection *_connection;
    NSMutableData *_data;
    NSString *_taskDescription;
}

@property(copy, nonatomic) NSString *taskDescription; // @synthesize taskDescription=_taskDescription;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain, nonatomic) NSURLConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)cancel;
- (void)complete;
- (void)resume;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSURLSession : NSObject <CLSURLSessionDownloadDelegate>
{
    id <NSURLSessionDelegate> _delegate;
    NSOperationQueue *_delegateQueue;
    NSURLSessionConfiguration *_configuration;
    NSMutableSet *_taskSet;
    struct dispatch_queue_s *_queue;
    NSString *_sessionDescription;
}

+ (id)newDefaultDelegateQueue;
+ (id)sessionWithConfiguration:(id)arg1 delegate:(id)arg2 delegateQueue:(id)arg3;
+ (id)sessionWithConfiguration:(id)arg1;
+ (BOOL)NSURLSessionShouldBeUsed;
@property(copy, nonatomic) NSString *sessionDescription; // @synthesize sessionDescription=_sessionDescription;
@property(copy, nonatomic) NSURLSessionConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain, nonatomic) NSOperationQueue *delegateQueue; // @synthesize delegateQueue=_delegateQueue;
@property(retain, nonatomic) id <NSURLSessionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)downloadTask:(id)arg1 didFinishDownloadingToURL:(id)arg2;
- (void)task:(id)arg1 didReceiveData:(id)arg2;
- (void)task:(id)arg1 didReceiveResponse:(id)arg2;
- (void)task:(id)arg1 didCompleteWithError:(id)arg2;
- (id)task:(id)arg1 willPerformHTTPRedirection:(id)arg2 newRequest:(id)arg3;
- (id)downloadTaskWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)uploadTaskWithRequest:(id)arg1 fromFile:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)dataTaskWithRequest:(id)arg1;
- (id)dataTaskWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)downloadTaskWithURL:(id)arg1;
- (id)downloadTaskWithRequest:(id)arg1;
- (id)uploadTaskWithRequest:(id)arg1 fromFile:(id)arg2;
- (BOOL)shouldInvokeDelegateSelector:(SEL)arg1 forTask:(id)arg2;
- (void)configureTask:(id)arg1 withRequest:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)removeTaskFromSet:(id)arg1;
- (void)getTasksWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finishTasksAndInvalidate;
- (void)invalidateAndCancel;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CLSURLSessionConfiguration : NSObject <NSCopying>
{
    NSDictionary *_additionalHeaders;
    NSURLCache *_URLCache;
    unsigned long long _cookiePolicy;
    BOOL _allowsCellularAccess;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
}

+ (id)backgroundSessionConfigurationWithIdentifier:(id)arg1;
+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)ephemeralSessionConfiguration;
+ (id)defaultSessionConfiguration;
@property(nonatomic) BOOL allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property(nonatomic) double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property(nonatomic) double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;
@property(nonatomic) unsigned long long HTTPCookieAcceptPolicy; // @synthesize HTTPCookieAcceptPolicy=_cookiePolicy;
@property(copy, nonatomic) NSDictionary *HTTPAdditionalHeaders; // @synthesize HTTPAdditionalHeaders=_additionalHeaders;
@property(retain, nonatomic) NSURLCache *URLCache; // @synthesize URLCache=_URLCache;
- (void).cxx_destruct;
@property(nonatomic) BOOL sessionSendsLaunchEvents;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface CLSURLSessionUploadTask : CLSURLSessionDataTask
{
}

@end

@interface CLSUserDefaults : NSObject
{
    NSURL *_directoryURL;
    NSURL *_fileURL;
    NSMutableDictionary *_dataDictionary;
    struct dispatch_queue_s *_serialDictionaryQueue;
    struct dispatch_queue_s *_synchronizationQueue;
}

+ (id)standardUserDefaults;
@property(readonly, nonatomic) struct dispatch_queue_s *synchronizationQueue; // @synthesize synchronizationQueue=_synchronizationQueue;
@property(readonly, nonatomic) struct dispatch_queue_s *serialDictionaryQueue; // @synthesize serialDictionaryQueue=_serialDictionaryQueue;
@property(readonly, copy, nonatomic) NSMutableDictionary *dataDictionary; // @synthesize dataDictionary=_dataDictionary;
@property(readonly, copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(readonly, copy, nonatomic) NSURL *directoryURL; // @synthesize directoryURL=_directoryURL;
- (void).cxx_destruct;
- (id)objectForKeyByMigratingFromNSUserDefaults:(id)arg1;
- (void)migrateFromNSUserDefaults:(id)arg1;
- (id)loadDefaults;
- (void)synchronize;
- (id)dictionaryRepresentation;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setBool:(BOOL)arg1 forKey:(id)arg2;
- (void)setString:(id)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (BOOL)boolForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)getEscapedAppBundleIdentifier;
- (id)generateDirectoryURLForBaseURL:(id)arg1 hostAppBundleIdentifier:(id)arg2;
- (id)generateDirectoryURL;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface FABAsyncOperation : NSOperation
{
    BOOL _internalExecuting;
    BOOL _internalFinished;
    CDUnknownBlockType _asyncCompletion;
    NSRecursiveLock *_lock;
}

@property(retain, nonatomic) NSRecursiveLock *lock; // @synthesize lock=_lock;
@property(copy, nonatomic) CDUnknownBlockType asyncCompletion; // @synthesize asyncCompletion=_asyncCompletion;
- (void).cxx_destruct;
- (void)finishWithError:(id)arg1;
- (void)markDone;
- (void)markStarted;
- (void)unlockedMarkComplete;
- (void)unlockedMarkStarted;
- (void)unlockedMarkFinished;
- (BOOL)checkForCancellation;
- (void)lock:(CDUnknownBlockType)arg1;
- (void)changeValueForKey:(id)arg1 inBlock:(CDUnknownBlockType)arg2;
- (void)start;
- (BOOL)isFinished;
- (BOOL)isExecuting;
- (BOOL)isAsynchronous;
- (BOOL)isConcurrent;
- (id)init;

@end

@interface NSString (SGUtils)
+ (id)stringWithIPAddressFromSockaddrData:(id)arg1;
+ (id)stringWithIPAddressFromSockaddr:(struct sockaddr_storage *)arg1 size:(unsigned int)arg2;
+ (id)speedStringFromByteCount:(unsigned long long)arg1;
+ (id)stringFromByteCount:(unsigned long long)arg1;
+ (id)stringWithIPAddressUsingHostByteOrder:(unsigned int)arg1;
+ (id)stringWithIPAddressUsingNetworkByteOrder:(unsigned int)arg1;
- (id)lineAtIndex:(long long)arg1;
- (BOOL)isHostnameMatchPattern:(id)arg1;
- (unsigned long long)unsignedLongLongValue;
- (id)trimmedComponentsSeparatedByString:(id)arg1 expectedLength:(unsigned long long)arg2;
- (BOOL)hasSuffixIgnoringWhitespaceAndNewlineCharacter:(id)arg1;
- (BOOL)hasPrefixIgnoringWhitespaceAndNewlineCharacter:(id)arg1;
- (id)trimmedString;
- (void)getHostname:(id *)arg1 andPort:(unsigned short *)arg2 withDefaultPortValue:(unsigned short)arg3;
- (struct in6_addr)IPv6Address;
- (unsigned int)IPAddressUsingHostByteOrder;
- (unsigned int)IPAddressUsingNetworkByteOrder;
- (BOOL)isIPCIDRString;
- (BOOL)isValidHostnameAllowWildcard:(BOOL)arg1;
- (BOOL)isValidHostname;
- (BOOL)isValidIPv4IPAddress;
- (BOOL)isIPv4MappedIPv6Address;
- (BOOL)isIPv6Address;
- (BOOL)isIPAddress;
@end

@interface NSData (SGUtils)
- (id)componentsSeparatedByData:(id)arg1;
@end

@interface NSData (KDUtilities)
- (id)componentsSeparatedByData:(id)arg1;
- (id)stringValue;
- (id)stringWithEncoding:(unsigned long long)arg1;
- (id)stringWithUTF8Encoding;
- (id)KD_MD5;
@end

@interface NSColor (KDAUtilites)
+ (id)KD_colorWithCode:(unsigned long long)arg1;
@end

@interface NSViewController (ShowError)
- (void)showMessageWithTitle:(id)arg1 message:(id)arg2;
- (void)showErrorMessage:(id)arg1;
@end

@interface NSObject (YYModel)
+ (id)yy_modelWithDictionary:(id)arg1;
+ (id)yy_modelWithJSON:(id)arg1;
+ (id)_yy_dictionaryWithJSON:(id)arg1;
- (id)yy_modelDescription;
- (BOOL)yy_modelIsEqual:(id)arg1;
- (unsigned long long)yy_modelHash;
- (id)yy_modelInitWithCoder:(id)arg1;
- (void)yy_modelEncodeWithCoder:(id)arg1;
- (id)yy_modelCopy;
- (id)yy_modelToJSONString;
- (id)yy_modelToJSONData;
- (id)yy_modelToJSONObject;
- (BOOL)yy_modelSetWithDictionary:(id)arg1;
- (BOOL)yy_modelSetWithJSON:(id)arg1;
@end

@interface NSArray (YYModel)
+ (id)yy_modelArrayWithClass:(Class)arg1 array:(id)arg2;
+ (id)yy_modelArrayWithClass:(Class)arg1 json:(id)arg2;
@end

@interface NSDictionary (YYModel)
+ (id)yy_modelDictionaryWithClass:(Class)arg1 dictionary:(id)arg2;
+ (id)yy_modelDictionaryWithClass:(Class)arg1 json:(id)arg2;
@end

@interface NSArray (KDUtilities)
- (id)KD_shuffledArray;
- (id)KD_randomObject;
- (id)KD_arrayUsingMapEnumerateBlock:(CDUnknownBlockType)arg1;
@end

@interface NSDate (KDDateStyle)
- (id)KD_dateAndTimeStringWithStyle:(unsigned long long)arg1;
- (id)KD_timeStringWithStyle:(unsigned long long)arg1;
- (id)KD_dateStringWithStyle:(unsigned long long)arg1;
- (id)KD_stringByChineseRelativeFormatAllowFutureDate:(BOOL)arg1;
@end

@interface NSDate (KDUtilities)
+ (id)dateWithMinutesBeforeNow:(long long)arg1;
+ (id)dateWithMinutesFromNow:(long long)arg1;
+ (id)dateWithHoursBeforeNow:(long long)arg1;
+ (id)dateWithHoursFromNow:(long long)arg1;
+ (id)dateYesterday;
+ (id)dateTomorrow;
+ (id)dateWithDaysBeforeNow:(long long)arg1;
+ (id)dateWithDaysFromNow:(long long)arg1;
+ (BOOL)timeIs24HourFormat;
@property(readonly) long long year;
@property(readonly) long long nthWeekday;
@property(readonly) long long weekday;
@property(readonly) long long weekOfYear;
@property(readonly) long long month;
@property(readonly) long long day;
@property(readonly) long long seconds;
@property(readonly) long long minute;
@property(readonly) long long hour;
@property(readonly) long long nearestHour;
- (long long)daysBeforeDate:(id)arg1;
- (long long)daysAfterDate:(id)arg1;
- (long long)hoursBeforeDate:(id)arg1;
- (long long)hoursAfterDate:(id)arg1;
- (long long)minutesBeforeDate:(id)arg1;
- (long long)minutesAfterDate:(id)arg1;
- (id)componentsWithOffsetFromDate:(id)arg1;
- (id)dateAtStartOfMonth;
- (id)dateAtMiddleOfDay;
- (id)dateAtStartOfDay;
- (id)dateBySubtractingMinutes:(long long)arg1;
- (id)dateByAddingMinutes:(long long)arg1;
- (id)dateBySubtractingHours:(long long)arg1;
- (id)dateByAddingHours:(long long)arg1;
- (id)dateBySubtractingDays:(long long)arg1;
- (id)dateByAddingDays:(long long)arg1;
- (BOOL)isLaterThanDate:(id)arg1;
- (BOOL)isEarlierThanDate:(id)arg1;
- (BOOL)isLastYear;
- (BOOL)isNextYear;
- (BOOL)isThisYear;
- (BOOL)isSameYearAsDate:(id)arg1;
- (BOOL)isLastWeek;
- (BOOL)isNextWeek;
- (BOOL)isThisWeek;
- (BOOL)isSameWeekAsDate:(id)arg1;
- (BOOL)isYesterday;
- (BOOL)isTomorrow;
- (BOOL)isToday;
- (BOOL)isEqualToDateIgnoringTime:(id)arg1;
@end

@interface NSData (KDJSONHelper)
- (id)KD_JSONObjectWithMutableContainers;
- (id)KD_JSONObject;
@end

@interface NSDictionary (KDJSONHelper)
- (id)KD_JSONString;
- (id)KD_JSONData;
@end

@interface NSArray (KDJSONHelper)
- (id)KD_JSONString;
- (id)KD_JSONData;
@end

@interface NSObject (KDUtilitiesNotNull)
- (BOOL)KD_notNull;
@end

@interface NSNumber (KDUtilities)
- (void)KD_forLoop:(CDUnknownBlockType)arg1;
@end

@interface NSTextField (KDABridge)
@property(copy, nonatomic) NSString *text;
@end

@interface NSButton (KDABridge)
@property(nonatomic) BOOL selected;
@end

@interface NSViewController (KDABridge)
- (id)initWithDefaultNib;
@end

@interface NSWindowController (KDABridge)
- (id)initWithDefaultNib;
@end

@interface NSTableView (KDABridge)
- (void)reloadDataForRowIndexes:(id)arg1;
@end

@interface NSFont (KDABridge)
+ (id)italicSystemFontOfSize:(double)arg1;
@end

@interface NSObject (SGLogger)
- (id)loggerModuleName;
@end

@interface NSString (KDUtilites)
- (id)KD_MD5;
@end

@interface NSDictionary (KDUtilities)
- (id)KD_reversedDictionary;
- (id)KD_subdictionaryWithKeys:(id)arg1;
@end

